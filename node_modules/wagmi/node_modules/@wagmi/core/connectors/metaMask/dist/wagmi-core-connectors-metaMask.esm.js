import { _ as _classPrivateMethodInitSpec, l as _defineProperty, o as _classPrivateMethodGet, m as _classPrivateFieldInitSpec, p as _classPrivateFieldSet, q as _classPrivateFieldGet } from '../../../dist/base-997b4fec.esm.js';
import { I as InjectedConnector } from '../../../dist/client-1ab99bf8.esm.js';
import 'eventemitter3';
import '../../../dist/rpcs-7cfbd91c.esm.js';
import 'ethers';
import 'zustand/vanilla';
import 'zustand/middleware';
import 'ethers/lib/utils';

var _provider = /*#__PURE__*/new WeakMap();

var _getReady = /*#__PURE__*/new WeakSet();

var _findProvider = /*#__PURE__*/new WeakSet();

class MetaMaskConnector extends InjectedConnector {
  constructor() {
    let {
      chains,
      options
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super({
      chains,
      options: {
        name: 'MetaMask',
        shimDisconnect: true,
        ...options
      }
    });

    _classPrivateMethodInitSpec(this, _findProvider);

    _classPrivateMethodInitSpec(this, _getReady);

    _defineProperty(this, "id", 'metaMask');

    _defineProperty(this, "ready", typeof window != 'undefined' && !!_classPrivateMethodGet(this, _findProvider, _findProvider2).call(this, window.ethereum));

    _classPrivateFieldInitSpec(this, _provider, {
      writable: true,
      value: void 0
    });
  }

  async getProvider() {
    if (typeof window !== 'undefined') {
      // TODO: Fallback to `ethereum#initialized` event for async injection
      // https://github.com/MetaMask/detect-provider#synchronous-and-asynchronous-injection=
      _classPrivateFieldSet(this, _provider, _classPrivateMethodGet(this, _findProvider, _findProvider2).call(this, window.ethereum));
    }

    return _classPrivateFieldGet(this, _provider);
  }

}

function _getReady2(ethereum) {
  const isMetaMask = !!(ethereum !== null && ethereum !== void 0 && ethereum.isMetaMask);
  if (!isMetaMask) return; // Brave tries to make itself look like MetaMask
  // Could also try RPC `web3_clientVersion` if following is unreliable

  if (ethereum.isBraveWallet && !ethereum._events && !ethereum._state) return;
  if (ethereum.isTokenary) return;
  return ethereum;
}

function _findProvider2(ethereum) {
  if (ethereum !== null && ethereum !== void 0 && ethereum.providers) return ethereum.providers.find(_classPrivateMethodGet(this, _getReady, _getReady2));
  return _classPrivateMethodGet(this, _getReady, _getReady2).call(this, ethereum);
}

export { MetaMaskConnector };
