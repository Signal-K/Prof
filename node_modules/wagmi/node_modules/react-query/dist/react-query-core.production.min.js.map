{"version":3,"file":"react-query-core.production.min.js","sources":["../src/core/subscribable.ts","../src/core/utils.ts","../src/core/focusManager.ts","../src/core/onlineManager.ts","../src/core/retryer.ts","../src/core/logger.ts","../src/core/notifyManager.ts","../src/core/removable.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/mutation.ts","../src/core/mutationCache.ts","../src/core/infiniteQueryBehavior.ts","../src/core/queryObserver.ts","../src/core/hydration.ts","../src/core/infiniteQueryObserver.ts","../src/core/mutationObserver.ts","../src/core/queriesObserver.ts","../src/core/queryClient.ts"],"sourcesContent":["type Listener = () => void\n\nexport class Subscribable<TListener extends Function = Listener> {\n  protected listeners: TListener[]\n\n  constructor() {\n    this.listeners = []\n    this.subscribe = this.subscribe.bind(this)\n  }\n\n  subscribe(listener: TListener): () => void {\n    this.listeners.push(listener as TListener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners = this.listeners.filter(x => x !== listener)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.length > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","import type { Mutation } from './mutation'\nimport type { Query } from './query'\nimport type {\n  FetchStatus,\n  MutationFunction,\n  MutationKey,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Filter to active queries, inactive queries or all queries\n   */\n  type?: QueryTypeFilter\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include queries matching their fetchStatus\n   */\n  fetchStatus?: FetchStatus\n}\n\nexport interface MutationFilters {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (mutation: Mutation<any, any, any>) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Include or exclude fetching mutations\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\nexport type QueryTypeFilter = 'all' | 'active' | 'inactive'\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined'\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: unknown): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter(x => array2.indexOf(x) === -1)\n}\n\nexport function replaceAt<T>(array: T[], index: number, value: T): T[] {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<\n  TOptions extends QueryOptions<any, any, any, TQueryKey>,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  arg1: TQueryKey | TOptions,\n  arg2?: QueryFunction<any, TQueryKey> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return { ...arg2, queryKey: arg1 } as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>\n>(\n  arg1: MutationKey | MutationFunction<any, any> | TOptions,\n  arg2?: MutationFunction<any, any> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3, mutationKey: arg1, mutationFn: arg2 } as TOptions\n    }\n    return { ...arg2, mutationKey: arg1 } as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2, mutationFn: arg1 } as TOptions\n  }\n\n  return { ...arg1 } as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions\n): [TFilters, TOptions | undefined] {\n  return (isQueryKey(arg1)\n    ? [{ ...arg2, queryKey: arg1 }, arg3]\n    : [arg1 || {}, arg2]) as [TFilters, TOptions]\n}\n\nexport function parseMutationFilterArgs<\n  TFilters extends MutationFilters,\n  TOptions = unknown\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions\n): [TFilters, TOptions | undefined] {\n  return (isQueryKey(arg1)\n    ? [{ ...arg2, mutationKey: arg1 }, arg3]\n    : [arg1 || {}, arg2]) as [TFilters, TOptions]\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>\n): boolean {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive()\n    if (type === 'active' && !isActive) {\n      return false\n    }\n    if (type === 'inactive' && isActive) {\n      return false\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (\n    typeof fetchStatus !== 'undefined' &&\n    fetchStatus !== query.state.fetchStatus\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>\n): boolean {\n  const { exact, fetching, predicate, mutationKey } = filters\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (\n        hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)\n      ) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (\n    typeof fetching === 'boolean' &&\n    (mutation.state.status === 'loading') !== fetching\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: QueryOptions<any, any, any, TQueryKey>\n): string {\n  const hashFn = options?.queryKeyHashFn || hashQueryKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query keys hash function.\n * Hashes the value into a stable hash.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  return JSON.stringify(queryKey, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean {\n  return partialDeepEqual(a, b)\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: unknown): value is QueryKey {\n  return Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void) {\n  sleep(0).then(callback)\n}\n\nexport function getAbortController(): AbortController | undefined {\n  if (typeof AbortController === 'function') {\n    return new AbortController()\n  }\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable {\n  private focused?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = onFocus => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', listener, false)\n        window.addEventListener('focus', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n          window.removeEventListener('focus', listener)\n        }\n      }\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup(focused => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    this.focused = focused\n\n    if (focused) {\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState\n    )\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setOnline: (online?: boolean) => void\n) => (() => void) | undefined\n\nexport class OnlineManager extends Subscribable {\n  private online?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = onOnline => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline()\n        // Listen to online\n        window.addEventListener('online', listener, false)\n        window.addEventListener('offline', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener)\n          window.removeEventListener('offline', listener)\n        }\n      }\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    this.online = online\n\n    if (online) {\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { sleep } from './utils'\nimport { CancelOptions, NetworkMode } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = unknown> {\n  fn: () => TData | Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode: NetworkMode | undefined\n}\n\nexport interface Retryer<TData = unknown> {\n  promise: Promise<TData>\n  cancel: (cancelOptions?: CancelOptions) => void\n  continue: () => void\n  cancelRetry: () => void\n  continueRetry: () => void\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError> = (\n  failureCount: number,\n  error: TError\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\nexport function canFetch(networkMode: NetworkMode | undefined): boolean {\n  return (networkMode ?? 'online') === 'online'\n    ? onlineManager.isOnline()\n    : true\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function createRetryer<TData = unknown, TError = unknown>(\n  config: RetryerConfig<TData, TError>\n): Retryer<TData> {\n  let isRetryCancelled = false\n  let failureCount = 0\n  let isResolved = false\n  let continueFn: ((value?: unknown) => void) | undefined\n  let promiseResolve: (data: TData) => void\n  let promiseReject: (error: TError) => void\n\n  const promise = new Promise<TData>((outerResolve, outerReject) => {\n    promiseResolve = outerResolve\n    promiseReject = outerReject\n  })\n\n  const cancel = (cancelOptions?: CancelOptions): void => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions))\n\n      config.abort?.()\n    }\n  }\n  const cancelRetry = () => {\n    isRetryCancelled = true\n  }\n\n  const continueRetry = () => {\n    isRetryCancelled = false\n  }\n\n  const shouldPause = () =>\n    !focusManager.isFocused() ||\n    (config.networkMode !== 'always' && !onlineManager.isOnline())\n\n  const resolve = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onSuccess?.(value)\n      continueFn?.()\n      promiseResolve(value)\n    }\n  }\n\n  const reject = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onError?.(value)\n      continueFn?.()\n      promiseReject(value)\n    }\n  }\n\n  const pause = () => {\n    return new Promise(continueResolve => {\n      continueFn = value => {\n        if (isResolved || !shouldPause()) {\n          return continueResolve(value)\n        }\n      }\n      config.onPause?.()\n    }).then(() => {\n      continueFn = undefined\n      if (!isResolved) {\n        config.onContinue?.()\n      }\n    })\n  }\n\n  // Create loop function\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return\n    }\n\n    let promiseOrValue: any\n\n    // Execute query\n    try {\n      promiseOrValue = config.fn()\n    } catch (error) {\n      promiseOrValue = Promise.reject(error)\n    }\n\n    Promise.resolve(promiseOrValue)\n      .then(resolve)\n      .catch(error => {\n        // Stop if the fetch is already resolved\n        if (isResolved) {\n          return\n        }\n\n        // Do we need to retry the request?\n        const retry = config.retry ?? 3\n        const retryDelay = config.retryDelay ?? defaultRetryDelay\n        const delay =\n          typeof retryDelay === 'function'\n            ? retryDelay(failureCount, error)\n            : retryDelay\n        const shouldRetry =\n          retry === true ||\n          (typeof retry === 'number' && failureCount < retry) ||\n          (typeof retry === 'function' && retry(failureCount, error))\n\n        if (isRetryCancelled || !shouldRetry) {\n          // We are done if the query does not need to be retried\n          reject(error)\n          return\n        }\n\n        failureCount++\n\n        // Notify on fail\n        config.onFail?.(failureCount, error)\n\n        // Delay\n        sleep(delay)\n          // Pause if the document is not visible or when the device is offline\n          .then(() => {\n            if (shouldPause()) {\n              return pause()\n            }\n          })\n          .then(() => {\n            if (isRetryCancelled) {\n              reject(error)\n            } else {\n              run()\n            }\n          })\n      })\n  }\n\n  // Start loop\n  if (canFetch(config.networkMode)) {\n    run()\n  } else {\n    pause().then(run)\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      continueFn?.()\n    },\n    cancelRetry,\n    continueRetry,\n  }\n}\n","export interface Logger {\n  log: LogFunction\n  warn: LogFunction\n  error: LogFunction\n}\n\ntype LogFunction = (...args: any[]) => void\n\nexport const defaultLogger: Logger = console\n","import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\nexport function createNotifyManager() {\n  let queue: NotifyCallback[] = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = callback => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n\n  const batch = <T>(callback: () => T): T => {\n    let result\n    transactions++\n    try {\n      result = callback()\n    } finally {\n      transactions--\n      if (!transactions) {\n        flush()\n      }\n    }\n    return result\n  }\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  const batchCalls = <T extends Function>(callback: T): T => {\n    return ((...args: any[]) => {\n      schedule(() => {\n        callback(...args)\n      })\n    }) as any\n  }\n\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  const setNotifyFunction = (fn: NotifyFunction) => {\n    notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  const setBatchNotifyFunction = (fn: BatchNotifyFunction) => {\n    batchNotifyFn = fn\n  }\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction,\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n","import { isServer, isValidTimeout } from './utils'\n\nexport abstract class Removable {\n  cacheTime!: number\n  private gcTimeout?: ReturnType<typeof setTimeout>\n\n  destroy(): void {\n    this.clearGcTimeout()\n  }\n\n  protected scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  protected updateCacheTime(newCacheTime: number | undefined): void {\n    // Default to 5 minutes (Infinity for server-side) if no cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      newCacheTime ?? (isServer ? Infinity : 5 * 60 * 1000)\n    )\n  }\n\n  protected clearGcTimeout() {\n    clearTimeout(this.gcTimeout!)\n    this.gcTimeout = undefined\n  }\n\n  protected abstract optionalRemove(): void\n}\n","import {\n  getAbortController,\n  noop,\n  replaceEqualDeep,\n  timeUntilStale,\n} from './utils'\nimport type {\n  InitialDataFunction,\n  QueryKey,\n  QueryOptions,\n  QueryStatus,\n  QueryFunctionContext,\n  QueryMeta,\n  CancelOptions,\n  SetDataOptions,\n  FetchStatus,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport { defaultLogger, Logger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Retryer, isCancelledError, canFetch, createRetryer } from './retryer'\nimport { Removable } from './removable'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  logger?: Logger\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchMeta: any\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal?: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>\n  ) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: QueryState<TData, TError>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  initialState: QueryState<TData, TError>\n  revertState?: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n  isFetchingOptimistic?: boolean\n\n  private cache: QueryCache\n  private logger: Logger\n  private promise?: Promise<TData>\n  private retryer?: Retryer<TData>\n  private observers: QueryObserver<any, any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  private abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.abortSignalConsumed = false\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.logger = config.logger || defaultLogger\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || getDefaultState(this.options)\n    this.state = this.initialState\n    this.meta = config.meta\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    this.meta = options?.meta\n\n    this.updateCacheTime(this.options.cacheTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.cache.remove(this)\n    }\n  }\n\n  setData(data: TData, options?: SetDataOptions & { manual: boolean }): TData {\n    const prevData = this.state.data\n\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (this.options.isDataEqual?.(prevData, data)) {\n      data = prevData as TData\n    } else if (this.options.structuralSharing !== false) {\n      // Structurally share data between prev and new data if needed\n      data = replaceEqualDeep(prevData, data)\n    }\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: QueryState<TData, TError>,\n    setStateOptions?: SetStateOptions\n  ): void {\n    this.dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(observer => observer.options.enabled !== false)\n  }\n\n  isDisabled(): boolean {\n    return this.getObserversCount() > 0 && !this.isActive()\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some(observer => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch({ cancelRefetch: false })\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch({ cancelRefetch: false })\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.abortSignalConsumed) {\n            this.retryer.cancel({ revert: true })\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.retryer?.continueRetry()\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (!Array.isArray(this.options.queryKey)) {\n      if (process.env.NODE_ENV !== 'production') {\n        this.logger.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`\n        )\n      }\n    }\n\n    const abortController = getAbortController()\n\n    // Create query function context\n    const queryFnContext: QueryFunctionContext<TQueryKey> = {\n      queryKey: this.queryKey,\n      pageParam: undefined,\n      meta: this.meta,\n    }\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          if (abortController) {\n            this.abortSignalConsumed = true\n            return abortController.signal\n          }\n          return undefined\n        },\n      })\n    }\n\n    addSignalProperty(queryFnContext)\n\n    // Create fetch function\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject('Missing queryFn')\n      }\n      this.abortSignalConsumed = false\n      return this.options.queryFn(queryFnContext)\n    }\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData, TQueryKey> = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn,\n      meta: this.meta,\n    }\n\n    addSignalProperty(context)\n\n    this.options.behavior?.onFetch(context)\n\n    // Store state in case the current fetch needs to be reverted\n    this.revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.cache.config.onError?.(error, this as Query<any, any, any, any>)\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n      }\n\n      if (!this.isFetchingOptimistic) {\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      }\n      this.isFetchingOptimistic = false\n    }\n\n    // Try to fetch the data\n    this.retryer = createRetryer({\n      fn: context.fetchFn as () => TData,\n      abort: abortController?.abort.bind(abortController),\n      onSuccess: data => {\n        if (typeof data === 'undefined') {\n          onError(new Error('Query data cannot be undefined') as any)\n          return\n        }\n\n        this.setData(data as TData)\n\n        // Notify cache callback\n        this.cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n\n        if (!this.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          this.scheduleGc()\n        }\n        this.isFetchingOptimistic = false\n      },\n      onError,\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n    })\n\n    this.promise = this.retryer.promise\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: state.fetchFailureCount + 1,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            fetchFailureCount: 0,\n            fetchMeta: action.meta ?? null,\n            fetchStatus: canFetch(this.options.networkMode)\n              ? 'fetching'\n              : 'paused',\n            ...(!state.dataUpdatedAt && {\n              error: null,\n              status: 'loading',\n            }),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n            }),\n          }\n        case 'error':\n          const error = action.error as unknown\n\n          if (isCancelledError(error) && error.revert && this.revertState) {\n            return { ...this.revertState }\n          }\n\n          return {\n            ...state,\n            error: error as TError,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasInitialData = typeof options.initialData !== 'undefined'\n\n  const initialDataUpdatedAt = hasInitialData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  const hasData = typeof data !== 'undefined'\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'loading',\n    fetchStatus: 'idle',\n  }\n}\n","import {\n  QueryFilters,\n  hashQueryKeyByOptions,\n  matchQuery,\n  parseFilterArgs,\n} from './utils'\nimport { Action, Query, QueryState } from './query'\nimport type { QueryKey, QueryOptions } from './types'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryAdded {\n  type: 'added'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved {\n  type: 'removed'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated {\n  type: 'updated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventQueryObserverAdded {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverRemoved {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverResultsUpdated {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ntype QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventQueryObserverAdded\n  | NotifyEventQueryObserverRemoved\n  | NotifyEventQueryObserverResultsUpdated\n\ntype QueryCacheListener = (event: QueryCacheNotifyEvent) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any, any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData, TQueryKey extends QueryKey>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    state?: QueryState<TData, TError>\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey!\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n        meta: options.meta,\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify({\n        type: 'added',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter(x => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify({ type: 'removed', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueyKey extends QueryKey = QueryKey\n  >(\n    queryHash: string\n  ): Query<TQueryFnData, TError, TData, TQueyKey> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.queries.find(query => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return Object.keys(filters).length > 0\n      ? this.queries.filter(query => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(event: QueryCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline()\n      })\n    })\n  }\n}\n","import type { MutationOptions, MutationStatus, MutationMeta } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport { defaultLogger, Logger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport { canFetch, Retryer, createRetryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  logger?: Logger\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n  meta?: MutationMeta\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n  meta: MutationMeta | undefined\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private mutationCache: MutationCache\n  private logger: Logger\n  private retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options,\n    }\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.logger = config.logger || defaultLogger\n    this.observers = []\n    this.state = config.state || getDefaultState()\n    this.meta = config.meta\n\n    this.updateCacheTime(this.options.cacheTime)\n    this.scheduleGc()\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter(x => x !== observer)\n\n    this.scheduleGc()\n\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc()\n      } else {\n        this.mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<TData> {\n    if (this.retryer) {\n      this.retryer.continue()\n      return this.retryer.promise\n    }\n    return this.execute()\n  }\n\n  async execute(): Promise<TData> {\n    const executeMutation = () => {\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found')\n          }\n          return this.options.mutationFn(this.state.variables!)\n        },\n        onFail: () => {\n          this.dispatch({ type: 'failed' })\n        },\n        onPause: () => {\n          this.dispatch({ type: 'pause' })\n        },\n        onContinue: () => {\n          this.dispatch({ type: 'continue' })\n        },\n        retry: this.options.retry ?? 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode,\n      })\n\n      return this.retryer.promise\n    }\n\n    const restored = this.state.status === 'loading'\n    try {\n      if (!restored) {\n        this.dispatch({ type: 'loading', variables: this.options.variables! })\n        // Notify cache callback\n        this.mutationCache.config.onMutate?.(\n          this.state.variables,\n          this as Mutation<unknown, unknown, unknown, unknown>\n        )\n        const context = await this.options.onMutate?.(this.state.variables!)\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables,\n          })\n        }\n      }\n      const data = await executeMutation()\n\n      // Notify cache callback\n      this.mutationCache.config.onSuccess?.(\n        data,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>\n      )\n\n      await this.options.onSuccess?.(\n        data,\n        this.state.variables!,\n        this.state.context!\n      )\n\n      await this.options.onSettled?.(\n        data,\n        null,\n        this.state.variables!,\n        this.state.context\n      )\n\n      this.dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        this.mutationCache.config.onError?.(\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>\n        )\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n\n        await this.options.onError?.(\n          error as TError,\n          this.state.variables!,\n          this.state.context\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          this.state.variables!,\n          this.state.context\n        )\n        throw error\n      } finally {\n        this.dispatch({ type: 'error', error: error as TError })\n      }\n    }\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: state.failureCount + 1,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'loading':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            isPaused: false,\n            status: 'error',\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n","import { MutationObserver } from './mutationObserver'\nimport type { MutationOptions } from './types'\nimport type { QueryClient } from './queryClient'\nimport { notifyManager } from './notifyManager'\nimport { Action, Mutation, MutationState } from './mutation'\nimport { matchMutation, MutationFilters, noop } from './utils'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>\n  ) => void\n  onSuccess?: (\n    data: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>\n  ) => void\n  onMutate?: (\n    variables: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>\n  ) => void\n}\n\ninterface NotifyEventMutationAdded {\n  type: 'added'\n  mutation: Mutation<any, any, any, any>\n}\ninterface NotifyEventMutationRemoved {\n  type: 'removed'\n  mutation: Mutation<any, any, any, any>\n}\n\ninterface NotifyEventMutationObserverAdded {\n  type: 'observerAdded'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverRemoved {\n  type: 'observerRemoved'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationUpdated {\n  type: 'updated'\n  mutation: Mutation<any, any, any, any>\n  action: Action<any, any, any, any>\n}\n\ntype MutationCacheNotifyEvent =\n  | NotifyEventMutationAdded\n  | NotifyEventMutationRemoved\n  | NotifyEventMutationObserverAdded\n  | NotifyEventMutationObserverRemoved\n  | NotifyEventMutationUpdated\n\ntype MutationCacheListener = (event: MutationCacheNotifyEvent) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  config: MutationCacheConfig\n\n  private mutations: Mutation<any, any, any, any>[]\n  private mutationId: number\n\n  constructor(config?: MutationCacheConfig) {\n    super()\n    this.config = config || {}\n    this.mutations = []\n    this.mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      logger: client.getLogger(),\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey\n        ? client.getMutationDefaults(options.mutationKey)\n        : undefined,\n      meta: options.meta,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.mutations.push(mutation)\n    this.notify({ type: 'added', mutation })\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.mutations = this.mutations.filter(x => x !== mutation)\n    this.notify({ type: 'removed', mutation })\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.mutations.forEach(mutation => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Mutation[] {\n    return this.mutations\n  }\n\n  find<TData = unknown, TError = unknown, TVariables = any, TContext = unknown>(\n    filters: MutationFilters\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.mutations.find(mutation => matchMutation(filters, mutation))\n  }\n\n  findAll(filters: MutationFilters): Mutation[] {\n    return this.mutations.filter(mutation => matchMutation(filters, mutation))\n  }\n\n  notify(event: MutationCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event)\n      })\n    })\n  }\n\n  resumePausedMutations(): Promise<void> {\n    const pausedMutations = this.mutations.filter(x => x.state.isPaused)\n    return notifyManager.batch(() =>\n      pausedMutations.reduce(\n        (promise, mutation) =>\n          promise.then(() => mutation.continue().catch(noop)),\n        Promise.resolve()\n      )\n    )\n  }\n}\n","import type { QueryBehavior } from './query'\n\nimport type {\n  InfiniteData,\n  QueryFunctionContext,\n  QueryOptions,\n  RefetchQueryFilters,\n} from './types'\nimport { getAbortController } from './utils'\n\nexport function infiniteQueryBehavior<\n  TQueryFnData,\n  TError,\n  TData\n>(): QueryBehavior<TQueryFnData, TError, InfiniteData<TData>> {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        const refetchPage: RefetchQueryFilters['refetchPage'] | undefined =\n          context.fetchOptions?.meta?.refetchPage\n        const fetchMore = context.fetchOptions?.meta?.fetchMore\n        const pageParam = fetchMore?.pageParam\n        const isFetchingNextPage = fetchMore?.direction === 'forward'\n        const isFetchingPreviousPage = fetchMore?.direction === 'backward'\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        const abortController = getAbortController()\n        const abortSignal = abortController?.signal\n        let newPageParams = oldPageParams\n        let cancelled = false\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn || (() => Promise.reject('Missing queryFn'))\n\n        const buildNewPages = (\n          pages: unknown[],\n          param: unknown,\n          page: unknown,\n          previous?: boolean\n        ) => {\n          newPageParams = previous\n            ? [param, ...newPageParams]\n            : [...newPageParams, param]\n          return previous ? [page, ...pages] : [...pages, page]\n        }\n\n        // Create function to fetch a page\n        const fetchPage = (\n          pages: unknown[],\n          manual?: boolean,\n          param?: unknown,\n          previous?: boolean\n        ): Promise<unknown[]> => {\n          if (cancelled) {\n            return Promise.reject('Cancelled')\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages)\n          }\n\n          const queryFnContext: QueryFunctionContext = {\n            queryKey: context.queryKey,\n            signal: abortSignal,\n            pageParam: param,\n            meta: context.meta,\n          }\n\n          const queryFnResult = queryFn(queryFnContext)\n\n          const promise = Promise.resolve(queryFnResult).then(page =>\n            buildNewPages(pages, param, page, previous)\n          )\n\n          return promise\n        }\n\n        let promise: Promise<unknown[]>\n\n        // Fetch first page?\n        if (!oldPages.length) {\n          promise = fetchPage([])\n        }\n\n        // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getNextPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param)\n        }\n\n        // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getPreviousPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param, true)\n        }\n\n        // Refetch pages\n        else {\n          newPageParams = []\n\n          const manual = typeof context.options.getNextPageParam === 'undefined'\n\n          const shouldFetchFirstPage =\n            refetchPage && oldPages[0]\n              ? refetchPage(oldPages[0], 0, oldPages)\n              : true\n\n          // Fetch first page\n          promise = shouldFetchFirstPage\n            ? fetchPage([], manual, oldPageParams[0])\n            : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0]))\n\n          // Fetch remaining pages\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const shouldFetchNextPage =\n                refetchPage && oldPages[i]\n                  ? refetchPage(oldPages[i], i, oldPages)\n                  : true\n\n              if (shouldFetchNextPage) {\n                const param = manual\n                  ? oldPageParams[i]\n                  : getNextPageParam(context.options, pages)\n                return fetchPage(pages, manual, param)\n              }\n              return Promise.resolve(\n                buildNewPages(pages, oldPageParams[i], oldPages[i])\n              )\n            })\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams,\n        }))\n\n        context.signal?.addEventListener('abort', () => {\n          cancelled = true\n          abortController?.abort()\n        })\n\n        return finalPromise\n      }\n    },\n  }\n}\n\nexport function getNextPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getNextPageParam?.(pages[pages.length - 1], pages)\n}\n\nexport function getPreviousPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getPreviousPageParam?.(pages[0], pages)\n}\n\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasNextPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages)\n    return (\n      typeof nextPageParam !== 'undefined' &&\n      nextPageParam !== null &&\n      nextPageParam !== false\n    )\n  }\n}\n\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasPreviousPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages)\n    return (\n      typeof previousPageParam !== 'undefined' &&\n      previousPageParam !== null &&\n      previousPageParam !== false\n    )\n  }\n}\n","import { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private previousSelectError: TError | null\n  private previousSelect?: {\n    fn: (data: TQueryData) => TData\n    result: TData\n  }\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.previousSelectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus\n    )\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    return this.createResult(query, options)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    clearTimeout(this.staleTimeoutId!)\n    this.staleTimeoutId = undefined\n  }\n\n  private clearRefetchInterval(): void {\n    clearInterval(this.refetchIntervalId!)\n    this.refetchIntervalId = undefined\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdateCount &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.previousSelect?.fn &&\n        !this.previousSelectError\n      ) {\n        data = this.previousSelect.result\n      } else {\n        try {\n          data = options.select(state.data)\n          if (options.structuralSharing !== false) {\n            data = replaceEqualDeep(prevResult?.data, data)\n          }\n          this.previousSelect = {\n            fn: options.select,\n            result: data,\n          }\n          this.previousSelectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          error = selectError as TError\n          this.previousSelectError = selectError as TError\n          errorUpdatedAt = Date.now()\n          status = 'error'\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = (state.data as unknown) as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            if (options.structuralSharing !== false) {\n              placeholderData = replaceEqualDeep(\n                prevResult?.data,\n                placeholderData\n              )\n            }\n            this.previousSelectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            error = selectError as TError\n            this.previousSelectError = selectError as TError\n            errorUpdatedAt = Date.now()\n            status = 'error'\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = placeholderData as TData\n        isPlaceholderData = true\n      }\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching: isFetching,\n      isRefetching: isFetching && status !== 'loading',\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n\n      if (\n        notifyOnChangeProps === 'all' ||\n        (!notifyOnChangeProps && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(notifyOnChangeProps ?? this.trackedProps)\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some(key => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect']\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n","import type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type {\n  MutationKey,\n  MutationOptions,\n  QueryKey,\n  QueryOptions,\n} from './types'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\n\nexport interface DehydrateOptions {\n  dehydrateMutations?: boolean\n  dehydrateQueries?: boolean\n  shouldDehydrateMutation?: ShouldDehydrateMutationFunction\n  shouldDehydrateQuery?: ShouldDehydrateQueryFunction\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    queries?: QueryOptions\n    mutations?: MutationOptions\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n}\n\nexport interface DehydratedState {\n  mutations: DehydratedMutation[]\n  queries: DehydratedQuery[]\n}\n\nexport type ShouldDehydrateQueryFunction = (query: Query) => boolean\n\nexport type ShouldDehydrateMutationFunction = (mutation: Mutation) => boolean\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query): DehydratedQuery {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n  }\n}\n\nfunction defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nfunction defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {}\n): DehydratedState {\n  const mutations: DehydratedMutation[] = []\n  const queries: DehydratedQuery[] = []\n\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation =\n      options.shouldDehydrateMutation || defaultShouldDehydrateMutation\n\n    client\n      .getMutationCache()\n      .getAll()\n      .forEach(mutation => {\n        if (shouldDehydrateMutation(mutation)) {\n          mutations.push(dehydrateMutation(mutation))\n        }\n      })\n  }\n\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery =\n      options.shouldDehydrateQuery || defaultShouldDehydrateQuery\n\n    client\n      .getQueryCache()\n      .getAll()\n      .forEach(query => {\n        if (shouldDehydrateQuery(query)) {\n          queries.push(dehydrateQuery(query))\n        }\n      })\n  }\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach(dehydratedMutation => {\n    mutationCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.mutations,\n        mutationKey: dehydratedMutation.mutationKey,\n      },\n      dehydratedMutation.state\n    )\n  })\n\n  queries.forEach(dehydratedQuery => {\n    const query = queryCache.get(dehydratedQuery.queryHash)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state)\n      }\n      return\n    }\n\n    // Restore query\n    queryCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.queries,\n        queryKey: dehydratedQuery.queryKey,\n        queryHash: dehydratedQuery.queryHash,\n      },\n      dehydratedQuery.state\n    )\n  })\n}\n","import type {\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport {\n  NotifyOptions,\n  ObserverFetchOptions,\n  QueryObserver,\n} from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions: ObserverFetchOptions\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >,\n    notifyOptions?: NotifyOptions\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage({ pageParam, ...options }: FetchNextPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage({\n    pageParam,\n    ...options\n  }: FetchPreviousPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, InfiniteData<TQueryData>>,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(options, state.data?.pages),\n      isFetchingNextPage:\n        state.fetchStatus === 'fetching' &&\n        state.fetchMeta?.fetchMore?.direction === 'forward',\n      isFetchingPreviousPage:\n        state.fetchStatus === 'fetching' &&\n        state.fetchMeta?.fetchMore?.direction === 'backward',\n    }\n  }\n}\n","import { Action, getDefaultState, Mutation } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    this.options = this.client.defaultMutationOptions(options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  QueryObserverOptions,\n  QueryObserverResult,\n  DefaultedQueryObserverOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport { NotifyOptions, QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach(observer => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions\n  ): void {\n    this.queries = queries\n\n    notifyManager.batch(() => {\n      const prevObservers = this.observers\n\n      const newObserverMatches = this.findMatchingObservers(this.queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach(match =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions)\n      )\n\n      const newObservers = newObserverMatches.map(match => match.observer)\n      const newObserversMap = Object.fromEntries(\n        newObservers.map(observer => [observer.options.queryHash, observer])\n      )\n      const newResult = newObservers.map(observer =>\n        observer.getCurrentResult()\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index]\n      )\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return this.findMatchingObservers(queries).map(match =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions)\n    )\n  }\n\n  private findMatchingObservers(\n    queries: QueryObserverOptions[]\n  ): QueryObserverMatch[] {\n    const prevObservers = this.observers\n    const defaultedQueryOptions = queries.map(options =>\n      this.client.defaultQueryOptions(options)\n    )\n\n    const matchingObservers: QueryObserverMatch[] = defaultedQueryOptions.flatMap(\n      defaultedOptions => {\n        const match = prevObservers.find(\n          observer => observer.options.queryHash === defaultedOptions.queryHash\n        )\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      }\n    )\n\n    const matchedQueryHashes = matchingObservers.map(\n      match => match.defaultedQueryOptions.queryHash\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      defaultedOptions =>\n        !matchedQueryHashes.includes(defaultedOptions.queryHash)\n    )\n\n    const unmatchedObservers = prevObservers.filter(\n      prevObserver =>\n        !matchingObservers.some(match => match.observer === prevObserver)\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.client.defaultQueryOptions(options)\n      const currentObserver = this.observersMap[defaultedOptions.queryHash!]\n      return currentObserver ?? new QueryObserver(this.client, defaultedOptions)\n    }\n\n    const newOrReusedObservers: QueryObserverMatch[] = unmatchedQueries.map(\n      (options, index) => {\n        if (options.keepPreviousData) {\n          // return previous data from one of the observers that no longer match\n          const previouslyUsedObserver = unmatchedObservers[index]\n          if (previouslyUsedObserver !== undefined) {\n            return {\n              defaultedQueryOptions: options,\n              observer: previouslyUsedObserver,\n            }\n          }\n        }\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      }\n    )\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n","import {\n  QueryFilters,\n  Updater,\n  hashQueryKey,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n  hashQueryKeyByOptions,\n  MutationFilters,\n  functionalUpdate,\n} from './utils'\nimport type {\n  QueryClientConfig,\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  ResetQueryFilters,\n  SetDataOptions,\n} from './types'\nimport type { QueryState } from './query'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport { CancelOptions, DefaultedQueryObserverOptions } from './types'\nimport { defaultLogger, Logger } from './logger'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private logger: Logger\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.logger = config.logger || defaultLogger\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n  }\n\n  mount(): void {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.unsubscribeFocus?.()\n    this.unsubscribeOnline?.()\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKey, filters?: QueryFilters): number\n  isFetching(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetchStatus = 'fetching'\n    return this.queryCache.findAll(filters).length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.mutationCache.findAll({ ...filters, fetching: true }).length\n  }\n\n  getQueryData<TData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): TData | undefined {\n    return this.queryCache.find<TData>(queryKey, filters)?.state.data\n  }\n\n  getQueriesData<TData = unknown>(queryKey: QueryKey): [QueryKey, TData][]\n  getQueriesData<TData = unknown>(filters: QueryFilters): [QueryKey, TData][]\n  getQueriesData<TData = unknown>(\n    queryKeyOrFilters: QueryKey | QueryFilters\n  ): [QueryKey, TData][] {\n    return this.getQueryCache()\n      .findAll(queryKeyOrFilters)\n      .map(({ queryKey, state }) => {\n        const data = state.data as TData\n        return [queryKey, data]\n      })\n  }\n\n  setQueryData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: SetDataOptions\n  ): TData | undefined {\n    const query = this.queryCache.find<TData>(queryKey)\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (typeof data === 'undefined') {\n      return undefined\n    }\n\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): [QueryKey, TData][]\n\n  setQueriesData<TData>(\n    filters: QueryFilters,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): [QueryKey, TData][]\n\n  setQueriesData<TData>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): [QueryKey, TData | undefined][] {\n    return notifyManager.batch(() =>\n      this.getQueryCache()\n        .findAll(queryKeyOrFilters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TData>(queryKey, updater, options),\n        ])\n    )\n  }\n\n  getQueryState<TData = unknown, TError = undefined>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): QueryState<TData, TError> | undefined {\n    return this.queryCache.find<TData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKey, filters?: QueryFilters): void\n  removeQueries(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries<TPageData = unknown>(\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKey | ResetQueryFilters,\n    arg2?: ResetQueryFilters | ResetOptions,\n    arg3?: ResetOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      type: 'active',\n      ...filters,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: CancelOptions\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions))\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries<TPageData = unknown>(\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKey | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    return notifyManager.batch(() => {\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate()\n      })\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      const refetchFilters: RefetchQueryFilters = {\n        ...filters,\n        type: filters.refetchType ?? filters.type ?? 'active',\n      }\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries<TPageData = unknown>(\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKey | RefetchQueryFilters,\n    arg2?: RefetchQueryFilters | RefetchOptions,\n    arg3?: RefetchOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache\n        .findAll(filters)\n        .filter(query => !query.isDisabled())\n        .map(query =>\n          query.fetch(undefined, {\n            ...options,\n            cancelRefetch: options?.cancelRefetch ?? true,\n            meta: { refetchPage: filters.refetchPage },\n          })\n        )\n    )\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  resumePausedMutations(): Promise<void> {\n    return this.mutationCache.resumePausedMutations()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getLogger(): Logger {\n    return this.logger\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<unknown, any, any, any>\n  ): void {\n    const result = this.queryDefaults.find(\n      x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey\n  ): QueryObserverOptions<any, any, any, any, any> | undefined {\n    if (!queryKey) {\n      return undefined\n    }\n\n    // Get the first matching defaults\n    const firstMatchingDefaults = this.queryDefaults.find(x =>\n      partialMatchKey(queryKey, x.queryKey)\n    )\n\n    // Additional checks and error in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter(x =>\n        partialMatchKey(queryKey, x.queryKey)\n      )\n      // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n      if (matchingDefaults.length > 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(\n            `[QueryClient] Several query defaults match with key '${JSON.stringify(\n              queryKey\n            )}'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.`\n          )\n        }\n      }\n    }\n\n    return firstMatchingDefaults?.defaultOptions\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.mutationDefaults.find(\n      x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    if (!mutationKey) {\n      return undefined\n    }\n\n    // Get the first matching defaults\n    const firstMatchingDefaults = this.mutationDefaults.find(x =>\n      partialMatchKey(mutationKey, x.mutationKey)\n    )\n\n    // Additional checks and error in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter(x =>\n        partialMatchKey(mutationKey, x.mutationKey)\n      )\n      // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n      if (matchingDefaults.length > 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(\n            `[QueryClient] Several mutation defaults match with key '${JSON.stringify(\n              mutationKey\n            )}'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.`\n          )\n        }\n      }\n    }\n\n    return firstMatchingDefaults?.defaultOptions\n  }\n\n  defaultQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey\n  >(\n    options?:\n      | QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options?._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions\n      )\n    }\n\n    // dependent default values\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n"],"names":["Subscribable","constructor","listeners","subscribe","this","bind","listener","push","onSubscribe","filter","x","onUnsubscribe","hasListeners","length","isServer","window","noop","isValidTimeout","value","Infinity","difference","array1","array2","indexOf","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseFilterArgs","matchQuery","filters","query","type","exact","fetchStatus","predicate","stale","queryHash","hashQueryKeyByOptions","options","partialMatchKey","isActive","isStale","state","matchMutation","mutation","fetching","mutationKey","hashQueryKey","status","hashFn","queryKeyHashFn","JSON","stringify","_","val","isPlainObject","Object","keys","sort","reduce","result","key","a","b","partialDeepEqual","some","replaceEqualDeep","array","Array","isArray","aSize","bItems","bSize","copy","equalItems","i","o","hasObjectPrototype","ctor","prot","prototype","hasOwnProperty","toString","call","sleep","timeout","Promise","resolve","setTimeout","scheduleMicrotask","callback","then","getAbortController","AbortController","focusManager","super","setup","onFocus","addEventListener","removeEventListener","cleanup","setEventListener","_this$cleanup","undefined","_this$cleanup2","focused","setFocused","forEach","isFocused","document","includes","visibilityState","onlineManager","onOnline","online","setOnline","isOnline","navigator","onLine","defaultRetryDelay","failureCount","min","canFetch","networkMode","CancelledError","revert","silent","isCancelledError","createRetryer","config","isRetryCancelled","continueFn","promiseResolve","promiseReject","isResolved","promise","outerResolve","outerReject","shouldPause","onSuccess","reject","onError","pause","continueResolve","onPause","onContinue","run","promiseOrValue","fn","error","catch","_config$retry","_config$retryDelay","retry","retryDelay","delay","shouldRetry","onFail","cancel","cancelOptions","abort","continue","cancelRetry","continueRetry","defaultLogger","console","notifyManager","queue","transactions","notifyFn","batchNotifyFn","batch","schedule","flush","originalQueue","batchCalls","args","setNotifyFunction","setBatchNotifyFunction","createNotifyManager","Removable","destroy","clearGcTimeout","scheduleGc","cacheTime","gcTimeout","optionalRemove","updateCacheTime","newCacheTime","clearTimeout","Query","abortSignalConsumed","defaultOptions","setOptions","observers","cache","logger","initialState","data","initialData","initialDataUpdatedAt","hasData","dataUpdateCount","dataUpdatedAt","errorUpdateCount","errorUpdatedAt","fetchFailureCount","fetchMeta","isInvalidated","getDefaultState","meta","remove","setData","_this$options$isDataE","_this$options","prevData","isDataEqual","structuralSharing","dispatch","manual","setState","setStateOptions","_this$retryer","retryer","reset","observer","enabled","isDisabled","getObserversCount","getCurrentResult","isStaleByTime","_this$retryer2","find","shouldFetchOnWindowFocus","refetch","cancelRefetch","_this$retryer3","shouldFetchOnReconnect","addObserver","notify","removeObserver","invalidate","fetch","fetchOptions","_this$options$behavio","_context$fetchOptions","_this$retryer4","abortController","queryFnContext","pageParam","addSignalProperty","object","defineProperty","enumerable","get","signal","fetchFn","context","_context$fetchOptions2","behavior","onFetch","revertState","_this$cache$config$on","_this$cache$config","isFetchingOptimistic","_this$cache$config$on2","_this$cache$config2","Error","action","_action$meta","_action$dataUpdatedAt","reducer","onQueryUpdate","QueryCache","queries","queriesMap","build","client","_options$queryHash","getLogger","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","event","Mutation","mutationId","mutationCache","execute","async","executeMutation","_this$options$retry","mutationFn","variables","restored","_this$mutationCache$c3","_this$mutationCache$c4","_this$options$onSucce","_this$options2","_this$options$onSettl","_this$options3","_this$mutationCache$c","_this$mutationCache$c2","_this$options$onMutat","onMutate","onSettled","_this$mutationCache$c5","_this$mutationCache$c6","_this$options$onError","_this$options4","_this$options$onSettl2","_this$options5","isPaused","onMutationUpdate","MutationCache","mutations","defaultMutationOptions","getMutationDefaults","resumePausedMutations","pausedMutations","infiniteQueryBehavior","_context$fetchOptions3","_context$fetchOptions4","_context$state$data","_context$state$data2","_context$signal","refetchPage","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","abortSignal","newPageParams","cancelled","buildNewPages","param","page","previous","fetchPage","queryFnResult","getNextPageParam","getPreviousPageParam","finalPromise","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryObserver","trackedProps","Set","previousSelectError","bindMethods","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","shouldFetchOn","refetchOnReconnect","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","notifyOptions","prevOptions","prevQuery","updateQuery","mounted","shouldFetchOptionally","updateResult","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","getQueryCache","createResult","currentResult","trackResult","trackedResult","configurable","getCurrentQuery","fetchOptimistic","defaultedOptions","_fetchOptions$cancelR","throwOnError","staleTimeoutId","_this$options$refetch","refetchInterval","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","isSuccess","select","_this$previousSelect","previousSelect","selectError","placeholderData","isFetching","isLoading","isError","isFetched","isFetchedAfterMount","isRefetching","isLoadingError","isRefetchError","nextResult","shallowEqualObjects","defaultNotifyOptions","notifyOnChangeProps","size","includedProps","useErrorBoundary","typedKey","has","shouldNotifyListeners","shouldLoadOnMount","retryOnMount","refetchOnMount","field","suspense","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","fetchNextPage","fetchPreviousPage","_state$data","_state$data2","_state$fetchMeta","_state$fetchMeta$fetc","_state$fetchMeta2","_state$fetchMeta2$fet","mutate","_this$currentMutation","currentMutation","mutateOptions","getMutationCache","isIdle","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","observersMap","setQueries","onUpdate","prevObservers","newObserverMatches","findMatchingObservers","match","defaultedQueryOptions","newObservers","map","newObserversMap","fromEntries","newResult","hasIndexChange","index","matchingObservers","flatMap","matchedQueryHashes","unmatchedQueries","unmatchedObservers","prevObserver","getObserver","currentObserver","newOrReusedObservers","previouslyUsedObserver","concat","slice","replaceAt","queryCache","queryDefaults","mutationDefaults","mount","unsubscribeFocus","unsubscribeOnline","unmount","_this$unsubscribeFocu","_this$unsubscribeOnli","isMutating","getQueryData","_this$queryCache$find","getQueriesData","queryKeyOrFilters","setQueryData","updater","input","functionalUpdate","parsedOptions","setQueriesData","getQueryState","_this$queryCache$find2","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","all","invalidateQueries","_ref","_filters$refetchType","refetchType","_options$cancelRefetc","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","getDefaultOptions","setDefaultOptions","setQueryDefaults","firstMatchingDefaults","setMutationDefaults","_defaulted","dehydrateMutations","shouldDehydrateMutation","dehydrateMutation","dehydrateQueries","shouldDehydrateQuery","dehydrateQuery","dehydratedState","dehydratedMutation","_options$defaultOptio","dehydratedQuery","_options$defaultOptio2"],"mappings":"sPAEO,MAAMA,EAGXC,cACOC,KAAAA,UAAY,GACZC,KAAAA,UAAYC,KAAKD,UAAUE,KAAKD,MAGvCD,UAAUG,GAKR,OAJAF,KAAKF,UAAUK,KAAKD,GAEpBF,KAAKI,cAEE,KACLJ,KAAKF,UAAYE,KAAKF,UAAUO,QAAOC,GAAKA,IAAMJ,IAClDF,KAAKO,iBAITC,eACE,OAAOR,KAAKF,UAAUW,OAAS,EAGvBL,eAIAG,kBCyCL,MAAMG,EAA6B,oBAAXC,OAExB,SAASC,KAaT,SAASC,EAAeC,GACtB,MAAiB,iBAAVA,GAAsBA,GAAS,GAAKA,IAAUC,EAAAA,EAGvD,SAASC,EAAcC,EAAaC,GACzC,OAAOD,EAAOZ,QAAOC,IAA4B,IAAvBY,EAAOC,QAAQb,KASpC,SAASc,EAAeC,EAAmBC,GAChD,OAAOC,KAAKC,IAAIH,GAAaC,GAAa,GAAKG,KAAKC,MAAO,GAGtD,SAASC,EAIdC,EACAC,EACAC,GAEA,OAAKC,EAAWH,GAII,mBAATC,EACF,IAAKC,EAAME,SAAUJ,EAAMK,QAASJ,GAGtC,IAAKA,EAAMG,SAAUJ,GAPnBA,EA+BJ,SAASM,EAIdN,EACAC,EACAC,GAEQC,OAAAA,EAAWH,GACf,CAAC,IAAKC,EAAMG,SAAUJ,GAAQE,GAC9B,CAACF,GAAQ,GAAIC,GAgBZ,SAASM,EACdC,EACAC,GAEM,MAAAC,KACJA,EAAO,MADHC,MAEJA,EAFIC,YAGJA,EAHIC,UAIJA,EAJIT,SAKJA,EALIU,MAMJA,GACEN,EAEJ,GAAIL,EAAWC,GACb,GAAIO,GACF,GAAIF,EAAMM,YAAcC,EAAsBZ,EAAUK,EAAMQ,SAC5D,OAAO,OAEJ,IAAKC,EAAgBT,EAAML,SAAUA,GAC1C,OAAO,EAIPM,GAAS,QAATA,EAAgB,CAClB,MAAMS,EAAWV,EAAMU,WACvB,GAAa,WAATT,IAAsBS,EACxB,OAAO,EAET,GAAa,aAATT,GAAuBS,EACzB,OAAO,EAIP,OAAiB,kBAAVL,GAAuBL,EAAMW,YAAcN,WAK7B,IAAhBF,GACPA,IAAgBH,EAAMY,MAAMT,gBAK1BC,IAAcA,EAAUJ,KAOvB,SAASa,EACdd,EACAe,GAEM,MAAAZ,MAAEA,EAAFa,SAASA,EAATX,UAAmBA,EAAnBY,YAA8BA,GAAgBjB,EACpD,GAAIL,EAAWsB,GAAc,CAC3B,IAAKF,EAASN,QAAQQ,YACpB,OAAO,EAET,GAAId,GACF,GACEe,EAAaH,EAASN,QAAQQ,eAAiBC,EAAaD,GAE5D,OAAO,OAEJ,IAAKP,EAAgBK,EAASN,QAAQQ,YAAaA,GACxD,OAAO,EAIX,OACsB,kBAAbD,GACoB,YAA1BD,EAASF,MAAMM,SAA0BH,MAKxCX,IAAcA,EAAUU,IAOvB,SAASP,EACdZ,EACAa,GAGOW,QADe,MAAPX,SAAAA,EAASY,iBAAkBH,GAC5BtB,GAOT,SAASsB,EAAatB,GAC3B,OAAO0B,KAAKC,UAAU3B,GAAU,CAAC4B,EAAGC,IAClCC,EAAcD,GACVE,OAAOC,KAAKH,GACTI,OACAC,QAAO,CAACC,EAAQC,KACfD,EAAOC,GAAOP,EAAIO,GACXD,IACN,IACLN,IAOD,SAASf,EAAgBuB,EAAaC,GAC3C,OAAOC,EAAiBF,EAAGC,GAMtB,SAASC,EAAiBF,EAAQC,GACnCD,OAAAA,IAAMC,UAICD,UAAaC,OAIpBD,IAAKC,GAAkB,iBAAND,GAA+B,iBAANC,KACpCP,OAAOC,KAAKM,GAAGE,MAAKJ,IAAQG,EAAiBF,EAAED,GAAME,EAAEF,OAY5D,SAASK,EAAiBJ,EAAQC,GACnCD,GAAAA,IAAMC,EACR,OAAOD,EAGT,MAAMK,EAAQC,MAAMC,QAAQP,IAAMM,MAAMC,QAAQN,GAE5CI,GAAAA,GAAUZ,EAAcO,IAAMP,EAAcQ,GAAK,CACnD,MAAMO,EAAQH,EAAQL,EAAE5D,OAASsD,OAAOC,KAAKK,GAAG5D,OAC1CqE,EAASJ,EAAQJ,EAAIP,OAAOC,KAAKM,GACjCS,EAAQD,EAAOrE,OACfuE,EAAYN,EAAQ,GAAK,GAE3BO,IAAAA,EAAa,EAEZ,IAAA,IAAIC,EAAI,EAAGA,EAAIH,EAAOG,IAAK,CACxBd,MAAAA,EAAMM,EAAQQ,EAAIJ,EAAOI,GAC/BF,EAAKZ,GAAOK,EAAiBJ,EAAED,GAAME,EAAEF,IACnCY,EAAKZ,KAASC,EAAED,IAClBa,IAIGJ,OAAAA,IAAUE,GAASE,IAAeJ,EAAQR,EAAIW,EAGvD,OAAOV,EAqBF,SAASR,EAAcqB,GAC5B,IAAKC,EAAmBD,GACtB,OAAO,EAIT,MAAME,EAAOF,EAAEtF,YACf,QAAoB,IAATwF,EACT,OAAO,EAIT,MAAMC,EAAOD,EAAKE,UAClB,QAAKH,EAAmBE,MAKnBA,EAAKE,eAAe,iBAQ3B,SAASJ,EAAmBD,GACnBpB,MAAsC,oBAAtCA,OAAOwB,UAAUE,SAASC,KAAKP,GAGjC,SAASpD,EAAWjB,GACzB,OAAO6D,MAAMC,QAAQ9D,GAOhB,SAAS6E,EAAMC,GACpB,OAAO,IAAIC,SAAQC,IACjBC,WAAWD,EAASF,MAQjB,SAASI,EAAkBC,GAChCN,EAAM,GAAGO,KAAKD,GAGT,SAASE,IACd,GAA+B,mBAApBC,gBACF,OAAA,IAAIA,gBCpUFC,MAAAA,EAAe,IAjFrB,cAA2BzG,EAMhCC,cACEyG,QACKC,KAAAA,MAAQC,IAGX,IAAK9F,GAAYC,OAAO8F,iBAAkB,CACxC,MAAMvG,EAAW,IAAMsG,IAKvB,OAHA7F,OAAO8F,iBAAiB,mBAAoBvG,GAAU,GACtDS,OAAO8F,iBAAiB,QAASvG,GAAU,GAEpC,KAELS,OAAO+F,oBAAoB,mBAAoBxG,GAC/CS,OAAO+F,oBAAoB,QAASxG,MAMlCE,cACHJ,KAAK2G,SACHC,KAAAA,iBAAiB5G,KAAKuG,OAIrBhG,gBACkB,IAAAsG,EAArB7G,KAAKQ,iBACR,OAAAqG,EAAA7G,KAAK2G,UAALE,EAAAnB,KAAA1F,MACK2G,KAAAA,aAAUG,GAInBF,iBAAiBL,GAAsB,IAAAQ,EAChCR,KAAAA,MAAQA,EACb,OAAAQ,EAAA/G,KAAK2G,UAALI,EAAArB,KAAA1F,MACAA,KAAK2G,QAAUJ,GAAMS,IACI,kBAAZA,EACJC,KAAAA,WAAWD,GAEhBhH,KAAKwG,aAKXS,WAAWD,GACJA,KAAAA,QAAUA,EAEXA,GACFhH,KAAKwG,UAITA,UACExG,KAAKF,UAAUoH,SAAQhH,IACrBA,OAIJiH,YACE,MAA4B,kBAAjBnH,KAAKgH,QACPhH,KAAKgH,QAIU,oBAAbI,UAIJ,MAACN,EAAW,UAAW,aAAaO,SACzCD,SAASE,mBCKFC,MAAAA,EAAgB,IAjFtB,cAA4B3H,EAMjCC,cACEyG,QACKC,KAAAA,MAAQiB,IAGX,IAAK9G,GAAYC,OAAO8F,iBAAkB,CACxC,MAAMvG,EAAW,IAAMsH,IAKvB,OAHA7G,OAAO8F,iBAAiB,SAAUvG,GAAU,GAC5CS,OAAO8F,iBAAiB,UAAWvG,GAAU,GAEtC,KAELS,OAAO+F,oBAAoB,SAAUxG,GACrCS,OAAO+F,oBAAoB,UAAWxG,MAMpCE,cACHJ,KAAK2G,SACHC,KAAAA,iBAAiB5G,KAAKuG,OAIrBhG,gBACkB,IAAAsG,EAArB7G,KAAKQ,iBACR,OAAAqG,EAAA7G,KAAK2G,UAALE,EAAAnB,KAAA1F,MACK2G,KAAAA,aAAUG,GAInBF,iBAAiBL,GAAsB,IAAAQ,EAChCR,KAAAA,MAAQA,EACb,OAAAQ,EAAA/G,KAAK2G,UAALI,EAAArB,KAAA1F,MACAA,KAAK2G,QAAUJ,GAAOkB,IACE,kBAAXA,EACJC,KAAAA,UAAUD,GAEfzH,KAAKwH,cAKXE,UAAUD,GACHA,KAAAA,OAASA,EAEVA,GACFzH,KAAKwH,WAITA,WACExH,KAAKF,UAAUoH,SAAQhH,IACrBA,OAIJyH,WACE,MAA2B,kBAAhB3H,KAAKyH,OACPzH,KAAKyH,OAIS,oBAAdG,gBACqB,IAArBA,UAAUC,QAKZD,UAAUC,SC1CrB,SAASC,EAAkBC,GAClBxG,OAAAA,KAAKyG,IAAI,IAAO,GAAKD,EAAc,KAGrC,SAASE,EAASC,GACvB,MAAqC,YAA7BA,MAAAA,EAAAA,EAAe,WACnBX,EAAcI,WAIb,MAAMQ,EAGXtI,YAAYgD,GACV7C,KAAKoI,OAASvF,MAAAA,OAAAA,EAAAA,EAASuF,OACvBpI,KAAKqI,OAASxF,MAAAA,OAAAA,EAAAA,EAASwF,QAIpB,SAASC,EAAiBxH,GACxBA,OAAAA,aAAiBqH,EAGnB,SAASI,EACdC,GAEIC,IAGAC,EACAC,EACAC,EALAH,GAAmB,EACnBV,EAAe,EACfc,GAAa,EAKXC,MAAAA,EAAU,IAAIjD,SAAe,CAACkD,EAAcC,KAChDL,EAAiBI,EACjBH,EAAgBI,KAkBZC,EAAc,KACjB5C,EAAac,aACU,WAAvBqB,EAAON,cAA6BX,EAAcI,WAE/C7B,EAAWhF,IACV+H,IACHA,GAAa,EACb,MAAAL,EAAOU,WAAPV,EAAOU,UAAYpI,GACnB,MAAA4H,GAAAA,IACAC,EAAe7H,KAIbqI,EAAUrI,IACT+H,IACHA,GAAa,EACb,MAAAL,EAAOY,SAAPZ,EAAOY,QAAUtI,GACjB,MAAA4H,GAAAA,IACAE,EAAc9H,KAIZuI,EAAQ,IACL,IAAIxD,SAAQyD,IACjBZ,EAAa5H,IACX,GAAI+H,IAAeI,IACVK,OAAAA,EAAgBxI,IAG3B0H,MAAAA,EAAOe,SAAPf,EAAOe,aACNrD,MAAK,KACNwC,OAAa5B,EACR+B,GACHL,MAAAA,EAAOgB,YAAPhB,EAAOgB,gBAMPC,EAAM,KAEV,GAAIZ,EACF,OAGEa,IAAAA,EAGA,IACFA,EAAiBlB,EAAOmB,KACxB,MAAOC,GACPF,EAAiB7D,QAAQsD,OAAOS,GAGlC/D,QAAQC,QAAQ4D,GACbxD,KAAKJ,GACL+D,OAAMD,IAAS,IAAAE,EAAAC,EAEd,GAAIlB,EACF,OAIF,MAAMmB,SAAQxB,EAAAA,EAAOwB,SAAS,EACxBC,SAAazB,EAAAA,EAAOyB,cAAcnC,EAClCoC,EACkB,mBAAfD,EACHA,EAAWlC,EAAc6B,GACzBK,EACAE,GACM,IAAVH,GACkB,iBAAVA,GAAsBjC,EAAeiC,GAC3B,mBAAVA,GAAwBA,EAAMjC,EAAc6B,IAElDnB,GAAqB0B,GAMzBpC,IAGA,MAAAS,EAAO4B,QAAP5B,EAAO4B,OAASrC,EAAc6B,GAG9BjE,EAAMuE,GAEHhE,MAAK,KACA+C,GAAAA,IACF,OAAOI,OAGVnD,MAAK,KACAuC,EACFU,EAAOS,GAEPH,QArBJN,EAAOS,OAkCR,OANH3B,EAASO,EAAON,aAClBuB,IAEAJ,IAAQnD,KAAKuD,GAGR,CACLX,QAAAA,EACAuB,OA/HcC,IACTzB,IACHM,EAAO,IAAIhB,EAAemC,IAE1B9B,MAAAA,EAAO+B,OAAP/B,EAAO+B,UA4HTC,SAAU,KACR,MAAA9B,GAAAA,KAEF+B,YA5HkB,KAClBhC,GAAmB,GA4HnBiC,cAzHoB,KACpBjC,GAAmB,ICpFhB,MAAMkC,EAAwBC,QCuFxBC,MAAAA,EArFN,WACDC,IAAAA,EAA0B,GAC1BC,EAAe,EACfC,EAA2B/E,IAC7BA,KAEEgF,EAAsChF,IACxCA,KAGIiF,MAcAC,EAAYlF,IACZ8E,EACFD,EAAM3K,KAAK8F,GAEXD,GAAkB,KAChBgF,EAAS/E,OAgBTmF,EAAQ,KACNC,MAAAA,EAAgBP,EACtBA,EAAQ,GACJO,EAAc5K,QAChBuF,GAAkB,KAChBiF,GAAc,KACZI,EAAcnE,SAAQjB,IACpB+E,EAAS/E,aAuBZ,MAAA,CACLiF,MAlEgBjF,IAChB,IAAI9B,EACJ4G,IACI,IACF5G,EAAS8B,IACD,QACR8E,IACKA,GACHK,IAGJ,OAAOjH,GAwDPmH,WAxCsCrF,GAC9B,IAAIsF,KACVJ,GAAS,KACPlF,KAAYsF,OAsChBJ,SAAAA,EACAK,kBAhByB7B,IACzBqB,EAAWrB,GAgBX8B,uBAT8B9B,IAC9BsB,EAAgBtB,IAaS+B,GC7FtB,MAAeC,EAIpBC,UACE5L,KAAK6L,iBAGGC,aACR9L,KAAK6L,iBAEDhL,EAAeb,KAAK+L,aACtB/L,KAAKgM,UAAYjG,YAAW,KAC1B/F,KAAKiM,mBACJjM,KAAK+L,YAIFG,gBAAgBC,GAEnBJ,KAAAA,UAAYxK,KAAKC,IACpBxB,KAAK+L,WAAa,EAClBI,MAAAA,EAAAA,EAAiBzL,EAAWK,EAAAA,EAAW,KAIjC8K,iBACRO,aAAapM,KAAKgM,WACbA,KAAAA,eAAYlF,GCgHd,MAAMuF,UAKHV,EAkBR9L,YAAY2I,GACVlC,QAEKgG,KAAAA,qBAAsB,EAC3BtM,KAAKuM,eAAiB/D,EAAO+D,eAC7BvM,KAAKwM,WAAWhE,EAAO3F,SAClB4J,KAAAA,UAAY,GACjBzM,KAAK0M,MAAQlE,EAAOkE,MACpB1M,KAAK2M,OAASnE,EAAOmE,QAAUhC,EAC/B3K,KAAKgC,SAAWwG,EAAOxG,SACvBhC,KAAK2C,UAAY6F,EAAO7F,UACnBiK,KAAAA,aAAepE,EAAOvF,OAyZ/B,SAMEJ,GAEA,MAAMgK,EAC2B,mBAAxBhK,EAAQiK,YACVjK,EAAQiK,cACTjK,EAAQiK,YAIRC,OAFgD,IAAxBlK,EAAQiK,YAGM,mBAAjCjK,EAAQkK,qBACZlK,EAAQkK,uBACTlK,EAAQkK,qBACV,EAEEC,OAA0B,IAATH,EAEhB,MAAA,CACLA,KAAAA,EACAI,gBAAiB,EACjBC,cAAeF,EAAO,MAAGD,EAAAA,EAAwBtL,KAAKC,MAAQ,EAC9DkI,MAAO,KACPuD,iBAAkB,EAClBC,eAAgB,EAChBC,kBAAmB,EACnBC,UAAW,KACXC,eAAe,EACfhK,OAAQyJ,EAAU,UAAY,UAC9BxK,YAAa,QA3buBgL,CAAgBxN,KAAK6C,SACpDI,KAAAA,MAAQjD,KAAK4M,aAClB5M,KAAKyN,KAAOjF,EAAOiF,KAGbjB,WACN3J,GAEA7C,KAAK6C,QAAU,IAAK7C,KAAKuM,kBAAmB1J,GAE5C7C,KAAKyN,KAAO5K,MAAAA,OAAAA,EAAAA,EAAS4K,KAErBzN,KAAKkM,gBAAgBlM,KAAK6C,QAAQkJ,WAG1BE,iBACHjM,KAAKyM,UAAUhM,QAAqC,SAA3BT,KAAKiD,MAAMT,aACvCxC,KAAK0M,MAAMgB,OAAO1N,MAItB2N,QAAQd,EAAahK,GAAuD,IAAA+K,EAAAC,EAC1E,MAAMC,EAAW9N,KAAKiD,MAAM4J,KAkB5B,OAfA,OAAIe,GAAAC,EAAA7N,KAAK6C,SAAQkL,cAAbH,SAA2BE,EAAUjB,GACvCA,EAAOiB,GACqC,IAAnC9N,KAAK6C,QAAQmL,oBAEtBnB,EAAOpI,EAAiBqJ,EAAUjB,IAIpC7M,KAAKiO,SAAS,CACZpB,KAAAA,EACAvK,KAAM,UACN4K,cAAerK,MAAAA,OAAAA,EAAAA,EAASxB,UACxB6M,OAAM,MAAErL,OAAF,EAAEA,EAASqL,SAGZrB,EAGTsB,SACElL,EACAmL,GAEApO,KAAKiO,SAAS,CAAE3L,KAAM,WAAYW,MAAAA,EAAOmL,gBAAAA,IAG3C/D,OAAOxH,GAAwC,IAAAwL,EACvCvF,MAAAA,EAAU9I,KAAK8I,QAErB,OADA,OAAAuF,EAAArO,KAAKsO,UAALD,EAAchE,OAAOxH,GACdiG,EAAUA,EAAQ5C,KAAKtF,GAAMiJ,MAAMjJ,GAAQiF,QAAQC,UAG5D8F,UACEtF,MAAMsF,UAEN5L,KAAKqK,OAAO,CAAEhC,QAAQ,IAGxBkG,QACEvO,KAAK4L,UACAuC,KAAAA,SAASnO,KAAK4M,cAGrB7J,WACE,OAAO/C,KAAKyM,UAAUjI,MAAKgK,IAAyC,IAA7BA,EAAS3L,QAAQ4L,UAG1DC,aACS,OAAA1O,KAAK2O,oBAAsB,IAAM3O,KAAK+C,WAG/CC,UAEI,OAAAhD,KAAKiD,MAAMsK,gBACVvN,KAAKiD,MAAMiK,eACZlN,KAAKyM,UAAUjI,MAAKgK,GAAYA,EAASI,mBAAmB5L,UAIhE6L,cAAcvN,EAAY,GAEtB,OAAAtB,KAAKiD,MAAMsK,gBACVvN,KAAKiD,MAAMiK,gBACX9L,EAAepB,KAAKiD,MAAMiK,cAAe5L,GAI9CkF,UAAgB,IAAAsI,EACd,MAAMN,EAAWxO,KAAKyM,UAAUsC,MAAKzO,GAAKA,EAAE0O,6BAExCR,GACFA,EAASS,QAAQ,CAAEC,eAAe,WAI/BZ,EAAAA,KAAAA,YAAS9D,WAGhBhD,WAAiB,IAAA2H,EACf,MAAMX,EAAWxO,KAAKyM,UAAUsC,MAAKzO,GAAKA,EAAE8O,2BAExCZ,GACFA,EAASS,QAAQ,CAAEC,eAAe,WAI/BZ,EAAAA,KAAAA,YAAS9D,WAGhB6E,YAAYb,IACgC,IAAtCxO,KAAKyM,UAAUtL,QAAQqN,KACzBxO,KAAKyM,UAAUtM,KAAKqO,GAGpBxO,KAAK6L,iBAEAa,KAAAA,MAAM4C,OAAO,CAAEhN,KAAM,gBAAiBD,MAAOrC,KAAMwO,SAAAA,KAI5De,eAAef,IAC6B,IAAtCxO,KAAKyM,UAAUtL,QAAQqN,KACzBxO,KAAKyM,UAAYzM,KAAKyM,UAAUpM,QAAOC,GAAKA,IAAMkO,IAE7CxO,KAAKyM,UAAUhM,SAGdT,KAAKsO,UACHtO,KAAKsM,oBACFgC,KAAAA,QAAQjE,OAAO,CAAEjC,QAAQ,IAEzBkG,KAAAA,QAAQ7D,eAIjBzK,KAAK8L,cAGFY,KAAAA,MAAM4C,OAAO,CAAEhN,KAAM,kBAAmBD,MAAOrC,KAAMwO,SAAAA,KAI9DG,oBACS,OAAA3O,KAAKyM,UAAUhM,OAGxB+O,aACOxP,KAAKiD,MAAMsK,eACdvN,KAAKiO,SAAS,CAAE3L,KAAM,eAI1BmN,MACE5M,EACA6M,GACgB,IAAAC,EAAAC,EAChB,GAA+B,SAA3B5P,KAAKiD,MAAMT,YACT,GAAAxC,KAAKiD,MAAMiK,eAAiBwC,MAAAA,GAAAA,EAAcR,cAE5ClP,KAAKqK,OAAO,CAAEhC,QAAQ,SACjB,GAAIrI,KAAK8I,QAAS,CAAA,IAAA+G,EAIvB,OAFA,OAAAA,EAAA7P,KAAKsO,UAALuB,EAAcnF,gBAEP1K,KAAK8I,QAWhB,GANIjG,GACG2J,KAAAA,WAAW3J,IAKb7C,KAAK6C,QAAQZ,QAAS,CACzB,MAAMuM,EAAWxO,KAAKyM,UAAUsC,MAAKzO,GAAKA,EAAEuC,QAAQZ,UAChDuM,GACFxO,KAAKwM,WAAWgC,EAAS3L,SAIxB8B,MAAMC,QAAQ5E,KAAK6C,QAAQb,UAQhC,MAAM8N,EAAkB3J,IAGlB4J,EAAkD,CACtD/N,SAAUhC,KAAKgC,SACfgO,eAAWlJ,EACX2G,KAAMzN,KAAKyN,MAMPwC,EAAqBC,IACzBnM,OAAOoM,eAAeD,EAAQ,SAAU,CACtCE,YAAY,EACZC,IAAK,KACH,GAAIP,EAEKA,OADFxD,KAAAA,qBAAsB,EACpBwD,EAAgBQ,WAO/BL,EAAkBF,GAGZQ,MASAC,EAAgE,CACpEd,aAAAA,EACA7M,QAAS7C,KAAK6C,QACdb,SAAUhC,KAAKgC,SACfiB,MAAOjD,KAAKiD,MACZsN,QAdc,IACTvQ,KAAK6C,QAAQZ,SAGbqK,KAAAA,qBAAsB,EACpBtM,KAAK6C,QAAQZ,QAAQ8N,IAHnBlK,QAAQsD,OAAO,mBAaxBsE,KAAMzN,KAAKyN,MAcX,IAAAgD,GAXFR,EAAkBO,GAElB,OAAK3N,EAAAA,KAAAA,QAAQ6N,WAAbf,EAAuBgB,QAAQH,GAG/BxQ,KAAK4Q,YAAc5Q,KAAKiD,MAIK,SAA3BjD,KAAKiD,MAAMT,aACXxC,KAAKiD,MAAMqK,oBAAXsC,EAAyBY,EAAQd,qBAARE,EAAsBnC,QAE/CzN,KAAKiO,SAAS,CAAE3L,KAAM,QAASmL,YAAM+C,EAAAA,EAAQd,qBAARe,EAAsBhD,OAGvDrE,MAAAA,EAAWQ,IASe,IAAAiH,EAAAC,GAPxBxI,EAAiBsB,IAAUA,EAAMvB,QACrCrI,KAAKiO,SAAS,CACZ3L,KAAM,QACNsH,MAAOA,IAINtB,EAAiBsB,MAEQA,OAAvB8C,GAAAA,EAAAA,KAAAA,MAAMlE,QAAOY,UAAUQ,EAAAA,KAAAA,EAAAA,EAAO5J,OAOhCA,KAAK+Q,sBAER/Q,KAAK8L,aAEFiF,KAAAA,sBAAuB,GAyC9B,OArCKzC,KAAAA,QAAU/F,EAAc,CAC3BoB,GAAI6G,EAAQD,QACZhG,MAAOuF,MAAAA,OAAAA,EAAAA,EAAiBvF,MAAMtK,KAAK6P,GACnC5G,UAAW2D,IAAQ,IAAAmE,EAAAC,OACG,IAATpE,GAKX7M,KAAK2N,QAAQd,GAGiBA,OAAzBH,GAAAA,EAAAA,KAAAA,MAAMlE,QAAOU,YAAY2D,EAAAA,KAAAA,EAAAA,EAAM7M,MAE/BA,KAAK+Q,sBAER/Q,KAAK8L,aAEFiF,KAAAA,sBAAuB,GAb1B3H,EAAQ,IAAI8H,MAAM,oCAetB9H,QAAAA,EACAgB,OAAQ,KACNpK,KAAKiO,SAAS,CAAE3L,KAAM,YAExBiH,QAAS,KACPvJ,KAAKiO,SAAS,CAAE3L,KAAM,WAExBkH,WAAY,KACVxJ,KAAKiO,SAAS,CAAE3L,KAAM,cAExB0H,MAAOwG,EAAQ3N,QAAQmH,MACvBC,WAAYuG,EAAQ3N,QAAQoH,WAC5B/B,YAAasI,EAAQ3N,QAAQqF,cAG/BlI,KAAK8I,QAAU9I,KAAKsO,QAAQxF,QAErB9I,KAAK8I,QAGNmF,SAASkD,GA4EfnR,KAAKiD,MA1EHA,CAAAA,IAC8B,IAAAmO,EAAAC,EACtBF,OAAAA,EAAO7O,MACb,IAAK,SACI,MAAA,IACFW,EACHoK,kBAAmBpK,EAAMoK,kBAAoB,GAEjD,IAAK,QACI,MAAA,IACFpK,EACHT,YAAa,UAEjB,IAAK,WACI,MAAA,IACFS,EACHT,YAAa,YAEjB,IAAK,QACI,MAAA,IACFS,EACHoK,kBAAmB,EACnBC,iBAAW6D,EAAAA,EAAO1D,QAAQ,KAC1BjL,YAAayF,EAASjI,KAAK6C,QAAQqF,aAC/B,WACA,aACCjF,EAAMiK,eAAiB,CAC1BtD,MAAO,KACPrG,OAAQ,YAGd,IAAK,UACI,MAAA,IACFN,EACH4J,KAAMsE,EAAOtE,KACbI,gBAAiBhK,EAAMgK,gBAAkB,EACzCC,cAAuCzL,SAAxB0P,EAAOjE,eAAiBzL,EAAAA,KAAKC,MAC5CkI,MAAO,KACP2D,eAAe,EACfhK,OAAQ,cACH4N,EAAOjD,QAAU,CACpB1L,YAAa,OACb6K,kBAAmB,IAGzB,IAAK,QACH,MAAMzD,EAAQuH,EAAOvH,MAEjBtB,OAAAA,EAAiBsB,IAAUA,EAAMxB,QAAUpI,KAAK4Q,YAC3C,IAAK5Q,KAAK4Q,aAGZ,IACF3N,EACH2G,MAAOA,EACPuD,iBAAkBlK,EAAMkK,iBAAmB,EAC3CC,eAAgB3L,KAAKC,MACrB2L,kBAAmBpK,EAAMoK,kBAAoB,EAC7C7K,YAAa,OACbe,OAAQ,SAEZ,IAAK,aACI,MAAA,IACFN,EACHsK,eAAe,GAEnB,IAAK,WACI,MAAA,IACFtK,KACAkO,EAAOlO,SAKLqO,CAAQtR,KAAKiD,OAE1B4H,EAAcK,OAAM,KAClBlL,KAAKyM,UAAUvF,SAAQsH,IACrBA,EAAS+C,cAAcJ,MAGpBzE,KAAAA,MAAM4C,OAAO,CAAEjN,MAAOrC,KAAMsC,KAAM,UAAW6O,OAAAA,QC/fjD,MAAMK,UAAmB5R,EAM9BC,YAAY2I,GACVlC,QACAtG,KAAKwI,OAASA,GAAU,GACnBiJ,KAAAA,QAAU,GACVC,KAAAA,WAAa,GAGpBC,MACEC,EACA/O,EACAI,GAC+C,IAAA4O,EAC/C,MAAM7P,EAAWa,EAAQb,SACnBW,EACiBC,OAArBC,EAAAA,EAAQF,WAAaC,EAAAA,EAAsBZ,EAAUa,GACvD,IAAIR,EAAQrC,KAAKqQ,IAA4C1N,GAgB7D,OAdKN,IACHA,EAAQ,IAAIgK,EAAM,CAChBK,MAAO1M,KACP2M,OAAQiF,EAAOE,YACf9P,SAAAA,EACAW,UAAAA,EACAE,QAAS+O,EAAOG,oBAAoBlP,GACpCI,MAAAA,EACAsJ,eAAgBqF,EAAOI,iBAAiBhQ,GACxCyL,KAAM5K,EAAQ4K,OAEXwE,KAAAA,IAAI5P,IAGJA,EAGT4P,IAAI5P,GACGrC,KAAK0R,WAAWrP,EAAMM,aACzB3C,KAAK0R,WAAWrP,EAAMM,WAAaN,EACnCrC,KAAKyR,QAAQtR,KAAKkC,GAClBrC,KAAKsP,OAAO,CACVhN,KAAM,QACND,MAAAA,KAKNqL,OAAOrL,GACC6P,MAAAA,EAAalS,KAAK0R,WAAWrP,EAAMM,WAErCuP,IACF7P,EAAMuJ,UAEN5L,KAAKyR,QAAUzR,KAAKyR,QAAQpR,QAAOC,GAAKA,IAAM+B,IAE1C6P,IAAe7P,UACVrC,KAAK0R,WAAWrP,EAAMM,WAG/B3C,KAAKsP,OAAO,CAAEhN,KAAM,UAAWD,MAAAA,KAInC8P,QACEtH,EAAcK,OAAM,KAClBlL,KAAKyR,QAAQvK,SAAQ7E,IACdqL,KAAAA,OAAOrL,SAKlBgO,IAME1N,GAEA,OAAO3C,KAAK0R,WAAW/O,GAGzByP,SACE,OAAOpS,KAAKyR,QAGd1C,KACEnN,EACAC,GAEM,MAACO,GAAWF,EAAgBN,EAAMC,GAMxC,YAJ6B,IAAlBO,EAAQG,QACjBH,EAAQG,OAAQ,GAGXvC,KAAKyR,QAAQ1C,MAAK1M,GAASF,EAAWC,EAASC,KAMxDgQ,QAAQzQ,EAAgCC,GAChC,MAACO,GAAWF,EAAgBN,EAAMC,GACjCkC,OAAAA,OAAOC,KAAK5B,GAAS3B,OAAS,EACjCT,KAAKyR,QAAQpR,QAAOgC,GAASF,EAAWC,EAASC,KACjDrC,KAAKyR,QAGXnC,OAAOgD,GACLzH,EAAcK,OAAM,KAClBlL,KAAKF,UAAUoH,SAAQhH,IACrBA,EAASoS,SAKf9L,UACEqE,EAAcK,OAAM,KAClBlL,KAAKyR,QAAQvK,SAAQ7E,IACnBA,EAAMmE,gBAKZgB,WACEqD,EAAcK,OAAM,KAClBlL,KAAKyR,QAAQvK,SAAQ7E,IACnBA,EAAMmF,kBC1HP,MAAM+K,UAKH5G,EAWR9L,YAAY2I,GACVlC,QAEAtG,KAAK6C,QAAU,IACV2F,EAAO+D,kBACP/D,EAAO3F,SAEZ7C,KAAKwS,WAAahK,EAAOgK,WACzBxS,KAAKyS,cAAgBjK,EAAOiK,cAC5BzS,KAAK2M,OAASnE,EAAOmE,QAAUhC,EAC1B8B,KAAAA,UAAY,GACjBzM,KAAKiD,MAAQuF,EAAOvF,OAASuK,IAC7BxN,KAAKyN,KAAOjF,EAAOiF,KAEnBzN,KAAKkM,gBAAgBlM,KAAK6C,QAAQkJ,WAClC/L,KAAK8L,aAGPqC,SAASlL,GACPjD,KAAKiO,SAAS,CAAE3L,KAAM,WAAYW,MAAAA,IAGpCoM,YAAYb,IACgC,IAAtCxO,KAAKyM,UAAUtL,QAAQqN,KACzBxO,KAAKyM,UAAUtM,KAAKqO,GAGpBxO,KAAK6L,iBAEA4G,KAAAA,cAAcnD,OAAO,CACxBhN,KAAM,gBACNa,SAAUnD,KACVwO,SAAAA,KAKNe,eAAef,GACbxO,KAAKyM,UAAYzM,KAAKyM,UAAUpM,QAAOC,GAAKA,IAAMkO,IAElDxO,KAAK8L,aAEA2G,KAAAA,cAAcnD,OAAO,CACxBhN,KAAM,kBACNa,SAAUnD,KACVwO,SAAAA,IAIMvC,iBACHjM,KAAKyM,UAAUhM,SACQ,YAAtBT,KAAKiD,MAAMM,OACbvD,KAAK8L,aAEL9L,KAAKyS,cAAc/E,OAAO1N,OAKhCwK,WACM,OAAAxK,KAAKsO,SACFA,KAAAA,QAAQ9D,WACNxK,KAAKsO,QAAQxF,SAEf9I,KAAK0S,UAGDC,gBACLC,MAAAA,EAAkB,KAAM,IAAAC,EAsBrB,OArBFvE,KAAAA,QAAU/F,EAAc,CAC3BoB,GAAI,IACG3J,KAAK6C,QAAQiQ,WAGX9S,KAAK6C,QAAQiQ,WAAW9S,KAAKiD,MAAM8P,WAFjClN,QAAQsD,OAAO,uBAI1BiB,OAAQ,KACNpK,KAAKiO,SAAS,CAAE3L,KAAM,YAExBiH,QAAS,KACPvJ,KAAKiO,SAAS,CAAE3L,KAAM,WAExBkH,WAAY,KACVxJ,KAAKiO,SAAS,CAAE3L,KAAM,cAExB0H,aAAO6I,EAAA7S,KAAK6C,QAAQmH,SAAS,EAC7BC,WAAYjK,KAAK6C,QAAQoH,WACzB/B,YAAalI,KAAK6C,QAAQqF,cAGrBlI,KAAKsO,QAAQxF,SAGhBkK,EAAiC,YAAtBhT,KAAKiD,MAAMM,OACxB,IAAA,IAAA0P,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACE,IAACN,EAAU,CAAA,IAAAO,EAAAC,EAAAC,EAAA5F,EACb7N,KAAKiO,SAAS,CAAE3L,KAAM,UAAWyQ,UAAW/S,KAAK6C,QAAQkQ,YAGvD,OADGN,GAAAA,EAAAA,KAAAA,cAAcjK,QAAOkL,WACxBH,EAAA7N,KAAA8N,EAAAxT,KAAKiD,MAAM8P,UACX/S,MAEF,MAAMwQ,QAAgB,OAAAiD,GAAA5F,EAAA7N,KAAK6C,SAAQ6Q,eAAb,EAAAD,EAAA/N,KAAAmI,EAAwB7N,KAAKiD,MAAM8P,YACrDvC,IAAYxQ,KAAKiD,MAAMuN,SACzBxQ,KAAKiO,SAAS,CACZ3L,KAAM,UACNkO,QAAAA,EACAuC,UAAW/S,KAAKiD,MAAM8P,YAI5B,MAAMlG,QAAa+F,IAwBnB,OArBA,OAAAK,GAAAC,EAAAlT,KAAKyS,cAAcjK,QAAOU,YAA1B+J,EAAAvN,KAAAwN,EACErG,EACA7M,KAAKiD,MAAM8P,UACX/S,KAAKiD,MAAMuN,QACXxQ,YAGF,OAAAmT,UAAWtQ,SAAQqG,gBAAnB,EAAMiK,SACJtG,EACA7M,KAAKiD,MAAM8P,UACX/S,KAAKiD,MAAMuN,gBAGP,OAAN6C,UAAWxQ,SAAQ8Q,gBAAb,EAAAN,EAAA3N,KAAA4N,EACJzG,EACA,KACA7M,KAAKiD,MAAM8P,UACX/S,KAAKiD,MAAMuN,UAGbxQ,KAAKiO,SAAS,CAAE3L,KAAM,UAAWuK,KAAAA,IAC1BA,EACP,MAAOjD,GACH,IAAA,IAAAgK,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAyBF,MAvBA,OAAAL,GAAAC,EAAA7T,KAAKyS,cAAcjK,QAAOY,UAA1BwK,EAAAlO,KAAAmO,EACEjK,EACA5J,KAAKiD,MAAM8P,UACX/S,KAAKiD,MAAMuN,QACXxQ,YAOF,OAAA8T,UAAWjR,SAAQuG,cAAnB,EAAM0K,SACJlK,EACA5J,KAAKiD,MAAM8P,UACX/S,KAAKiD,MAAMuN,gBAGP,OAANwD,UAAWnR,SAAQ8Q,gBAAb,EAAAK,EAAAtO,KAAAuO,OACJnN,EACA8C,EACA5J,KAAKiD,MAAM8P,UACX/S,KAAKiD,MAAMuN,UAEP5G,EACE,QACR5J,KAAKiO,SAAS,CAAE3L,KAAM,QAASsH,MAAOA,MAKpCqE,SAASkD,GAsDfnR,KAAKiD,MApDHA,CAAAA,IAEQkO,OAAAA,EAAO7O,MACb,IAAK,SACI,MAAA,IACFW,EACH8E,aAAc9E,EAAM8E,aAAe,GAEvC,IAAK,QACI,MAAA,IACF9E,EACHiR,UAAU,GAEd,IAAK,WACI,MAAA,IACFjR,EACHiR,UAAU,GAEd,IAAK,UACI,MAAA,IACFjR,EACHuN,QAASW,EAAOX,QAChB3D,UAAM/F,EACN8C,MAAO,KACPsK,UAAWjM,EAASjI,KAAK6C,QAAQqF,aACjC3E,OAAQ,UACRwP,UAAW5B,EAAO4B,WAEtB,IAAK,UACI,MAAA,IACF9P,EACH4J,KAAMsE,EAAOtE,KACbjD,MAAO,KACPrG,OAAQ,UACR2Q,UAAU,GAEd,IAAK,QACI,MAAA,IACFjR,EACH4J,UAAM/F,EACN8C,MAAOuH,EAAOvH,MACd7B,aAAc9E,EAAM8E,aAAe,EACnCmM,UAAU,EACV3Q,OAAQ,SAEZ,IAAK,WACI,MAAA,IACFN,KACAkO,EAAOlO,SAILqO,CAAQtR,KAAKiD,OAE1B4H,EAAcK,OAAM,KAClBlL,KAAKyM,UAAUvF,SAAQsH,IACrBA,EAAS2F,iBAAiBhD,MAEvBsB,KAAAA,cAAcnD,OAAO,CACxBnM,SAAUnD,KACVsC,KAAM,UACN6O,OAAAA,QAMD,SAAS3D,IAMP,MAAA,CACLgD,aAAS1J,EACT+F,UAAM/F,EACN8C,MAAO,KACP7B,aAAc,EACdmM,UAAU,EACV3Q,OAAQ,OACRwP,eAAWjM,GCvRR,MAAMsN,UAAsBxU,EAMjCC,YAAY2I,GACVlC,QACAtG,KAAKwI,OAASA,GAAU,GACnB6L,KAAAA,UAAY,GACZ7B,KAAAA,WAAa,EAGpBb,MACEC,EACA/O,EACAI,GAEA,MAAME,EAAW,IAAIoP,EAAS,CAC5BE,cAAezS,KACf2M,OAAQiF,EAAOE,YACfU,aAAcxS,KAAKwS,WACnB3P,QAAS+O,EAAO0C,uBAAuBzR,GACvCI,MAAAA,EACAsJ,eAAgB1J,EAAQQ,YACpBuO,EAAO2C,oBAAoB1R,EAAQQ,kBACnCyD,EACJ2G,KAAM5K,EAAQ4K,OAKhB,OAFKwE,KAAAA,IAAI9O,GAEFA,EAGT8O,IAAI9O,GACFnD,KAAKqU,UAAUlU,KAAKgD,GACpBnD,KAAKsP,OAAO,CAAEhN,KAAM,QAASa,SAAAA,IAG/BuK,OAAOvK,GACLnD,KAAKqU,UAAYrU,KAAKqU,UAAUhU,QAAOC,GAAKA,IAAM6C,IAClDnD,KAAKsP,OAAO,CAAEhN,KAAM,UAAWa,SAAAA,IAGjCgP,QACEtH,EAAcK,OAAM,KAClBlL,KAAKqU,UAAUnN,SAAQ/D,IAChBuK,KAAAA,OAAOvK,SAKlBiP,SACE,OAAOpS,KAAKqU,UAGdtF,KACE3M,GAMA,YAJ6B,IAAlBA,EAAQG,QACjBH,EAAQG,OAAQ,GAGXvC,KAAKqU,UAAUtF,MAAK5L,GAAYD,EAAcd,EAASe,KAGhEkP,QAAQjQ,GACN,OAAOpC,KAAKqU,UAAUhU,QAAO8C,GAAYD,EAAcd,EAASe,KAGlEmM,OAAOgD,GACLzH,EAAcK,OAAM,KAClBlL,KAAKF,UAAUoH,SAAQhH,IACrBA,EAASoS,SAKfkC,wBACE,MAAMC,EAAkBzU,KAAKqU,UAAUhU,QAAOC,GAAKA,EAAE2C,MAAMiR,WAC3D,OAAOrJ,EAAcK,OAAM,IACzBuJ,EAAgBvQ,QACd,CAAC4E,EAAS3F,IACR2F,EAAQ5C,MAAK,IAAM/C,EAASqH,WAAWX,MAAMjJ,MAC/CiF,QAAQC,cC9IT,SAAS4O,IAKP,MAAA,CACL/D,QAASH,IACPA,EAAQD,QAAU,KAAM,IAAAX,EAAAa,EAAAkE,EAAAC,EAAAC,EAAAC,EAAAC,EAChBC,MAAAA,SACJxE,EAAAA,EAAQd,eAAR,SAAAE,EAAsBnC,aAAtBgD,EAA4BuE,YACxBC,SAAYzE,EAAAA,EAAQd,eAAR,SAAAiF,EAAsBlH,aAAtBmH,EAA4BK,UACxCjF,EAAYiF,MAAAA,OAAAA,EAAAA,EAAWjF,UACvBkF,EAA8C,aAAhB,MAATD,SAAAA,EAAWE,WAChCC,EAAkD,cAAhB,MAATH,SAAAA,EAAWE,WACpCE,GAAW,OAAAR,EAAArE,EAAQvN,MAAM4J,WAAd,EAAAgI,EAAoBS,QAAS,GACxCC,GAAgB,OAAAT,EAAAtE,EAAQvN,MAAM4J,WAAd,EAAAiI,EAAoBU,aAAc,GAClD1F,EAAkB3J,IAClBsP,EAAc3F,MAAAA,OAAAA,EAAAA,EAAiBQ,OACjCoF,IAAAA,EAAgBH,EAChBI,GAAY,EAGhB,MAAM1T,EACJuO,EAAQ3N,QAAQZ,SAAY,KAAM4D,QAAQsD,OAAO,oBAE7CyM,EAAgB,CACpBN,EACAO,EACAC,EACAC,KAEAL,EAAgBK,EACZ,CAACF,KAAUH,GACX,IAAIA,EAAeG,GAChBE,EAAW,CAACD,KAASR,GAAS,IAAIA,EAAOQ,IAI5CE,EAAY,CAChBV,EACApH,EACA2H,EACAE,KAEA,GAAIJ,EACF,OAAO9P,QAAQsD,OAAO,aAGpB,QAAiB,IAAV0M,IAA0B3H,GAAUoH,EAAM7U,OACnD,OAAOoF,QAAQC,QAAQwP,GAGzB,MAAMvF,EAAuC,CAC3C/N,SAAUwO,EAAQxO,SAClBsO,OAAQmF,EACRzF,UAAW6F,EACXpI,KAAM+C,EAAQ/C,MAGVwI,EAAgBhU,EAAQ8N,GAM9B,OAJgBlK,QAAQC,QAAQmQ,GAAe/P,MAAK4P,GAClDF,EAAcN,EAAOO,EAAOC,EAAMC,MAMlCjN,IAAAA,EAGJ,GAAKuM,EAAS5U,OAKT,GAAIyU,EAAoB,CAC3B,MAAMhH,OAA8B,IAAd8B,EAChB6F,EAAQ3H,EACV8B,EACAkG,EAAiB1F,EAAQ3N,QAASwS,GACtCvM,EAAUkN,EAAUX,EAAUnH,EAAQ2H,QAInC,GAAIT,EAAwB,CAC/B,MAAMlH,OAA8B,IAAd8B,EAChB6F,EAAQ3H,EACV8B,EACAmG,EAAqB3F,EAAQ3N,QAASwS,GAC1CvM,EAAUkN,EAAUX,EAAUnH,EAAQ2H,GAAO,OAI1C,CACHH,EAAgB,GAEVxH,MAAAA,OAAqD,IAArCsC,EAAQ3N,QAAQqT,iBAQtCpN,GALEkM,IAAeK,EAAS,IACpBL,EAAYK,EAAS,GAAI,EAAGA,GAK9BW,EAAU,GAAI9H,EAAQqH,EAAc,IACpC1P,QAAQC,QAAQ8P,EAAc,GAAIL,EAAc,GAAIF,EAAS,KAGjE,IAAK,IAAInQ,EAAI,EAAGA,EAAImQ,EAAS5U,OAAQyE,IACnC4D,EAAUA,EAAQ5C,MAAKoP,IAMrB,IAJEN,IAAeK,EAASnQ,IACpB8P,EAAYK,EAASnQ,GAAIA,EAAGmQ,GAGT,CACvB,MAAMQ,EAAQ3H,EACVqH,EAAcrQ,GACdgR,EAAiB1F,EAAQ3N,QAASyS,GACtC,OAAOU,EAAUV,EAAOpH,EAAQ2H,GAElC,OAAOhQ,QAAQC,QACb8P,EAAcN,EAAOC,EAAcrQ,GAAImQ,EAASnQ,aApDtD4D,EAAUkN,EAAU,IA0DtB,MAAMI,EAAetN,EAAQ5C,MAAKoP,IAAU,CAC1CA,MAAAA,EACAE,WAAYE,MAQd,OALA,OAAAlF,EAAAA,EAAQF,SAARyE,EAAgBtO,iBAAiB,SAAS,KACxCkP,GAAY,EACG,MAAf7F,GAAAA,EAAiBvF,WAGZ6L,KAMR,SAASF,EACdrT,EACAyS,GAEA,aAAOzS,EAAQqT,wBAARrT,EAAQqT,iBAAmBZ,EAAMA,EAAM7U,OAAS,GAAI6U,GAGtD,SAASa,EACdtT,EACAyS,GAEA,OAAA,MAAOzS,EAAQsT,0BAAf,EAAOtT,EAAQsT,qBAAuBb,EAAM,GAAIA,GAO3C,SAASe,EACdxT,EACAyS,GAEIzS,GAAAA,EAAQqT,kBAAoBvR,MAAMC,QAAQ0Q,GAAQ,CACpD,MAAMgB,EAAgBJ,EAAiBrT,EAASyS,GAE9C,OAAA,MAAOgB,IAEW,IAAlBA,GASC,SAASC,EACd1T,EACAyS,GAEIzS,GAAAA,EAAQsT,sBAAwBxR,MAAMC,QAAQ0Q,GAAQ,CACxD,MAAMkB,EAAoBL,EAAqBtT,EAASyS,GAEtD,OAAA,MAAOkB,IAEe,IAAtBA,GCjKC,MAAMC,UAMH7W,EAgCRC,YACE+R,EACA/O,GAQAyD,QAEKsL,KAAAA,OAASA,EACT/O,KAAAA,QAAUA,EACf7C,KAAK0W,aAAe,IAAIC,IACnBC,KAAAA,oBAAsB,KAC3B5W,KAAK6W,cACArK,KAAAA,WAAW3J,GAGRgU,cACHnJ,KAAAA,OAAS1N,KAAK0N,OAAOzN,KAAKD,MAC1BiP,KAAAA,QAAUjP,KAAKiP,QAAQhP,KAAKD,MAGzBI,cACsB,IAA1BJ,KAAKF,UAAUW,SACjBT,KAAK8W,aAAazH,YAAYrP,MAE1B+W,EAAmB/W,KAAK8W,aAAc9W,KAAK6C,UAC7C7C,KAAKgX,eAGPhX,KAAKiX,gBAIC1W,gBACHP,KAAKF,UAAUW,QAClBT,KAAK4L,UAITwD,yBACE,OAAO8H,EACLlX,KAAK8W,aACL9W,KAAK6C,QACL7C,KAAK6C,QAAQsU,oBAIjBnI,2BACE,OAAOkI,EACLlX,KAAK8W,aACL9W,KAAK6C,QACL7C,KAAK6C,QAAQuU,sBAIjBxL,UACO9L,KAAAA,UAAY,GACjBE,KAAKqX,oBACLrX,KAAKsX,uBACLtX,KAAK8W,aAAavH,eAAevP,MAGnCwM,WACE3J,EAOA0U,GAEMC,MAAAA,EAAcxX,KAAK6C,QACnB4U,EAAYzX,KAAK8W,aAIvB,GAFKjU,KAAAA,QAAU7C,KAAK4R,OAAOG,oBAAoBlP,QAGb,IAAzB7C,KAAK6C,QAAQ4L,SACY,kBAAzBzO,KAAK6C,QAAQ4L,QAEpB,MAAM,IAAIyC,MAAM,oCAIblR,KAAK6C,QAAQb,WAChBhC,KAAK6C,QAAQb,SAAWwV,EAAYxV,UAGtChC,KAAK0X,cAEL,MAAMC,EAAU3X,KAAKQ,eAInBmX,GACAC,EACE5X,KAAK8W,aACLW,EACAzX,KAAK6C,QACL2U,IAGFxX,KAAKgX,eAIPhX,KAAK6X,aAAaN,IAIhBI,GACC3X,KAAK8W,eAAiBW,GACrBzX,KAAK6C,QAAQ4L,UAAY+I,EAAY/I,SACrCzO,KAAK6C,QAAQvB,YAAckW,EAAYlW,WAEzCtB,KAAK8X,qBAGP,MAAMC,EAAsB/X,KAAKgY,0BAI/BL,GACC3X,KAAK8W,eAAiBW,GACrBzX,KAAK6C,QAAQ4L,UAAY+I,EAAY/I,SACrCsJ,IAAwB/X,KAAKiY,wBAE1BC,KAAAA,sBAAsBH,GAI/BI,oBACEtV,GAQA,MAAMR,EAAQrC,KAAK4R,OAAOwG,gBAAgBzG,MAAM3R,KAAK4R,OAAQ/O,GAE7D,OAAO7C,KAAKqY,aAAahW,EAAOQ,GAGlC+L,mBACE,OAAO5O,KAAKsY,cAGdC,YACEpU,GAEMqU,MAAAA,EAAgB,GAatB,OAXAzU,OAAOC,KAAKG,GAAQ+C,SAAQ9C,IAC1BL,OAAOoM,eAAeqI,EAAepU,EAAK,CACxCqU,cAAc,EACdrI,YAAY,EACZC,IAAK,KACHrQ,KAAK0W,aAAazE,IAAI7N,GACfD,EAAOC,SAKboU,EAGTE,kBACE,OAAO1Y,KAAK8W,aAGdpJ,SACE1N,KAAK4R,OAAOwG,gBAAgB1K,OAAO1N,KAAK8W,cAG1C7H,SAAmB+F,YACjBA,KACGnS,GAC+C,IAGlD,OAAO7C,KAAKyP,MAAM,IACb5M,EACH4K,KAAM,CAAEuH,YAAAA,KAIZ2D,gBACE9V,GAQM+V,MAAAA,EAAmB5Y,KAAK4R,OAAOG,oBAAoBlP,GAEnDR,EAAQrC,KAAK4R,OAChBwG,gBACAzG,MAAM3R,KAAK4R,OAAQgH,GAGtB,OAFAvW,EAAM0O,sBAAuB,EAEtB1O,EAAMoN,QAAQvJ,MAAK,IAAMlG,KAAKqY,aAAahW,EAAOuW,KAGjDnJ,MACRC,GAC6C,IAAAmJ,EAC7C,OAAO7Y,KAAKgX,aAAa,IACpBtH,EACHR,cAA6C,OAAhC2J,EAAEnJ,EAAaR,gBAAiB2J,IAC5C3S,MAAK,KACNlG,KAAK6X,eACE7X,KAAKsY,iBAIRtB,aACNtH,GAGKgI,KAAAA,cAGD5O,IAAAA,EAA2C9I,KAAK8W,aAAarH,MAC/DzP,KAAK6C,QACL6M,GAOF,OAJI,MAACA,GAAAA,EAAcoJ,eACjBhQ,EAAUA,EAAQe,MAAMjJ,IAGnBkI,EAGDgP,qBAGN,GAFA9X,KAAKqX,oBAGH3W,GACAV,KAAKsY,cAActV,UAClBnC,EAAeb,KAAK6C,QAAQvB,WAE7B,OAGF,MAOMsE,EAPOxE,EACXpB,KAAKsY,cAAcpL,cACnBlN,KAAK6C,QAAQvB,WAKQ,EAEvBtB,KAAK+Y,eAAiBhT,YAAW,KAC1B/F,KAAKsY,cAActV,SACtBhD,KAAK6X,iBAENjS,GAGGoS,yBAAyB,IAAAgB,EACxB,MAAwC,mBAAjChZ,KAAK6C,QAAQoW,gBACvBjZ,KAAK6C,QAAQoW,gBAAgBjZ,KAAKsY,cAAczL,KAAM7M,KAAK8W,cADxD,OAEHkC,EAAAhZ,KAAK6C,QAAQoW,kBAFVD,EAKDd,sBAAsBgB,GAC5BlZ,KAAKsX,uBAEAW,KAAAA,uBAAyBiB,GAG5BxY,IACyB,IAAzBV,KAAK6C,QAAQ4L,SACZ5N,EAAeb,KAAKiY,yBACW,IAAhCjY,KAAKiY,yBAKPjY,KAAKmZ,kBAAoBC,aAAY,MAEjCpZ,KAAK6C,QAAQwW,6BACbhT,EAAac,cAEbnH,KAAKgX,iBAENhX,KAAKiY,yBAGFhB,eACNjX,KAAK8X,qBACL9X,KAAKkY,sBAAsBlY,KAAKgY,0BAG1BX,oBACNjL,aAAapM,KAAK+Y,gBACbA,KAAAA,oBAAiBjS,EAGhBwQ,uBACNgC,cAActZ,KAAKmZ,mBACdA,KAAAA,uBAAoBrS,EAGjBuR,aACRhW,EACAQ,GAQM4U,MAAAA,EAAYzX,KAAK8W,aACjBU,EAAcxX,KAAK6C,QACnB0W,EAAavZ,KAAKsY,cAGlBkB,EAAkBxZ,KAAKyZ,mBACvBC,EAAoB1Z,KAAK2Z,qBACzBC,EAAcvX,IAAUoV,EACxBoC,EAAoBD,EACtBvX,EAAMY,MACNjD,KAAK8Z,yBACHC,EAAkBH,EACpB5Z,KAAKsY,cACLtY,KAAKga,qBAEH/W,MAAEA,GAAUZ,EACd,IAGAwK,GAHAK,cAAEA,EAAFtD,MAAiBA,EAAjBwD,eAAwBA,EAAxB5K,YAAwCA,EAAxCe,OAAqDA,GAAWN,EAChEgX,GAAiB,EACjBC,GAAoB,EAIpBrX,GAAAA,EAAQsX,mBAAoB,CAC9B,MAAMxC,EAAU3X,KAAKQ,eAEf4Z,GAAgBzC,GAAWZ,EAAmB1U,EAAOQ,GAErDwX,EACJ1C,GAAWC,EAAsBvV,EAAOoV,EAAW5U,EAAS2U,IAE1D4C,GAAgBC,KAClB7X,EAAcyF,EAAS5F,EAAMQ,QAAQqF,aACjC,WACA,SACCgF,IACH3J,EAAS,YAGsB,gBAA/BV,EAAQsX,qBACV3X,EAAc,QAKlB,GACEK,EAAQyX,mBACPrX,EAAMgK,iBADP,MAEA8M,GAAAA,EAAiBQ,WACN,UAAXhX,EAEAsJ,EAAOkN,EAAgBlN,KACvBK,EAAgB6M,EAAgB7M,cAChC3J,EAASwW,EAAgBxW,OACzB0W,GAAiB,OAGd,GAAIpX,EAAQ2X,aAAgC,IAAfvX,EAAM4J,KAAsB,CAAA,IAAA4N,EAG1DlB,GAAAA,GACAtW,EAAM4J,QAAS2M,MAAAA,OAAAA,EAAAA,EAAiB3M,OAChChK,EAAQ2X,UAAW,OAAnBC,EAAmBza,KAAK0a,qBAAL,EAAAD,EAAqB9Q,MACvC3J,KAAK4W,oBAEN/J,EAAO7M,KAAK0a,eAAevW,YAEvB,IACF0I,EAAOhK,EAAQ2X,OAAOvX,EAAM4J,OACM,IAA9BhK,EAAQmL,oBACVnB,EAAOpI,EAAiB8U,MAAAA,OAAAA,EAAAA,EAAY1M,KAAMA,IAE5C7M,KAAK0a,eAAiB,CACpB/Q,GAAI9G,EAAQ2X,OACZrW,OAAQ0I,GAEL+J,KAAAA,oBAAsB,KAC3B,MAAO+D,GAIP/Q,EAAQ+Q,EACH/D,KAAAA,oBAAsB+D,EAC3BvN,EAAiB3L,KAAKC,MACtB6B,EAAS,cAMbsJ,EAAQ5J,EAAM4J,KAIhB,QACqC,IAA5BhK,EAAQ+X,sBACC,IAAT/N,GACI,YAAXtJ,EACA,CACIqX,IAAAA,EAGJ,GACE,MAAArB,GAAAA,EAAYW,mBACZrX,EAAQ+X,mBAAR,MAA4BlB,OAA5B,EAA4BA,EAAmBkB,iBAE/CA,EAAkBrB,EAAW1M,UAMzBhK,GAJJ+X,EACqC,mBAA5B/X,EAAQ+X,gBACV/X,EAAQ+X,kBACT/X,EAAQ+X,gBACV/X,EAAQ2X,aAAqC,IAApBI,EACvB,IACFA,EAAkB/X,EAAQ2X,OAAOI,IACC,IAA9B/X,EAAQmL,oBACV4M,EAAkBnW,EAChB8U,MAAAA,OAAAA,EAAAA,EAAY1M,KACZ+N,IAGChE,KAAAA,oBAAsB,KAC3B,MAAO+D,GAIP/Q,EAAQ+Q,EACH/D,KAAAA,oBAAsB+D,EAC3BvN,EAAiB3L,KAAKC,MACtB6B,EAAS,aAKgB,IAApBqX,IACTrX,EAAS,UACTsJ,EAAO+N,EACPV,GAAoB,GAIxB,MAAMW,EAA6B,aAAhBrY,EA6BnB,MA3BuD,CACrDe,OAAAA,EACAf,YAAAA,EACAsY,UAAsB,YAAXvX,EACXgX,UAAsB,YAAXhX,EACXwX,QAAoB,UAAXxX,EACTsJ,KAAAA,EACAK,cAAAA,EACAtD,MAAAA,EACAwD,eAAAA,EACArF,aAAc9E,EAAMoK,kBACpB2N,UAAW/X,EAAMgK,gBAAkB,GAAKhK,EAAMkK,iBAAmB,EACjE8N,oBACEhY,EAAMgK,gBAAkB4M,EAAkB5M,iBAC1ChK,EAAMkK,iBAAmB0M,EAAkB1M,iBAC7C0N,WAAYA,EACZK,aAAcL,GAAyB,YAAXtX,EAC5B4X,eAA2B,UAAX5X,GAA8C,IAAxBN,EAAMiK,cAC5CgH,SAA0B,WAAhB1R,EACV0X,kBAAAA,EACAD,eAAAA,EACAmB,eAA2B,UAAX7X,GAA8C,IAAxBN,EAAMiK,cAC5ClK,QAASA,EAAQX,EAAOQ,GACxBoM,QAASjP,KAAKiP,QACdvB,OAAQ1N,KAAK0N,QAMjBmK,aAAaN,GACLgC,MAAAA,EAAavZ,KAAKsY,cAIlB+C,EAAarb,KAAKqY,aAAarY,KAAK8W,aAAc9W,KAAK6C,SAK7D,GAJA7C,KAAKyZ,mBAAqBzZ,KAAK8W,aAAa7T,MAC5CjD,KAAK2Z,qBAAuB3Z,KAAK6C,QZ/O9B,SAAgCwB,EAAMC,GACtCD,GAAAA,IAAMC,GAAOA,IAAMD,EACtB,OAAO,EAGT,IAAK,MAAMD,KAAOC,EACZA,GAAAA,EAAED,KAASE,EAAEF,GACf,OAAO,EAIX,OAAO,EYuODkX,CAAoBD,EAAY9B,GAClC,OAGFvZ,KAAKsY,cAAgB+C,EAGrB,MAAME,EAAsC,CAAE7O,OAAO,IA6BpB,KAA7B,MAAA6K,OAAA,EAAAA,EAAezX,YA3BW,MACxB,IAACyZ,EACH,OAAO,EAGH,MAAAiC,oBAAEA,GAAwBxb,KAAK6C,QAErC,GAC0B,QAAxB2Y,IACEA,IAAwBxb,KAAK0W,aAAa+E,KAE5C,OAAO,EAGHC,MAAAA,EAAgB,IAAI/E,IAAJ,MAAQ6E,EAAAA,EAAuBxb,KAAK0W,cAMnD3S,OAJH/D,KAAK6C,QAAQ8Y,kBACfD,EAAczJ,IAAI,SAGblO,OAAOC,KAAKhE,KAAKsY,eAAe9T,MAAKJ,IACpCwX,MAAAA,EAAWxX,EAEjB,OADgBpE,KAAKsY,cAAcsD,KAAcrC,EAAWqC,IAC1CF,EAAcG,IAAID,OAIEE,KACxCP,EAAqBzb,WAAY,GAGnCE,KAAKsP,OAAO,IAAKiM,KAAyBhE,IAGpCG,cACN,MAAMrV,EAAQrC,KAAK4R,OAAOwG,gBAAgBzG,MAAM3R,KAAK4R,OAAQ5R,KAAK6C,SAElE,GAAIR,IAAUrC,KAAK8W,aACjB,OAGIW,MAAAA,EAAYzX,KAAK8W,aAGlBA,KAAAA,aAAezU,EACpBrC,KAAK8Z,yBAA2BzX,EAAMY,MACjC+W,KAAAA,oBAAsBha,KAAKsY,cAE5BtY,KAAKQ,iBACP,MAAAiX,GAAAA,EAAWlI,eAAevP,MAC1BqC,EAAMgN,YAAYrP,OAItBuR,cAAcJ,GACNoG,MAAAA,EAA+B,GAEjB,YAAhBpG,EAAO7O,KACTiV,EAAcrO,WAAaiI,EAAOjD,OACT,UAAhBiD,EAAO7O,MAAqBgG,EAAiB6I,EAAOvH,SAC7D2N,EAAcnO,SAAU,GAGrByO,KAAAA,aAAaN,GAEdvX,KAAKQ,gBACPR,KAAKiX,eAID3H,OAAOiI,GACb1M,EAAcK,OAAM,KAEW,IAAAiI,EAAAtF,EAAAwF,EAAAD,EAAzBmE,GAAAA,EAAcrO,iBAChBiK,GAAAtF,EAAA7N,KAAK6C,SAAQqG,qBAAYlJ,KAAKsY,cAAczL,MAC5C,OAAKhK,GAAAA,EAAAA,KAAAA,SAAQ8Q,YAAbN,EAAA3N,KAAA0N,EAAyBpT,KAAKsY,cAAczL,KAAO,WAC9C,GAAI0K,EAAcnO,QAAS,CAAA,IAAA0K,EAAAR,EAAAU,EAAAD,SAChCD,GAAAR,EAAAtT,KAAK6C,SAAQuG,mBAAUpJ,KAAKsY,cAAc1O,OAC1C,OAAK/G,GAAAA,EAAAA,KAAAA,SAAQ8Q,YAAbK,EAAAtO,KAAAqO,OAAyBjN,EAAW9G,KAAKsY,cAAc1O,OAIrD2N,EAAczX,WAChBE,KAAKF,UAAUoH,SAAQhH,IACrBA,EAASF,KAAKsY,kBAKdf,EAAc7K,OAChB1M,KAAK4R,OAAOwG,gBAAgB9I,OAAO,CACjCjN,MAAOrC,KAAK8W,aACZxU,KAAM,+BAkBhB,SAASyU,EACP1U,EACAQ,GAGEkZ,OAhBJ,SACE1Z,EACAQ,GAGEA,SAAoB,IAApBA,EAAQ4L,SACPpM,EAAMY,MAAMiK,eACY,UAAvB7K,EAAMY,MAAMM,SAA+C,IAAzBV,EAAQmZ,cAS5CD,CAAkB1Z,EAAOQ,IACxBR,EAAMY,MAAMiK,cAAgB,GAC3BgK,EAAc7U,EAAOQ,EAASA,EAAQoZ,gBAI5C,SAAS/E,EACP7U,EACAQ,EACAqZ,GAIA,IAAwB,IAApBrZ,EAAQ4L,QAAmB,CAC7B,MAAM3N,EAAyB,mBAAVob,EAAuBA,EAAM7Z,GAAS6Z,EAE3D,MAAiB,WAAVpb,IAAiC,IAAVA,GAAmBkC,EAAQX,EAAOQ,GAElE,OAAO,EAGT,SAAS+U,EACPvV,EACAoV,EACA5U,EACA2U,GAEA,OACsB,IAApB3U,EAAQ4L,UACPpM,IAAUoV,IAAqC,IAAxBD,EAAY/I,YAClC5L,EAAQsZ,UAAmC,UAAvB9Z,EAAMY,MAAMM,SAClCP,EAAQX,EAAOQ,GAInB,SAASG,EACPX,EACAQ,GAEA,OAAOR,EAAMwM,cAAchM,EAAQvB,WCzqBrC,SAAS8a,EAA+BjZ,GACtC,OAAOA,EAASF,MAAMiR,SAGxB,SAASmI,EAA4Bha,GACnC,MAA8B,YAAvBA,EAAMY,MAAMM,kDC/Cd,cAKGkT,EAoBR5W,YACE+R,EACA/O,GAOM+O,MAAAA,EAAQ/O,GAGNgU,cACRvQ,MAAMuQ,cACDyF,KAAAA,cAAgBtc,KAAKsc,cAAcrc,KAAKD,MACxCuc,KAAAA,kBAAoBvc,KAAKuc,kBAAkBtc,KAAKD,MAGvDwM,WACE3J,EAMA0U,GAEAjR,MAAMkG,WACJ,IACK3J,EACH6N,SAAUgE,KAEZ6C,GAIJY,oBACEtV,GAQA,OADAA,EAAQ6N,SAAWgE,IACZpO,MAAM6R,oBAAoBtV,GAMnCyZ,eAActM,UAAEA,KAAcnN,GAAkC,IAG9D,OAAO7C,KAAKyP,MAAM,IACb5M,EACH4K,KAAM,CACJwH,UAAW,CAAEE,UAAW,UAAWnF,UAAAA,MAKzCuM,mBAAkBvM,UAChBA,KACGnN,GACyB,IAG5B,OAAO7C,KAAKyP,MAAM,IACb5M,EACH4K,KAAM,CACJwH,UAAW,CAAEE,UAAW,WAAYnF,UAAAA,MAKhCqI,aACRhW,EACAQ,GAM4C,IAAA2Z,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACtC,MAAA5Z,MAAEA,GAAUZ,EAEX,MAAA,IADQiE,MAAM+R,aAAahW,EAAOQ,GAGvCyZ,cAAetc,KAAKsc,cACpBC,kBAAmBvc,KAAKuc,kBACxBlG,YAAaA,EAAYxT,EAAD,OAAA2Z,EAAUvZ,EAAM4J,WAAhB,EAAU2P,EAAYlH,OAC9CiB,gBAAiBA,EAAgB1T,EAAD,OAAA4Z,EAAUxZ,EAAM4J,WAAhB,EAAU4P,EAAYnH,OACtDJ,mBACwB,aAAtBjS,EAAMT,aACoC,aAA1C,OAAAS,EAAAA,EAAMqK,YAAsB6H,OAA5BwH,EAAAD,EAAiBzH,gBAAjB,EAA4BE,EAAAA,WAC9BC,uBACwB,aAAtBnS,EAAMT,aACoC,cAA1C,OAAAS,EAAAA,EAAMqK,YAAN,OAAAuP,EAAAD,EAAiB3H,gBAAjB,EAAA4H,EAA4B1H,mDC3H7B,cAKGvV,EAeRC,YACE+R,EACA/O,GAEAyD,QAEKsL,KAAAA,OAASA,EACTpF,KAAAA,WAAW3J,GAChB7C,KAAK6W,cACL7W,KAAK6X,eAGGhB,cACHiG,KAAAA,OAAS9c,KAAK8c,OAAO7c,KAAKD,MAC1BuO,KAAAA,MAAQvO,KAAKuO,MAAMtO,KAAKD,MAG/BwM,WACE3J,GAEKA,KAAAA,QAAU7C,KAAK4R,OAAO0C,uBAAuBzR,GAG1CtC,gBACoB,IAAAwc,EAAvB/c,KAAKF,UAAUW,SAClB,OAAAsc,EAAA/c,KAAKgd,kBAALD,EAAsBxN,eAAevP,OAIzCmU,iBAAiBhD,GACV0G,KAAAA,eAGL,MAAMN,EAA+B,CACnCzX,WAAW,GAGO,YAAhBqR,EAAO7O,KACTiV,EAAcrO,WAAY,EACD,UAAhBiI,EAAO7O,OAChBiV,EAAcnO,SAAU,GAGrBkG,KAAAA,OAAOiI,GAGd3I,mBAME,OAAO5O,KAAKsY,cAGd/J,QACOyO,KAAAA,qBAAkBlW,EACvB9G,KAAK6X,eACL7X,KAAKsP,OAAO,CAAExP,WAAW,IAG3Bgd,OACE/J,EACAlQ,GAgBA,OAdKoa,KAAAA,cAAgBpa,EAEjB7C,KAAKgd,iBACPhd,KAAKgd,gBAAgBzN,eAAevP,MAGtCA,KAAKgd,gBAAkBhd,KAAK4R,OAAOsL,mBAAmBvL,MAAM3R,KAAK4R,OAAQ,IACpE5R,KAAK6C,QACRkQ,eACuB,IAAdA,EAA4BA,EAAY/S,KAAK6C,QAAQkQ,YAGhE/S,KAAKgd,gBAAgB3N,YAAYrP,MAE1BA,KAAKgd,gBAAgBtK,UAGtBmF,eACA5U,MAAAA,EAAQjD,KAAKgd,gBACfhd,KAAKgd,gBAAgB/Z,MNkNpB,CACLuN,aAAS1J,EACT+F,UAAM/F,EACN8C,MAAO,KACP7B,aAAc,EACdmM,UAAU,EACV3Q,OAAQ,OACRwP,eAAWjM,GMtNL3C,EAKF,IACClB,EACH6X,UAA4B,YAAjB7X,EAAMM,OACjBgX,UAA4B,YAAjBtX,EAAMM,OACjBwX,QAA0B,UAAjB9X,EAAMM,OACf4Z,OAAyB,SAAjBla,EAAMM,OACduZ,OAAQ9c,KAAK8c,OACbvO,MAAOvO,KAAKuO,OAGT+J,KAAAA,cAAgBnU,EAQfmL,OAAOzM,GACbgI,EAAcK,OAAM,KAGO,IAAAkS,EAAAC,EAAAC,EAAAC,EADrB,GAAAvd,KAAKid,cACHpa,GAAAA,EAAQqG,UAER,OADFkU,GAAAC,EAAArd,KAAKid,eAAc/T,YACjBkU,EAAA1X,KAAA2X,EAAArd,KAAKsY,cAAczL,KACnB7M,KAAKsY,cAAcvF,UACnB/S,KAAKsY,cAAc9H,gBAErB8M,GAAAC,EAAAvd,KAAKid,eAActJ,qBACjB3T,KAAKsY,cAAczL,KACnB,KACA7M,KAAKsY,cAAcvF,UACnB/S,KAAKsY,cAAc9H,cAEhB,GAAI3N,EAAQuG,QAAS,CAAA,IAAAoU,EAAAC,EAAAC,EAAAC,EAExB,OADFH,GAAAC,EAAAzd,KAAKid,eAAc7T,UACjBoU,EAAA9X,KAAA+X,EAAAzd,KAAKsY,cAAc1O,MACnB5J,KAAKsY,cAAcvF,UACnB/S,KAAKsY,cAAc9H,gBAErBkN,GAAAC,EAAA3d,KAAKid,eAActJ,0BACjB7M,EACA9G,KAAKsY,cAAc1O,MACnB5J,KAAKsY,cAAcvF,UACnB/S,KAAKsY,cAAc9H,SAMrB3N,EAAQ/C,WACVE,KAAKF,UAAUoH,SAAQhH,IACrBA,EAASF,KAAKsY,yCChLjB,cAA8B1Y,EAOnCC,YAAY+R,EAAqBH,GAC/BnL,QAEKsL,KAAAA,OAASA,EACTH,KAAAA,QAAU,GACVtN,KAAAA,OAAS,GACTsI,KAAAA,UAAY,GACZmR,KAAAA,aAAe,GAEhBnM,GACGoM,KAAAA,WAAWpM,GAIVrR,cACsB,IAA1BJ,KAAKF,UAAUW,QACjBT,KAAKyM,UAAUvF,SAAQsH,IACrBA,EAASzO,WAAUoE,IACjBnE,KAAK8d,SAAStP,EAAUrK,SAMtB5D,gBACHP,KAAKF,UAAUW,QAClBT,KAAK4L,UAITA,UACO9L,KAAAA,UAAY,GACjBE,KAAKyM,UAAUvF,SAAQsH,IACrBA,EAAS5C,aAIbiS,WACEpM,EACA8F,GAEK9F,KAAAA,QAAUA,EAEf5G,EAAcK,OAAM,KACZ6S,MAAAA,EAAgB/d,KAAKyM,UAErBuR,EAAqBhe,KAAKie,sBAAsBje,KAAKyR,SAG3DuM,EAAmB9W,SAAQgX,GACzBA,EAAM1P,SAAShC,WAAW0R,EAAMC,sBAAuB5G,KAGnD6G,MAAAA,EAAeJ,EAAmBK,KAAIH,GAASA,EAAM1P,WACrD8P,EAAkBva,OAAOwa,YAC7BH,EAAaC,KAAI7P,GAAY,CAACA,EAAS3L,QAAQF,UAAW6L,MAEtDgQ,EAAYJ,EAAaC,KAAI7P,GACjCA,EAASI,qBAGL6P,EAAiBL,EAAa5Z,MAClC,CAACgK,EAAUkQ,IAAUlQ,IAAauP,EAAcW,MAE9CX,EAActd,SAAW2d,EAAa3d,QAAWge,KAIhDhS,KAAAA,UAAY2R,EACZR,KAAAA,aAAeU,EACfna,KAAAA,OAASqa,EAETxe,KAAKQ,iBAIVQ,EAAW+c,EAAeK,GAAclX,SAAQsH,IAC9CA,EAAS5C,aAGX5K,EAAWod,EAAcL,GAAe7W,SAAQsH,IAC9CA,EAASzO,WAAUoE,IACjBnE,KAAK8d,SAAStP,EAAUrK,SAI5BnE,KAAKsP,cAITV,mBACE,OAAO5O,KAAKmE,OAGdgU,oBAAoB1G,GAClB,OAAOzR,KAAKie,sBAAsBxM,GAAS4M,KAAIH,GAC7CA,EAAM1P,SAAS2J,oBAAoB+F,EAAMC,yBAIrCF,sBACNxM,GAEMsM,MAAAA,EAAgB/d,KAAKyM,UACrB0R,EAAwB1M,EAAQ4M,KAAIxb,GACxC7C,KAAK4R,OAAOG,oBAAoBlP,KAG5B8b,EAA0CR,EAAsBS,SACpEhG,IACE,MAAMsF,EAAQH,EAAchP,MAC1BP,GAAYA,EAAS3L,QAAQF,YAAciW,EAAiBjW,YAE1Dub,OAAS,MAATA,EACK,CAAC,CAAEC,sBAAuBvF,EAAkBpK,SAAU0P,IAExD,MAILW,EAAqBF,EAAkBN,KAC3CH,GAASA,EAAMC,sBAAsBxb,YAEjCmc,EAAmBX,EAAsB9d,QAC7CuY,IACGiG,EAAmBxX,SAASuR,EAAiBjW,aAG5Coc,EAAqBhB,EAAc1d,QACvC2e,IACGL,EAAkBna,MAAK0Z,GAASA,EAAM1P,WAAawQ,MAGlDC,EAAepc,IACb+V,MAAAA,EAAmB5Y,KAAK4R,OAAOG,oBAAoBlP,GACnDqc,EAAkBlf,KAAK4d,aAAahF,EAAiBjW,WACpDuc,OAAAA,MAAAA,EAAAA,EAAmB,IAAIzI,EAAczW,KAAK4R,OAAQgH,IAGrDuG,EAA6CL,EAAiBT,KAClE,CAACxb,EAAS6b,KACJ7b,GAAAA,EAAQyX,iBAAkB,CAE5B,MAAM8E,EAAyBL,EAAmBL,GAC9CU,QAA2BtY,IAA3BsY,EACK,MAAA,CACLjB,sBAAuBtb,EACvB2L,SAAU4Q,GAIT,MAAA,CACLjB,sBAAuBtb,EACvB2L,SAAUyQ,EAAYpc,OAYrB8b,OAAAA,EACJU,OAAOF,GACPlb,MATiC,CAClCI,EACAC,IAEA6Z,EAAsBhd,QAAQkD,EAAE8Z,uBAChCA,EAAsBhd,QAAQmD,EAAE6Z,yBAO5BL,SAAStP,EAAyBrK,GAClCua,MAAAA,EAAQ1e,KAAKyM,UAAUtL,QAAQqN,IACtB,IAAXkQ,IACGva,KAAAA,OhBpGJ,SAAsBO,EAAYga,EAAe5d,GACtD,MAAMkE,EAAON,EAAM4a,MAAM,GAEzB,OADAta,EAAK0Z,GAAS5d,EACPkE,EgBiGWua,CAAUvf,KAAKmE,OAAQua,EAAOva,GAC5CnE,KAAKsP,UAIDA,SACNzE,EAAcK,OAAM,KAClBlL,KAAKF,UAAUoH,SAAQhH,IACrBA,EAASF,KAAKmE,6CChJf,MAULtE,YAAY2I,EAA4B,IACjCgX,KAAAA,WAAahX,EAAOgX,YAAc,IAAIhO,EACtCiB,KAAAA,cAAgBjK,EAAOiK,eAAiB,IAAI2B,EACjDpU,KAAK2M,OAASnE,EAAOmE,QAAUhC,EAC/B3K,KAAKuM,eAAiB/D,EAAO+D,gBAAkB,GAC1CkT,KAAAA,cAAgB,GAChBC,KAAAA,iBAAmB,GAG1BC,QACE3f,KAAK4f,iBAAmBvZ,EAAatG,WAAU,KACzCsG,EAAac,cACfnH,KAAKwU,wBACAgL,KAAAA,WAAWhZ,cAGpBxG,KAAK6f,kBAAoBtY,EAAcxH,WAAU,KAC3CwH,EAAcI,aAChB3H,KAAKwU,wBACAgL,KAAAA,WAAWhY,eAKtBsY,UAAgB,IAAAC,EAAAC,EACd,OAAAD,EAAA/f,KAAK4f,mBAALG,EAAAra,KAAA1F,MACA,OAAAggB,EAAAhgB,KAAK6f,oBAALG,EAAAta,KAAA1F,MAKF6a,WAAWjZ,EAAgCC,GACnC,MAACO,GAAWF,EAAgBN,EAAMC,GAExC,OADAO,EAAQI,YAAc,WACfxC,KAAKwf,WAAWnN,QAAQjQ,GAAS3B,OAG1Cwf,WAAW7d,GACT,OAAOpC,KAAKyS,cAAcJ,QAAQ,IAAKjQ,EAASgB,UAAU,IAAQ3C,OAGpEyf,aACEle,EACAI,GACmB,IAAA+d,EACnB,OAAA,OAAAA,EAAOngB,KAAKwf,WAAWzQ,KAAY/M,EAAUI,SAA7C,EAAO+d,EAAgDld,MAAM4J,KAK/DuT,eACEC,GAEO,OAAArgB,KAAKoY,gBACT/F,QAAQgO,GACRhC,KAAI,EAAGrc,SAAAA,EAAUiB,MAAAA,KAET,CAACjB,EADKiB,EAAM4J,QAKzByT,aACEte,EACAue,EACA1d,GAEMR,MAAAA,EAAQrC,KAAKwf,WAAWzQ,KAAY/M,GAEpC6K,EjB3DH,SACL0T,EACAC,GAEO,MAAmB,mBAAZD,EACTA,EAAgDC,GACjDD,EiBqDWE,CAAiBF,EADhB,MAAGle,OAAH,EAAGA,EAAOY,MAAM4J,MAG9B,QAAoB,IAATA,EACT,OAGF,MAAM6T,EAAgB/e,EAAeK,GAC/B4W,EAAmB5Y,KAAK+R,oBAAoB2O,GAClD,OAAO1gB,KAAKwf,WACT7N,MAAM3R,KAAM4Y,GACZjL,QAAQd,EAAM,IAAKhK,EAASqL,QAAQ,IAezCyS,eACEN,EACAE,EACA1d,GAEA,OAAOgI,EAAcK,OAAM,IACzBlL,KAAKoY,gBACF/F,QAAQgO,GACRhC,KAAI,EAAGrc,SAAAA,KAAe,CACrBA,EACAhC,KAAKsgB,aAAoBte,EAAUue,EAAS1d,QAKpD+d,cACE5e,EACAI,GACuC,IAAAye,EAChC,OAAA,OAAAA,EAAA7gB,KAAKwf,WAAWzQ,KAAoB/M,EAAUI,SAA9C,EAAAye,EAAwD5d,MAKjE6d,cAAclf,EAAgCC,GACtC,MAACO,GAAWF,EAAgBN,EAAMC,GAClC2d,EAAaxf,KAAKwf,WACxB3U,EAAcK,OAAM,KAClBsU,EAAWnN,QAAQjQ,GAAS8E,SAAQ7E,IAClCmd,EAAW9R,OAAOrL,SAcxB0e,aACEnf,EACAC,EACAC,GAEA,MAAOM,EAASS,GAAWX,EAAgBN,EAAMC,EAAMC,GACjD0d,EAAaxf,KAAKwf,WAElBwB,EAAsC,CAC1C1e,KAAM,YACHF,GAGL,OAAOyI,EAAcK,OAAM,KACzBsU,EAAWnN,QAAQjQ,GAAS8E,SAAQ7E,IAClCA,EAAMkM,WAEDvO,KAAKihB,eAAeD,EAAgBne,MAU/Cqe,cACEtf,EACAC,EACAC,GAEA,MAAOM,EAASkI,EAAgB,IAAMpI,EAAgBN,EAAMC,EAAMC,QAE9B,IAAzBwI,EAAclC,SACvBkC,EAAclC,QAAS,GAGnB+Y,MAAAA,EAAWtW,EAAcK,OAAM,IACnClL,KAAKwf,WAAWnN,QAAQjQ,GAASic,KAAIhc,GAASA,EAAMgI,OAAOC,OAG7D,OAAOzE,QAAQub,IAAID,GAAUjb,KAAKtF,GAAMiJ,MAAMjJ,GAYhDygB,kBACEzf,EACAC,EACAC,GAEA,MAAOM,EAASS,GAAWX,EAAgBN,EAAMC,EAAMC,GAEvD,OAAO+I,EAAcK,OAAM,KAAM,IAAAoW,EAAAC,EAK/B,GAJK/B,KAAAA,WAAWnN,QAAQjQ,GAAS8E,SAAQ7E,IACvCA,EAAMmN,gBAGoB,SAAxBpN,EAAQof,YACH3b,OAAAA,QAAQC,UAEjB,MAAMkb,EAAsC,IACvC5e,EACHE,KAA6C,SAAhBF,SAAvBA,EAAQof,aAAepf,EAAAA,EAAQE,MAAQgf,EAAA,UAE/C,OAAOthB,KAAKihB,eAAeD,EAAgBne,MAa/Coe,eACErf,EACAC,EACAC,GAEA,MAAOM,EAASS,GAAWX,EAAgBN,EAAMC,EAAMC,GAEjDqf,EAAWtW,EAAcK,OAAM,IACnClL,KAAKwf,WACFnN,QAAQjQ,GACR/B,QAAOgC,IAAUA,EAAMqM,eACvB2P,KAAIhc,IAAK,IAAAof,EACRpf,OAAAA,EAAMoN,WAAM3I,EAAW,IAClBjE,EACHqM,uBAAa,MAAErM,OAAF,EAAEA,EAASqM,kBACxBzB,KAAM,CAAEuH,YAAa5S,EAAQ4S,oBAKjClM,IAAAA,EAAUjD,QAAQub,IAAID,GAAUjb,KAAKtF,GAMzC,OAJI,MAACiC,GAAAA,EAASiW,eACZhQ,EAAUA,EAAQe,MAAMjJ,IAGnBkI,EA8BT4Y,WAME9f,EACAC,EAGAC,GAEM4e,MAAAA,EAAgB/e,EAAeC,EAAMC,EAAMC,GAC3C8W,EAAmB5Y,KAAK+R,oBAAoB2O,QAGZ,IAA3B9H,EAAiB5O,QAC1B4O,EAAiB5O,OAAQ,GAGrB3H,MAAAA,EAAQrC,KAAKwf,WAAW7N,MAAM3R,KAAM4Y,GAEnCvW,OAAAA,EAAMwM,cAAc+J,EAAiBtX,WACxCe,EAAMoN,MAAMmJ,GACZ/S,QAAQC,QAAQzD,EAAMY,MAAM4J,MA8BlC8U,cAME/f,EACAC,EAGAC,GAEA,OAAO9B,KAAK0hB,WAAW9f,EAAaC,EAAaC,GAC9CoE,KAAKtF,GACLiJ,MAAMjJ,GA8BXghB,mBAMEhgB,EAGAC,EAGAC,GAEM4e,MAAAA,EAAgB/e,EAAeC,EAAMC,EAAMC,GAMjD,OALA4e,EAAchQ,SAAWgE,IAKlB1U,KAAK0hB,WAAWhB,GA8BzBmB,sBAMEjgB,EAGAC,EAGAC,GAEA,OAAO9B,KAAK4hB,mBAAmBhgB,EAAaC,EAAaC,GACtDoE,KAAKtF,GACLiJ,MAAMjJ,GAGX4T,wBACE,OAAOxU,KAAKyS,cAAc+B,wBAG5B4D,gBACE,OAAOpY,KAAKwf,WAGdtC,mBACE,OAAOld,KAAKyS,cAGdX,YACE,OAAO9R,KAAK2M,OAGdmV,oBACE,OAAO9hB,KAAKuM,eAGdwV,kBAAkBlf,GACX0J,KAAAA,eAAiB1J,EAGxBmf,iBACEhgB,EACAa,GAEMsB,MAAAA,EAASnE,KAAKyf,cAAc1Q,MAChCzO,GAAKgD,EAAatB,KAAcsB,EAAahD,EAAE0B,YAE7CmC,EACFA,EAAOoI,eAAiB1J,EAEnB4c,KAAAA,cAActf,KAAK,CAAE6B,SAAAA,EAAUuK,eAAgB1J,IAIxDmP,iBACEhQ,GAEI,IAACA,EACH,OAIF,MAAMigB,EAAwBjiB,KAAKyf,cAAc1Q,MAAKzO,GACpDwC,EAAgBd,EAAU1B,EAAE0B,YAqB9B,OAAA,MAAOigB,OAAP,EAAOA,EAAuB1V,eAGhC2V,oBACE7e,EACAR,GAEMsB,MAAAA,EAASnE,KAAK0f,iBAAiB3Q,MACnCzO,GAAKgD,EAAaD,KAAiBC,EAAahD,EAAE+C,eAEhDc,EACFA,EAAOoI,eAAiB1J,EAEnB6c,KAAAA,iBAAiBvf,KAAK,CAAEkD,YAAAA,EAAakJ,eAAgB1J,IAI9D0R,oBACElR,GAEI,IAACA,EACH,OAIF,MAAM4e,EAAwBjiB,KAAK0f,iBAAiB3Q,MAAKzO,GACvDwC,EAAgBO,EAAa/C,EAAE+C,eAqBjC,OAAA,MAAO4e,OAAP,EAAOA,EAAuB1V,eAGhCwF,oBAOElP,GAgBA,GAAA,MAAIA,GAAAA,EAASsf,WACX,OAAOtf,EAST,MAAM+V,EAAmB,IACpB5Y,KAAKuM,eAAekF,WACpBzR,KAAKgS,uBAAiBnP,SAAAA,EAASb,aAC/Ba,EACHsf,YAAY,GAmBd,OAhBKvJ,EAAiBjW,WAAaiW,EAAiB5W,WAClD4W,EAAiBjW,UAAYC,EAC3BgW,EAAiB5W,SACjB4W,SAK+C,IAAxCA,EAAiBzB,qBAC1ByB,EAAiBzB,mBACkB,WAAjCyB,EAAiB1Q,kBAE4B,IAAtC0Q,EAAiB+C,mBAC1B/C,EAAiB+C,mBAAqB/C,EAAiBuD,UAGlDvD,EASTtE,uBACEzR,GAEA,OAAA,MAAIA,GAAAA,EAASsf,WACJtf,EAEF,IACF7C,KAAKuM,eAAe8H,aACpBrU,KAAKuU,0BAAoB1R,SAAAA,EAASQ,gBAClCR,EACHsf,YAAY,GAIhBhQ,QACOqN,KAAAA,WAAWrN,QACXM,KAAAA,cAAcN,wCJ5nBhB,SACLP,EACA/O,EAA4B,IAEtBwR,MAAAA,EAAkC,GAClC5C,EAA6B,GAEnC,IAAmC,IAA/B5O,EAAQuf,mBAA8B,CACxC,MAAMC,EACJxf,EAAQwf,yBAA2BjG,EAErCxK,EACGsL,mBACA9K,SACAlL,SAAQ/D,IACHkf,EAAwBlf,IAC1BkR,EAAUlU,KA3CpB,SAA2BgD,GAClB,MAAA,CACLE,YAAaF,EAASN,QAAQQ,YAC9BJ,MAAOE,EAASF,OAwCKqf,CAAkBnf,OAKzC,IAAiC,IAA7BN,EAAQ0f,iBAA4B,CACtC,MAAMC,EACJ3f,EAAQ2f,sBAAwBnG,EAElCzK,EACGwG,gBACAhG,SACAlL,SAAQ7E,IACHmgB,EAAqBngB,IACvBoP,EAAQtR,KA9ClB,SAAwBkC,GACf,MAAA,CACLY,MAAOZ,EAAMY,MACbjB,SAAUK,EAAML,SAChBW,UAAWN,EAAMM,WA0CE8f,CAAepgB,OAK7B,MAAA,CAAEgS,UAAAA,EAAW5C,QAAAA,gDAGf,SACLG,EACA8Q,EACA7f,GAEI,GAA2B,iBAApB6f,GAAoD,OAApBA,EACzC,OAGF,MAAMjQ,EAAgBb,EAAOsL,mBACvBsC,EAAa5N,EAAOwG,gBAGpB/D,EAAaqO,EAAoCrO,WAAa,GAE9D5C,EAAWiR,EAAoCjR,SAAW,GAEhE4C,EAAUnN,SAAQyb,IAAsB,IAAAC,EACtCnQ,EAAcd,MACZC,EACA,IACE,MAAG/O,GAAA,OAAH+f,EAAG/f,EAAS0J,qBAAZ,EAAGqW,EAAyBvO,UAC5BhR,YAAasf,EAAmBtf,aAElCsf,EAAmB1f,UAIvBwO,EAAQvK,SAAQ2b,IAAmB,IAAAC,EAC3BzgB,MAAAA,EAAQmd,EAAWnP,IAAIwS,EAAgBlgB,WAGzCN,EACEA,EAAMY,MAAMiK,cAAgB2V,EAAgB5f,MAAMiK,eACpD7K,EAAM8L,SAAS0U,EAAgB5f,OAMnCuc,EAAW7N,MACTC,EACA,IACE,MAAG/O,GAAA,OAAHigB,EAAGjgB,EAAS0J,qBAAZ,EAAGuW,EAAyBrR,QAC5BzP,SAAU6gB,EAAgB7gB,SAC1BW,UAAWkgB,EAAgBlgB,WAE7BkgB,EAAgB5f,0CbwOf,SAAiBnC,GACfA,OAAAA,aAAiBoQ"}