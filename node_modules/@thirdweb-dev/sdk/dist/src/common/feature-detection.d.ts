import { BaseContract, ethers, utils } from "ethers";
import { ContractWrapper } from "../core/classes/contract-wrapper";
import { IStorage } from "../core";
import { AbiFunction, AbiSchema, PublishedMetadata } from "../schema/contracts/custom";
import { z } from "zod";
import { Feature, FeatureName, FeatureWithEnabled } from "../constants/contract-features";
/**
 * Type guards a contract to a known type if it matches the corresponding interface
 * @internal
 * @param contractWrapper
 * @param interfaceToMatch
 */
export declare function implementsInterface<C extends BaseContract>(contractWrapper: ContractWrapper<BaseContract>, interfaceToMatch: utils.Interface): contractWrapper is ContractWrapper<C>;
/**
 * @internal
 */
export declare function extractConstructorParams(metadataUri: string, storage: IStorage): Promise<{
    [x: string]: any;
    name: string;
    type: string;
}[]>;
/**
 * @internal
 * @param metadataUri
 * @param storage
 */
export declare function extractFunctions(metadataUri: string, storage: IStorage): Promise<AbiFunction[]>;
/**
 *
 * @param abi
 * @returns
 * @internal
 */
export declare function extractConstructorParamsFromAbi(abi: z.input<typeof AbiSchema>): {
    [x: string]: any;
    name: string;
    type: string;
}[];
/**
 * @internal
 * @param abi
 */
export declare function extractFunctionsFromAbi(abi: z.input<typeof AbiSchema>): AbiFunction[];
/**
 * @internal
 * @param address
 * @param provider
 */
export declare function resolveContractUriFromAddress(address: string, provider: ethers.providers.Provider): Promise<string>;
/**
 * @internal
 * @param address
 * @param provider
 * @param storage
 */
export declare function fetchContractMetadataFromAddress(address: string, provider: ethers.providers.Provider, storage: IStorage): Promise<PublishedMetadata>;
/**
 * @internal
 * @param metadataUri
 * @param storage
 */
export declare function fetchContractMetadata(metadataUri: string, storage: IStorage): Promise<PublishedMetadata>;
/**
 * Processes ALL supported features and sets whether the passed in abi supports each individual feature
 * @internal
 * @param abi
 * @param features
 * @returns the nested struct of all features and whether they're detected in the abi
 */
export declare function detectFeatures(abi: z.input<typeof AbiSchema>, features?: Record<string, Feature>): Record<string, FeatureWithEnabled>;
/**
 * Checks whether the given ABI supports a given feature
 * @internal
 * @param abi
 * @param featureName
 */
export declare function isFeatureEnabled(abi: z.input<typeof AbiSchema>, featureName: FeatureName): boolean;
/**
 * Type guard for contractWrappers depending on passed feature name
 * @internal
 * @param contractWrapper
 * @param featureName
 */
export declare function detectContractFeature<T extends BaseContract>(contractWrapper: ContractWrapper<BaseContract>, featureName: FeatureName): contractWrapper is ContractWrapper<T>;
