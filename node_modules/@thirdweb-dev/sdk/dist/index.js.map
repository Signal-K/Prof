{"version":3,"sources":["../src/index.ts","../src/schema/shared.ts","../src/common/utils.ts","../src/schema/contracts/common/index.ts","../src/schema/contracts/common/claim-conditions.ts","../src/constants/chains.ts","../src/constants/currency.ts","../src/schema/contracts/common/currency.ts","../src/schema/contracts/common/snapshots.ts","../src/schema/contracts/common/signature.ts","../src/schema/tokens/common/index.ts","../src/schema/tokens/common/properties.ts","../src/common/signature-minting.ts","../src/schema/tokens/token.ts","../src/schema/tokens/edition.ts","../src/common/error.ts","../src/constants/urls.ts","../src/core/helpers/storage.ts","../src/core/classes/ipfs-storage.ts","../src/core/classes/contract-encoder.ts","../src/common/snapshots.ts","../src/common/role.ts","../src/common/feature-detection.ts","../src/schema/contracts/custom.ts","../src/constants/erc721-features.ts","../src/constants/erc20-features.ts","../src/constants/erc1155-features.ts","../src/constants/thirdweb-features.ts","../src/constants/contract-features.ts","../src/constants/addresses.ts","../src/constants/chainlink.ts","../src/constants/contract.ts","../src/constants/events.ts","../src/core/classes/contract-metadata.ts","../src/core/classes/contract-roles.ts","../src/core/classes/contract-royalty.ts","../src/core/classes/contract-sales.ts","../src/core/classes/drop-claim-conditions.ts","../src/core/classes/contract-wrapper.ts","../src/core/classes/rpc-connection-handler.ts","../src/schema/sdk-options.ts","../src/common/forwarder.ts","../typechain/factories/Forwarder__factory.ts","../typechain/factories/IERC20__factory.ts","../typechain/factories/IThirdwebContract__factory.ts","../typechain/factories/TWFactory__factory.ts","../typechain/factories/TWRegistry__factory.ts","../src/common/permit.ts","../src/common/sign.ts","../src/common/gas-price.ts","../src/common/currency.ts","../src/enums/marketplace/ListingType.ts","../src/enums/vote/ProposalState.ts","../src/enums/vote/Vote.ts","../src/enums/ClaimEligibility.ts","../src/common/claim-conditions.ts","../src/schema/contracts/drop-erc721.ts","../src/schema/contracts/drop-erc1155.ts","../src/schema/contracts/marketplace.ts","../src/schema/contracts/packs.ts","../src/schema/contracts/splits.ts","../src/schema/contracts/token-erc20.ts","../src/schema/contracts/token-erc721.ts","../src/schema/contracts/token-erc1155.ts","../src/schema/contracts/vote.ts","../src/core/classes/drop-erc1155-claim-conditions.ts","../src/core/classes/drop-erc1155-history.ts","../src/core/classes/erc-20.ts","../src/core/classes/erc-20-batch-mintable.ts","../src/core/classes/erc-20-mintable.ts","../src/core/classes/erc-20-history.ts","../src/core/classes/erc-20-signature-minting.ts","../src/core/classes/erc-721.ts","../src/common/nft.ts","../src/core/classes/erc-721-supply.ts","../src/types/packs.ts","../src/types/QueryParams.ts","../src/core/classes/erc-721-enumerable.ts","../src/core/classes/erc-721-batch-mintable.ts","../src/core/classes/erc-721-mintable.ts","../src/core/classes/erc-721-signature-minting.ts","../src/core/classes/erc-1155.ts","../src/schema/contracts/common/airdrop.ts","../src/core/classes/erc-1155-enumerable.ts","../src/core/classes/erc-1155-batch-mintable.ts","../src/core/classes/erc-1155-mintable.ts","../src/core/classes/erc-1155-signature-minting.ts","../src/core/classes/marketplace-direct.ts","../src/common/marketplace.ts","../src/core/classes/marketplace-auction.ts","../src/core/classes/registry.ts","../src/core/classes/factory.ts","../src/core/classes/contract-interceptor.ts","../src/core/classes/contract-events.ts","../src/core/classes/contract-platform-fee.ts","../src/contracts/nft-collection.ts","../src/core/classes/gas-cost-estimator.ts","../src/core/classes/contract-analytics.ts","../src/contracts/edition-drop.ts","../src/contracts/edition.ts","../src/contracts/token.ts","../src/contracts/token-drop.ts","../src/schema/contracts/drop-erc20.ts","../src/contracts/vote.ts","../src/contracts/split.ts","../src/contracts/marketplace.ts","../src/contracts/pack.ts","../src/contracts/nft-drop.ts","../src/core/classes/delayed-reveal.ts","../src/core/classes/contract-published-metadata.ts","../src/contracts/smart-contract.ts","../src/contracts/maps.ts","../src/core/classes/contract-deployer.ts","../src/core/wallet/UserWallet.ts","../src/core/sdk.ts","../src/core/classes/contract-publisher.ts"],"sourcesContent":["import \"cross-fetch/polyfill\";\n\nexport type { ContractType, NetworkOrSignerOrProvider } from \"./core/types\";\nexport type {\n  NFTMetadataInput,\n  NFTMetadataOwner,\n  NFTMetadata,\n} from \"./schema/tokens/common\";\n\nexport type { Role } from \"./common/role\";\n\nexport { CommonContractSchema } from \"./schema/contracts/common\";\nexport * from \"./schema/contracts/common/claim-conditions\";\nexport * from \"./schema/tokens/common/properties\";\nexport * from \"./constants/chains\";\nexport * from \"./schema/tokens/token\";\nexport * from \"./schema/tokens/edition\";\nexport * from \"./schema/contracts/common\";\nexport type { SDKOptions, SDKOptionsSchema } from \"./schema/sdk-options\";\n\nexport * from \"./core\";\nexport * from \"./types\";\nexport * from \"./enums\";\nexport * from \"./common\";\nexport * from \"./constants\";\nexport * from \"./contracts\";\n","import { BigNumber, utils } from \"ethers\";\nimport { z } from \"zod\";\nimport { Json } from \"../core/types\";\nimport { isBrowser } from \"../common/utils\";\n\nif (!globalThis.File) {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  globalThis.File = require(\"@web-std/file\").File;\n}\n\nexport const MAX_BPS = 10_000;\n\nconst fileOrBufferUnion = isBrowser()\n  ? ([z.instanceof(File), z.string()] as [\n      z.ZodType<InstanceType<typeof File>>,\n      z.ZodString,\n    ])\n  : ([z.instanceof(Buffer), z.string()] as [\n      z.ZodTypeAny, // @fixme, this is a hack to make browser happy for now\n      z.ZodString,\n    ]);\n\nexport const FileBufferOrStringSchema = z.union(fileOrBufferUnion);\nexport type FileBufferOrString = z.output<typeof FileBufferOrStringSchema>;\n\nexport const BytesLikeSchema = z.union([z.array(z.number()), z.string()]);\n\nexport const BigNumberSchema = z\n  .union([\n    z.string(),\n    z.number(),\n    z.bigint(),\n    z.custom<BigNumber>((data) => {\n      return BigNumber.isBigNumber(data);\n    }),\n  ])\n  .transform((arg) => BigNumber.from(arg));\n\nexport const BigNumberishSchema = BigNumberSchema.transform((arg) =>\n  arg.toString(),\n);\n\nexport const BasisPointsSchema = z\n  .number()\n  .max(MAX_BPS, \"Cannot exeed 100%\")\n  .min(0, \"Cannot be below 0%\");\n\nexport const PercentSchema = z\n  .number()\n  .max(100, \"Cannot exeed 100%\")\n  .min(0, \"Cannot be below 0%\");\n\nexport const JsonLiteral = z.union([\n  z.string(),\n  z.number(),\n  z.boolean(),\n  z.null(),\n]);\n\nexport const JsonSchema: z.ZodSchema<Json> = z.lazy(() =>\n  z.union([JsonLiteral, z.array(JsonSchema), z.record(JsonSchema)]),\n);\nexport const JsonObjectSchema = z.record(JsonSchema);\nexport const HexColor = z.union([\n  z\n    .string()\n    .regex(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, \"Invalid hex color\")\n    .transform((val) => val.replace(\"#\", \"\")),\n  z.string().length(0),\n]);\n\nexport const AddressSchema = z.string().refine(\n  (arg) => utils.isAddress(arg),\n  (out) => {\n    return {\n      message: `${out} is not a valid address`,\n    };\n  },\n);\n\nexport const PriceSchema = z\n  .union([\n    z.string().regex(/^([0-9]+\\.?[0-9]*|\\.[0-9]+)$/, \"Invalid price\"),\n    z.number().min(0, \"Price cannot be negative\"),\n  ])\n  .transform((arg) => (typeof arg === \"number\" ? arg.toString() : arg));\n\nexport const RawDateSchema = z.date().transform((i) => {\n  return BigNumber.from(Math.floor(i.getTime() / 1000));\n});\n\n/**\n * Default to now\n */\nexport const StartDateSchema = RawDateSchema.default(new Date(0));\n\n/**\n * Default to 10 years from now\n */\nexport const EndDateSchema = RawDateSchema.default(\n  new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10),\n);\n","/**\n * @internal\n */\nexport const isBrowser = () => typeof window !== \"undefined\";\n\n/**\n * @internal\n */\nexport const isNode = () => !isBrowser();\n","import {\n  AddressSchema,\n  BasisPointsSchema,\n  FileBufferOrStringSchema,\n  JsonSchema,\n} from \"../../shared\";\nimport { z } from \"zod\";\nimport { constants } from \"ethers\";\n\n/**\n * @internal\n */\nexport const CommonContractSchema = z.object({\n  name: z.string(),\n  description: z.string().optional(),\n  image: FileBufferOrStringSchema.optional(),\n  external_link: z.string().url().optional(),\n});\n\n/**\n * @internal\n */\nexport const CommonContractOutputSchema = CommonContractSchema.extend({\n  image: z.string().optional(),\n}).catchall(z.lazy(() => JsonSchema));\n\n/**\n * @internal\n */\nexport const CommonRoyaltySchema = z.object({\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   *\n   *  @internalremarks used by OpenSea \"seller_fee_basis_points\"\n   */\n  seller_fee_basis_points: BasisPointsSchema.default(0),\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   * @internalremarks used by OpenSea \"fee_recipient\"\n   */\n  fee_recipient: AddressSchema.default(constants.AddressZero),\n});\n\n/**\n * @internal\n */\nexport const CommonPrimarySaleSchema = z.object({\n  /**\n   * primary sale recipient address\n   */\n  primary_sale_recipient: AddressSchema,\n});\n\n/**\n * @internal\n */\nexport const CommonPlatformFeeSchema = z.object({\n  /**\n   * platform fee basis points\n   */\n  platform_fee_basis_points: BasisPointsSchema.default(0),\n  /**\n   * platform fee recipient address\n   */\n  platform_fee_recipient: AddressSchema.default(constants.AddressZero),\n});\n\n/**\n * @internal\n */\nexport const CommonTrustedForwarderSchema = z.object({\n  trusted_forwarders: z.array(AddressSchema).default([]),\n});\n\n/**\n * @internal\n */\nexport const CommonSymbolSchema = z.object({\n  symbol: z.string().optional().default(\"\"),\n});\n\nexport * from \"./claim-conditions\";\nexport * from \"./currency\";\nexport * from \"./signature\";\nexport * from \"./snapshots\";\n","import { z } from \"zod\";\nimport { BigNumber, utils } from \"ethers\";\nimport {\n  BigNumberishSchema,\n  BigNumberSchema,\n  BytesLikeSchema,\n  PriceSchema,\n  StartDateSchema,\n} from \"../../shared\";\n\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../constants/currency\";\nimport { CurrencyValueSchema } from \"./currency\";\nimport { SnapshotInputSchema } from \"./snapshots\";\n\n/**\n * @internal\n */\nexport const QuantitySchema = z\n  .union([PriceSchema, z.literal(\"unlimited\")])\n  .default(\"unlimited\");\n\n/**\n * @internal\n */\nexport const ClaimConditionInputSchema = z.object({\n  startTime: StartDateSchema,\n  currencyAddress: z.string().default(NATIVE_TOKEN_ADDRESS),\n  price: PriceSchema.default(0),\n  maxQuantity: QuantitySchema,\n  quantityLimitPerTransaction: QuantitySchema,\n  waitInSeconds: BigNumberishSchema.default(0),\n  merkleRootHash: BytesLikeSchema.default(utils.hexZeroPad([0], 32)),\n  snapshot: z.optional(SnapshotInputSchema),\n});\n\n/**\n * @internal\n */\nexport const ClaimConditionInputArray = z.array(ClaimConditionInputSchema);\n\n/**\n * @internal\n */\nexport const PartialClaimConditionInputSchema =\n  ClaimConditionInputSchema.partial();\n\n/**\n * @internal\n */\nexport const ClaimConditionOutputSchema = ClaimConditionInputSchema.extend({\n  availableSupply: QuantitySchema,\n  currentMintSupply: QuantitySchema,\n  currencyMetadata: CurrencyValueSchema.default({\n    value: BigNumber.from(\"0\"),\n    displayValue: \"0\",\n    symbol: \"\",\n    decimals: 18,\n    name: \"\",\n  }),\n  price: BigNumberSchema,\n  waitInSeconds: BigNumberSchema,\n  startTime: BigNumberSchema.transform((n) => new Date(n.toNumber() * 1000)),\n});\n","/**\n * @public\n */\nexport enum ChainId {\n  Mainnet = 1,\n  Ropsten = 3,\n  Rinkeby = 4,\n  Goerli = 5,\n  Kovan = 42,\n  BSC = 56,\n  xDai = 100,\n  Polygon = 137,\n  Moonriver = 1285,\n  Mumbai = 80001,\n  Harmony = 1666600000,\n  Localhost = 1337,\n  Hardhat = 31337,\n  Fantom = 250,\n  FantomTestnet = 4002,\n  Avalanche = 43114,\n  AvalancheFujiTestnet = 43113,\n}\n\n/**\n * @public\n */\nexport type SUPPORTED_CHAIN_ID =\n  | ChainId.Mainnet\n  | ChainId.Rinkeby\n  | ChainId.Goerli\n  | ChainId.Mumbai\n  | ChainId.Polygon\n  | ChainId.Fantom\n  | ChainId.FantomTestnet\n  | ChainId.Avalanche\n  | ChainId.AvalancheFujiTestnet;\n\n/**\n * @public\n */\nexport const SUPPORTED_CHAIN_IDS: SUPPORTED_CHAIN_ID[] = [\n  ChainId.Mainnet,\n  ChainId.Rinkeby,\n  ChainId.Goerli,\n  ChainId.Polygon,\n  ChainId.Mumbai,\n  ChainId.Fantom,\n  ChainId.FantomTestnet,\n  ChainId.Avalanche,\n  ChainId.AvalancheFujiTestnet,\n];\n","import { ChainId, SUPPORTED_CHAIN_ID } from \"./chains\";\nimport { NativeToken } from \"../types/currency\";\n\n/**\n * @public\n */\nexport const NATIVE_TOKEN_ADDRESS =\n  \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\";\n\n/**\n * @public\n */\nexport const NATIVE_TOKENS: Record<\n  SUPPORTED_CHAIN_ID | ChainId.Hardhat,\n  NativeToken\n> = {\n  [ChainId.Mainnet]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\",\n    },\n  },\n  [ChainId.Rinkeby]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xc778417E063141139Fce010982780140Aa0cD5Ab\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\",\n    },\n  },\n  [ChainId.Goerli]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x0bb7509324ce409f7bbc4b701f932eaca9736ab7\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\",\n    },\n  },\n  [ChainId.Polygon]: {\n    name: \"Matic\",\n    symbol: \"MATIC\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\",\n      name: \"Wrapped Matic\",\n      symbol: \"WMATIC\",\n    },\n  },\n  [ChainId.Mumbai]: {\n    name: \"Matic\",\n    symbol: \"MATIC\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889\",\n      name: \"Wrapped Matic\",\n      symbol: \"WMATIC\",\n    },\n  },\n  [ChainId.Avalanche]: {\n    name: \"Avalanche\",\n    symbol: \"AVAX\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\",\n      name: \"Wrapped AVAX\",\n      symbol: \"WAVAX\",\n    },\n  },\n  [ChainId.AvalancheFujiTestnet]: {\n    name: \"Avalanche\",\n    symbol: \"AVAX\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xd00ae08403B9bbb9124bB305C09058E32C39A48c\",\n      name: \"Wrapped AVAX\",\n      symbol: \"WAVAX\",\n    },\n  },\n  [ChainId.Fantom]: {\n    name: \"Fantom\",\n    symbol: \"FTM\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83\",\n      name: \"Wrapped Fantom\",\n      symbol: \"WFTM\",\n    },\n  },\n  [ChainId.FantomTestnet]: {\n    name: \"Fantom\",\n    symbol: \"FTM\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xf1277d1Ed8AD466beddF92ef448A132661956621\",\n      name: \"Wrapped Fantom\",\n      symbol: \"WFTM\",\n    },\n  },\n  [ChainId.Hardhat]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x5FbDB2315678afecb367f032d93F642f64180aa3\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\",\n    },\n  },\n};\n\n/**\n * Returns the native token for a given chain\n * @param chainId - the chain id\n * @public\n */\nexport function getNativeTokenByChainId(chainId: ChainId): NativeToken {\n  return NATIVE_TOKENS[chainId as SUPPORTED_CHAIN_ID];\n}\n","import { z } from \"zod\";\nimport { BigNumberSchema } from \"../../shared\";\n\n/**\n * @internal\n */\nexport const CurrencySchema = z.object({\n  name: z.string(),\n  symbol: z.string(),\n  decimals: z.number(),\n});\n\n/**\n * @internal\n */\nexport const CurrencyValueSchema = CurrencySchema.extend({\n  value: BigNumberSchema,\n  displayValue: z.string(),\n});\n","import { z } from \"zod\";\nimport { AddressSchema, PriceSchema } from \"../../shared\";\n\n/**\n * @internal\n */\nexport const MerkleSchema = z.object({\n  merkle: z.record(z.string()).default({}),\n});\n\n/**\n * @internal\n */\nexport const SnapshotAddressInput = z.object({\n  address: AddressSchema,\n  maxClaimable: PriceSchema.default(0),\n});\n\n/**\n * @internal\n */\nexport const SnapshotInputSchema = z.union([\n  z.array(z.string()).transform((strings) =>\n    strings.map((address) =>\n      SnapshotAddressInput.parse({\n        address,\n      }),\n    ),\n  ),\n  z.array(SnapshotAddressInput),\n]);\n\n/**\n * @internal\n */\nexport const SnapshotSchema = z.object({\n  /**\n   * The merkle root\n   */\n  merkleRoot: z.string(),\n  claims: z.array(\n    SnapshotAddressInput.extend({\n      proof: z.array(z.string()),\n    }),\n  ),\n});\n\n/**\n * @internal\n */\nexport const SnapshotInfoSchema = z.object({\n  merkleRoot: z.string(),\n  snapshotUri: z.string(),\n  snapshot: SnapshotSchema,\n});\n","import {\n  BasisPointsSchema,\n  BigNumberishSchema,\n  BigNumberSchema,\n  EndDateSchema,\n  PriceSchema,\n  StartDateSchema,\n} from \"../../shared\";\nimport { z } from \"zod\";\nimport { NFTInputOrUriSchema } from \"../../tokens/common\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../constants/currency\";\nimport { ethers, constants } from \"ethers\";\nimport { resolveOrGenerateId } from \"../../../common/signature-minting\";\n\n/**\n * @internal\n */\nexport const BaseSignaturePayloadInput = z.object({\n  to: z.string().default(constants.AddressZero),\n  price: PriceSchema.default(0),\n  currencyAddress: z.string().default(NATIVE_TOKEN_ADDRESS),\n  mintStartTime: StartDateSchema,\n  mintEndTime: EndDateSchema,\n  uid: z\n    .string()\n    .optional()\n    .transform((arg) => resolveOrGenerateId(arg)),\n  primarySaleRecipient: z.string().default(constants.AddressZero),\n});\n\n/**\n * @internal\n */\nexport const Signature20PayloadInput = BaseSignaturePayloadInput.extend({\n  quantity: PriceSchema,\n});\n\n/**\n * @internal\n */\nexport const Signature20PayloadOutput = Signature20PayloadInput.extend({\n  mintStartTime: BigNumberSchema,\n  mintEndTime: BigNumberSchema,\n});\n\n/**\n * @internal\n */\nexport const Signature721PayloadInput = BaseSignaturePayloadInput.extend({\n  metadata: NFTInputOrUriSchema,\n  royaltyRecipient: z.string().default(constants.AddressZero),\n  royaltyBps: BasisPointsSchema.default(0),\n});\n\n/**\n * @internal\n */\nexport const Signature721PayloadOutput = Signature721PayloadInput.extend({\n  uri: z.string(),\n  royaltyBps: BigNumberSchema,\n  mintStartTime: BigNumberSchema,\n  mintEndTime: BigNumberSchema,\n});\n\n/**\n * @internal\n */\nexport const Signature1155PayloadInput = Signature721PayloadInput.extend({\n  metadata: NFTInputOrUriSchema.default(\"\"),\n  tokenId: BigNumberishSchema.default(ethers.constants.MaxUint256),\n  quantity: BigNumberishSchema,\n});\n\n/**\n * @internal\n */\nexport const Signature1155PayloadOutput = Signature721PayloadOutput.extend({\n  tokenId: BigNumberSchema,\n  quantity: BigNumberSchema,\n});\n\n/**\n * @public\n */\nexport type FilledSignaturePayload20 = z.output<typeof Signature20PayloadInput>;\n/**\n * @public\n */\nexport type PayloadWithUri20 = z.output<typeof Signature20PayloadOutput>;\n/**\n * @public\n */\nexport type PayloadToSign20 = z.input<typeof Signature20PayloadInput>;\n/**\n * @public\n */\nexport type SignedPayload20 = {\n  payload: PayloadWithUri20;\n  signature: string;\n};\n\n/**\n * @public\n */\nexport type FilledSignaturePayload721 = z.output<\n  typeof Signature721PayloadInput\n>;\n/**\n * @public\n */\nexport type PayloadWithUri721 = z.output<typeof Signature721PayloadOutput>;\n/**\n * @public\n */\nexport type PayloadToSign721 = z.input<typeof Signature721PayloadInput>;\n/**\n * @public\n */\nexport type SignedPayload721 = {\n  payload: PayloadWithUri721;\n  signature: string;\n};\n\n/**\n * @public\n */\nexport type FilledSignaturePayload1155 = z.output<\n  typeof Signature1155PayloadInput\n>;\n/**\n * @public\n */\nexport type PayloadWithUri1155 = z.output<typeof Signature1155PayloadOutput>;\n/**\n * @public\n */\nexport type PayloadToSign1155 = z.input<typeof Signature1155PayloadInput>;\n/**\n * @public\n */\nexport type SignedPayload1155 = {\n  payload: PayloadWithUri1155;\n  signature: string;\n};\n\nexport const MintRequest20 = [\n  { name: \"to\", type: \"address\" },\n  { name: \"primarySaleRecipient\", type: \"address\" },\n  { name: \"quantity\", type: \"uint256\" },\n  { name: \"price\", type: \"uint256\" },\n  { name: \"currency\", type: \"address\" },\n  { name: \"validityStartTimestamp\", type: \"uint128\" },\n  { name: \"validityEndTimestamp\", type: \"uint128\" },\n  { name: \"uid\", type: \"bytes32\" },\n];\n\nexport const MintRequest721 = [\n  { name: \"to\", type: \"address\" },\n  { name: \"royaltyRecipient\", type: \"address\" },\n  { name: \"royaltyBps\", type: \"uint256\" },\n  { name: \"primarySaleRecipient\", type: \"address\" },\n  { name: \"uri\", type: \"string\" },\n  { name: \"price\", type: \"uint256\" },\n  { name: \"currency\", type: \"address\" },\n  { name: \"validityStartTimestamp\", type: \"uint128\" },\n  { name: \"validityEndTimestamp\", type: \"uint128\" },\n  { name: \"uid\", type: \"bytes32\" },\n];\n\nexport const MintRequest1155 = [\n  { name: \"to\", type: \"address\" },\n  { name: \"royaltyRecipient\", type: \"address\" },\n  { name: \"royaltyBps\", type: \"uint256\" },\n  { name: \"primarySaleRecipient\", type: \"address\" },\n  { name: \"tokenId\", type: \"uint256\" },\n  { name: \"uri\", type: \"string\" },\n  { name: \"quantity\", type: \"uint256\" },\n  { name: \"pricePerToken\", type: \"uint256\" },\n  { name: \"currency\", type: \"address\" },\n  { name: \"validityStartTimestamp\", type: \"uint128\" },\n  { name: \"validityEndTimestamp\", type: \"uint128\" },\n  { name: \"uid\", type: \"bytes32\" },\n];\n","import { z } from \"zod\";\nimport {\n  BigNumberSchema,\n  FileBufferOrStringSchema,\n  HexColor,\n  JsonSchema,\n} from \"../../shared\";\nimport { OptionalPropertiesInput } from \"./properties\";\n\n/**\n * @internal\n */\nexport const CommonTokenInput = z\n  .object({\n    name: z.string().optional(),\n    description: z.string().nullable().optional(),\n    image: FileBufferOrStringSchema.nullable().optional(),\n    external_url: FileBufferOrStringSchema.nullable().optional(),\n  })\n  .catchall(z.lazy(() => JsonSchema));\n\n/**\n * @internal\n */\nexport const CommonTokenOutput = CommonTokenInput.extend({\n  id: BigNumberSchema,\n  uri: z.string(),\n  image: z.string().nullable().optional(),\n  external_url: z.string().nullable().optional(),\n});\n\n/**\n * @internal\n */\nexport const CommonNFTInput = CommonTokenInput.extend({\n  animation_url: FileBufferOrStringSchema.optional(),\n  background_color: HexColor.optional(),\n  properties: OptionalPropertiesInput,\n  attributes: OptionalPropertiesInput,\n});\n\n/**\n * @internal\n */\nexport const NFTInputOrUriSchema = z.union([CommonNFTInput, z.string()]);\n\n/**\n * @internal\n */\nexport const CommonNFTOutput = CommonTokenOutput.extend({\n  animation_url: z.string().nullable().optional(),\n});\n\n/**\n * @public\n */\nexport type NFTMetadataInput = z.input<typeof CommonNFTInput>;\n/**\n * @public\n */\nexport type NFTMetadataOrUri = z.input<typeof NFTInputOrUriSchema>;\n/**\n * @public\n */\nexport type NFTMetadata = z.output<typeof CommonNFTOutput>;\n/**\n * @public\n */\nexport type NFTMetadataOwner = { metadata: NFTMetadata; owner: string };\n","import { z } from \"zod\";\nimport { JsonObjectSchema } from \"../../shared\";\n\n/**\n * @internal\n */\nexport const OptionalPropertiesInput = z\n  .union([z.array(JsonObjectSchema), JsonObjectSchema])\n  .optional();\n","import { v4 as uuidv4 } from \"uuid\";\nimport { utils } from \"ethers\";\n\nexport function resolveOrGenerateId(requestUId: string | undefined): string {\n  if (requestUId === undefined) {\n    const buffer = Buffer.alloc(16);\n    uuidv4({}, buffer);\n    return utils.hexlify(utils.toUtf8Bytes(buffer.toString(\"hex\")));\n  } else {\n    return utils.hexlify(requestUId as string);\n  }\n}\n","import { z } from \"zod\";\nimport { AddressSchema, PriceSchema } from \"../shared\";\n\n/**\n * @internal\n */\nexport const TokenMintInputSchema = z.object({\n  toAddress: AddressSchema,\n  amount: PriceSchema,\n});\n\n/**\n * @public\n */\nexport type TokenMintInput = z.input<typeof TokenMintInputSchema>;\n","import { z } from \"zod\";\nimport { BigNumberishSchema, BigNumberSchema } from \"../shared\";\nimport { CommonNFTInput, CommonNFTOutput, NFTInputOrUriSchema } from \"./common\";\n\n/**\n * @internal\n */\nexport const EditionMetadataOutputSchema = z.object({\n  supply: BigNumberSchema,\n  metadata: CommonNFTOutput,\n});\n\n/**\n * @internal\n */\nexport const EditionMetadataWithOwnerOutputSchema =\n  EditionMetadataOutputSchema.extend({\n    owner: z.string(),\n    quantityOwned: BigNumberSchema,\n  });\n\n/**\n * @internal\n */\nexport const EditionMetadataInputSchema = z.object({\n  supply: BigNumberishSchema,\n  metadata: CommonNFTInput,\n});\n\n/**\n * @internal\n */\nexport const EditionMetadataInputOrUriSchema = z.object({\n  supply: BigNumberishSchema,\n  metadata: NFTInputOrUriSchema,\n});\n\n/**\n * @public\n */\nexport type EditionMetadata = z.output<typeof EditionMetadataOutputSchema>;\n/**\n * @public\n */\nexport type EditionMetadataOwner = z.output<\n  typeof EditionMetadataWithOwnerOutputSchema\n>;\n/**\n * @public\n */\nexport type EditionMetadataInput = z.input<typeof EditionMetadataInputSchema>;\n\n/**\n * @public\n */\nexport type EditionMetadataOrUri = z.input<\n  typeof EditionMetadataInputOrUriSchema\n>;\n","import { BigNumberish, providers } from \"ethers\";\n\n/**\n * Error that may get thrown if IPFS returns nothing for a given uri.\n * @internal\n */\nexport class NotFoundError extends Error {\n  /** @internal */\n  constructor(identifier?: string) {\n    super(identifier ? `Object with id ${identifier} NOT FOUND` : \"NOT_FOUND\");\n  }\n}\n\n/**\n * Error that may get thrown if an invalid address was passed\n * @internal\n */\nexport class InvalidAddressError extends Error {\n  /** @internal */\n  constructor(address?: string) {\n    super(\n      address ? `'${address}' is an invalid address` : \"Invalid address passed\",\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class MissingRoleError extends Error {\n  /** @internal */\n  /** @internal */\n  constructor(address: string, role: string) {\n    super(`MISSING ROLE: ${address} does not have the '${role}' role`);\n  }\n}\n\n/**\n * @internal\n */\nexport class AssetNotFoundError extends Error {\n  /** @internal */\n  /** @internal */\n  constructor(message = \"The asset you're trying to use could not be found.\") {\n    super(`message: ${message}`);\n  }\n}\n\n/**\n * @internal\n */\nexport class UploadError extends Error {\n  /** @internal */\n  constructor(message: string) {\n    super(`UPLOAD_FAILED: ${message}`);\n  }\n}\n\n/**\n * @internal\n */\nexport class FileNameMissingError extends Error {\n  /** @internal */\n  constructor() {\n    super(\"File name is required when object is not a `File` type object.\");\n  }\n}\n\n/**\n * @internal\n */\nexport class DuplicateFileNameError extends Error {\n  /** @internal */\n  constructor(fileName: string) {\n    super(\n      `DUPLICATE_FILE_NAME_ERROR: File name ${fileName} was passed for more than one file.`,\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class NotEnoughTokensError extends Error {\n  /** @internal */\n  constructor(contractAddress: string, quantity: number, available: number) {\n    super(\n      `BALANCE ERROR: you do not have enough balance on contract ${contractAddress} to use ${quantity} tokens. You have ${available} tokens available.`,\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class MissingOwnerRoleError extends Error {\n  /** @internal */\n  constructor() {\n    super(`LIST ERROR: you should be the owner of the token to list it.`);\n  }\n}\n\n/**\n * @internal\n */\nexport class QuantityAboveLimitError extends Error {\n  /** @internal */\n  constructor(quantity: string) {\n    super(`BUY ERROR: You cannot buy more than ${quantity} tokens`);\n  }\n}\n\n/**\n * Thrown when data fails to fetch from storage.\n * @internal\n */\nexport class FetchError extends Error {\n  public innerError?: Error;\n\n  /** @internal */\n  constructor(message: string, innerError?: Error) {\n    super(`FETCH_FAILED: ${message}`);\n    this.innerError = innerError;\n  }\n}\n\n/**\n * Thrown when attempting to create a snapshot with duplicate leafs\n * @internal\n */\nexport class DuplicateLeafsError extends Error {\n  constructor(message?: string) {\n    super(`DUPLICATE_LEAFS${message ? ` : ${message}` : \"\"}`);\n  }\n}\n\n/**\n * Thrown when attempting to update/cancel an auction that already started\n * @internal\n */\nexport class AuctionAlreadyStartedError extends Error {\n  constructor(id?: string) {\n    super(\n      `Auction already started with existing bid${id ? `, id: ${id}` : \"\"}`,\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class FunctionDeprecatedError extends Error {\n  /** @internal */\n  constructor(message: string) {\n    super(`FUNCTION DEPRECATED. ${message ? `Use ${message} instead` : \"\"}`);\n  }\n}\n\n/**\n * Thrown when trying to retrieve a listing from a marketplace that doesn't exist\n * @internal\n */\nexport class ListingNotFoundError extends Error {\n  constructor(marketplaceContractAddress: string, listingId?: string) {\n    super(\n      `Could not find listing.${\n        marketplaceContractAddress\n          ? ` marketplace address: ${marketplaceContractAddress}`\n          : \"\"\n      }${listingId ? ` listing id: ${listingId}` : \"\"}`,\n    );\n  }\n}\n\n/**\n * Thrown when trying to retrieve a listing of the wrong type\n * @internal\n */\nexport class WrongListingTypeError extends Error {\n  constructor(\n    marketplaceContractAddress: string,\n    listingId?: string,\n    actualType?: string,\n    expectedType?: string,\n  ) {\n    super(\n      `Incorrect listing type. Are you sure you're using the right method?.${\n        marketplaceContractAddress\n          ? ` marketplace address: ${marketplaceContractAddress}`\n          : \"\"\n      }${listingId ? ` listing id: ${listingId}` : \"\"}${\n        expectedType ? ` expected type: ${expectedType}` : \"\"\n      }${actualType ? ` actual type: ${actualType}` : \"\"}`,\n    );\n  }\n}\n\n/**\n * Thrown when attempting to transfer an asset that has restricted transferability\n * @internal\n */\nexport class RestrictedTransferError extends Error {\n  constructor(assetAddress?: string) {\n    super(\n      `Failed to transfer asset, transfer is restricted.${\n        assetAddress ? ` Address : ${assetAddress}` : \"\"\n      }`,\n    );\n  }\n}\n\n/**\n * Thrown when attempting to execute an admin-role function.\n * @internal\n */\nexport class AdminRoleMissingError extends Error {\n  constructor(\n    address?: string,\n    contractAddress?: string,\n    message = \"Failed to execute transaction\",\n  ) {\n    super(\n      `${message}, admin role is missing${\n        address ? ` on address: ${address}` : \"\"\n      }${contractAddress ? ` on contract: ${contractAddress}` : \"\"}`,\n    );\n  }\n}\n\n/**\n * Thrown when attempting to close an auction that has not ended\n * @internal\n */\nexport class AuctionHasNotEndedError extends Error {\n  constructor(id?: string, endTime?: BigNumberish) {\n    super(\n      `Auction has not ended yet${id ? `, id: ${id}` : \"\"}${\n        endTime ? `, end time: ${endTime.toString()}` : \"\"\n      }`,\n    );\n  }\n}\n\n/**\n * @public\n */\nexport class TransactionError extends Error {\n  public reason: string;\n  public from: string;\n  public to: string;\n  public data: string;\n  public chain: providers.Network;\n  public rpcUrl: string;\n\n  constructor(\n    reason: string,\n    from: string,\n    to: string,\n    data: string,\n    network: providers.Network,\n    rpcUrl: string,\n    raw: string,\n  ) {\n    let builtErrorMsg = \"Contract transaction failed\\n\\n\";\n    builtErrorMsg += `Message: ${reason}`;\n    builtErrorMsg += \"\\n\\n| Transaction info |\\n\";\n    builtErrorMsg += withSpaces(\"from\", from);\n    builtErrorMsg += withSpaces(\"to\", to);\n    builtErrorMsg += withSpaces(\"data\", data);\n    builtErrorMsg += withSpaces(\n      `chain`,\n      `${network.name} (${network.chainId})`,\n    );\n    try {\n      const url = new URL(rpcUrl);\n      builtErrorMsg += withSpaces(`RPC`, url.hostname);\n    } catch (e2) {\n      // ignore if can't parse URL\n    }\n    builtErrorMsg += \"\\n\\n\";\n    builtErrorMsg +=\n      \"Need help with this error? Join our community: https://discord.gg/thirdweb\";\n    builtErrorMsg += \"\\n\\n\\n\\n\";\n    builtErrorMsg += \"| Raw error |\";\n    builtErrorMsg += \"\\n\\n\";\n    builtErrorMsg += raw;\n    super(builtErrorMsg);\n    this.reason = reason;\n    this.from = from;\n    this.to = to;\n    this.data = data;\n    this.chain = network;\n    this.rpcUrl = rpcUrl;\n  }\n}\n\n/**\n * @internal\n * @param error\n * @param network\n * @param signerAddress\n * @param contractAddress\n */\nexport async function convertToTWError(\n  error: any,\n  network: providers.Network,\n  signerAddress: string,\n  contractAddress: string,\n): Promise<TransactionError> {\n  let raw: string;\n  if (error.data) {\n    // metamask errors comes as objects, apply parsing on data object\n    // TODO test errors from other wallets\n    raw = JSON.stringify(error.data);\n  } else if (error instanceof Error) {\n    // regular ethers.js error\n    raw = error.message;\n  } else {\n    // not sure what this is, just throw it back\n    return error;\n  }\n  const reason = parseMessageParts(/.*?\"message[^a-zA-Z0-9]*([^\"\\\\]*).*?/, raw);\n  const data = parseMessageParts(/.*?\"data[^a-zA-Z0-9]*([^\"\\\\]*).*?/, raw);\n  const rpcUrl = parseMessageParts(/.*?\"url[^a-zA-Z0-9]*([^\"\\\\]*).*?/, raw);\n  let from = parseMessageParts(/.*?\"from[^a-zA-Z0-9]*([^\"\\\\]*).*?/, raw);\n  let to = parseMessageParts(/.*?\"to[^a-zA-Z0-9]*([^\"\\\\]*).*?/, raw);\n  if (to === \"\") {\n    // fallback to contractAddress\n    to = contractAddress;\n  }\n  if (from === \"\") {\n    // fallback to signerAddress\n    from = signerAddress;\n  }\n  return new TransactionError(reason, from, to, data, network, rpcUrl, raw);\n}\n\nfunction withSpaces(label: string, content: string) {\n  if (content === \"\") {\n    return content;\n  }\n  const spaces = Array(10 - label.length)\n    .fill(\" \")\n    .join(\"\");\n  return `\\n${label}:${spaces}${content}`;\n}\n\nfunction parseMessageParts(regex: RegExp, raw: string): string {\n  const msgMatches = raw.match(regex) || [];\n  let extracted = \"\";\n  if (msgMatches?.length > 0) {\n    extracted += msgMatches[1];\n  }\n  return extracted;\n}\n\n/**\n * @internal\n * @param err\n * @param message\n */\nexport function includesErrorMessage(err: any, message: string): boolean {\n  return (\n    (err && err.toString().includes(message)) ||\n    (err.message && err.message.toString().includes(message)) ||\n    (err.error && err.error.toString().includes(message))\n  );\n}\n","import { ethers, providers } from \"ethers\";\nimport { SignerOrProvider } from \"../core/types\";\n/**\n * @internal\n */\nexport const DEFAULT_IPFS_GATEWAY = \"https://gateway.ipfscdn.io/ipfs/\";\n/**\n * @internal\n */\nexport const PUBLIC_GATEWAYS = [\n  \"https://gateway.ipfscdn.io/ipfs/\",\n  \"https://gateway2.ipfscdn.io/ipfs/\",\n];\n\n/**\n * @internal\n */\nexport const TW_IPFS_SERVER_URL = \"https://upload.nftlabs.co\";\n/**\n * @internal\n */\nexport const PINATA_IPFS_URL = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n\n/**\n * @internal\n */\nexport type ChainOrRpc =\n  | \"mumbai\"\n  | \"polygon\"\n  | \"rinkeby\"\n  | \"goerli\"\n  | \"mainnet\"\n  | \"fantom\"\n  | \"avalanche\"\n  // ideally we could use `https://${string}` notation here, but doing that causes anything that is a generic string to throw a type error => not worth the hassle for now\n  | (string & {});\n\n/**\n * @internal\n * This is a community API key that is subject to rate limiting. Please use your own key.\n */\nconst DEFAULT_API_KEY = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\n\n/**\n * @internal\n * @param network - the chain name or rpc url\n * @returns the rpc url for that chain\n */\nexport function getProviderForNetwork(network: ChainOrRpc | SignerOrProvider) {\n  if (typeof network !== \"string\") {\n    return network;\n  }\n  switch (network) {\n    case \"mumbai\":\n      return `https://polygon-mumbai.g.alchemy.com/v2/${DEFAULT_API_KEY}`;\n    case \"rinkeby\":\n      return `https://eth-rinkeby.g.alchemy.com/v2/${DEFAULT_API_KEY}`;\n    case \"goerli\":\n      return `https://eth-goerli.g.alchemy.com/v2/${DEFAULT_API_KEY}`;\n    case \"polygon\":\n      return `https://polygon-mainnet.g.alchemy.com/v2/${DEFAULT_API_KEY}`;\n    case \"mainnet\":\n      return `https://eth-mainnet.g.alchemy.com/v2/${DEFAULT_API_KEY}`;\n    case \"fantom\":\n      return \"https://rpc.ftm.tools\";\n    case \"avalanche\":\n      return \"https://rpc.ankr.com/avalanche\";\n    default:\n      if (network.startsWith(\"http\")) {\n        return network;\n      } else {\n        throw new Error(`Unrecognized chain name or RPC url: ${network}`);\n      }\n  }\n}\n\n/**\n *\n * @param network - the chain name or rpc url\n * @param chainId - the optional chain id\n * @returns the provider\n */\nexport function getReadOnlyProvider(network: string, chainId?: number) {\n  try {\n    const match = network.match(/^(ws|http)s?:/i);\n    // try the JSON batch provider if available\n    if (match) {\n      switch (match[1]) {\n        case \"http\":\n          return new providers.JsonRpcBatchProvider(network, chainId);\n        case \"ws\":\n          return new providers.WebSocketProvider(network, chainId);\n        default:\n          return ethers.getDefaultProvider(network);\n      }\n    } else {\n      return ethers.getDefaultProvider(network);\n    }\n  } catch (e) {\n    // fallback to the default provider\n    return ethers.getDefaultProvider(network);\n  }\n}\n","import { Json } from \"../types\";\n\n/**\n * Given a map of file hashes to ipfs uris, this function will hash\n * all properties recursively and replace them with the ipfs uris\n * from the map passed in. If a hash is missing from the map, the function\n * will throw an error.\n *\n * @internal\n *\n * @param object - The object to recursively process\n * @param cids - The array of file hashes to ipfs uris in the recurse order\n * @returns - The processed metadata with properties pointing at ipfs in place of `File | Buffer`\n */\nexport function replaceFilePropertiesWithHashes(\n  object: Record<string, any>,\n  cids: string[],\n) {\n  const keys = Object.keys(object);\n  for (const key in keys) {\n    const val = object[keys[key]];\n    const isFile = val instanceof File || val instanceof Buffer;\n    if (typeof val === \"object\" && !isFile) {\n      replaceFilePropertiesWithHashes(val, cids);\n      continue;\n    }\n\n    if (!isFile) {\n      continue;\n    }\n\n    object[keys[key]] = `ipfs://${cids.splice(0, 1)[0]}`;\n  }\n  return object;\n}\n\n/**\n * Replaces all ipfs:// hashes (or any other scheme) with gateway url\n * @param object\n * @param scheme\n * @param gatewayUrl\n */\nexport function replaceHashWithGatewayUrl(\n  object: Record<string, any>,\n  scheme: string,\n  gatewayUrl: string,\n): Record<string, any> {\n  if (object === null || !object) {\n    return {};\n  }\n  const keys = Object.keys(object);\n  for (const key in keys) {\n    const val = object[keys[key]];\n    object[keys[key]] = resolveGatewayUrl(val, scheme, gatewayUrl);\n    if (Array.isArray(val)) {\n      object[keys[key]] = val.map((el) => {\n        if (typeof el === \"object\") {\n          return replaceHashWithGatewayUrl(el, scheme, gatewayUrl);\n        } else {\n          return resolveGatewayUrl(el, scheme, gatewayUrl);\n        }\n      });\n    }\n    if (typeof val === \"object\") {\n      replaceHashWithGatewayUrl(val, scheme, gatewayUrl);\n    }\n  }\n  return object;\n}\n\n/**\n * Resolves the full URL of a file for a given gateway.\n *\n * For example, if the hash of a file is `ipfs://bafkreib3u2u6ir2fsl5nkuwixfsb3l4xehri3psjv5yga4inuzsjunk2sy`, then the URL will be:\n * \"https://cloudflare-ipfs.com/ipfs/bafkreibnwjhx5s3r2rggdoy3hw7lr7wmgy4bas35oky3ed6eijklk2oyvq\"\n * if the gateway is `cloudflare-ipfs.com`.\n *\n * @param ipfsHash\n * @param scheme\n * @param gatewayUrl\n */\nexport function resolveGatewayUrl<T extends Json>(\n  ipfsHash: T,\n  scheme: string,\n  gatewayUrl: string,\n): T {\n  if (typeof ipfsHash === \"string\") {\n    return ipfsHash && ipfsHash.toLowerCase().includes(scheme)\n      ? (ipfsHash.replace(scheme, gatewayUrl) as T)\n      : ipfsHash;\n  } else {\n    return ipfsHash;\n  }\n}\n","import {\n  DuplicateFileNameError,\n  FetchError,\n  UploadError,\n} from \"../../common/error\";\nimport {\n  DEFAULT_IPFS_GATEWAY,\n  PINATA_IPFS_URL,\n  PUBLIC_GATEWAYS,\n  TW_IPFS_SERVER_URL,\n} from \"../../constants/urls\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport { FileOrBuffer, JsonObject } from \"../types\";\nimport {\n  replaceFilePropertiesWithHashes,\n  replaceHashWithGatewayUrl,\n  resolveGatewayUrl,\n} from \"../helpers/storage\";\nimport { isNode } from \"../../common/utils\";\n\nif (!globalThis.FormData) {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  globalThis.FormData = require(\"form-data\");\n}\n\n/**\n * @internal\n */\ninterface CidWithFileName {\n  // base cid of the directory\n  cid: string;\n\n  // file name of the file without cid\n  fileNames: string[];\n}\n\n/**\n * IPFS Storage implementation, accepts custom IPFS gateways\n * @public\n */\nexport class IpfsStorage implements IStorage {\n  private gatewayUrl: string;\n  private failedUrls: string[] = [];\n\n  constructor(gatewayUrl: string = DEFAULT_IPFS_GATEWAY) {\n    this.gatewayUrl = `${gatewayUrl.replace(/\\/$/, \"\")}/`;\n  }\n\n  private getNextPublicGateway() {\n    const urlsToTry = PUBLIC_GATEWAYS.filter(\n      (url) => !this.failedUrls.includes(url),\n    ).filter((url) => url !== this.gatewayUrl);\n    if (urlsToTry.length > 0) {\n      return urlsToTry[0];\n    } else {\n      this.failedUrls = [];\n      return undefined;\n    }\n  }\n\n  /**\n   * {@inheritDoc IStorage.upload}\n   */\n  public async upload(\n    data: string | FileOrBuffer,\n    contractAddress?: string,\n    signerAddress?: string,\n  ): Promise<string> {\n    const cid = await this.uploadBatch(\n      [data],\n      0,\n      contractAddress,\n      signerAddress,\n    );\n    return `${cid}0`;\n  }\n\n  /**\n   * {@inheritDoc IStorage.uploadBatch}\n   */\n  public async uploadBatch(\n    files: (string | FileOrBuffer)[],\n    fileStartNumber = 0,\n    contractAddress?: string,\n    signerAddress?: string,\n  ): Promise<string> {\n    const { cid } = await this.uploadBatchWithCid(\n      files,\n      fileStartNumber,\n      contractAddress,\n      signerAddress,\n    );\n\n    return `ipfs://${cid}/`;\n  }\n\n  /**\n   * {@inheritDoc IStorage.getUploadToken}\n   */\n  public async getUploadToken(contractAddress: string): Promise<string> {\n    const headers = {\n      \"X-App-Name\": `CONSOLE-TS-SDK-${contractAddress}`,\n    };\n    const res = await fetch(`${TW_IPFS_SERVER_URL}/grant`, {\n      method: \"GET\",\n      headers,\n    });\n    if (!res.ok) {\n      throw new FetchError(`Failed to get upload token`);\n    }\n    const body = await res.text();\n    return body;\n  }\n\n  /**\n   * {@inheritDoc IStorage.get}\n   */\n  public async get(hash: string): Promise<Record<string, any>> {\n    const res = await this._get(hash);\n    const json = await res.json();\n    return replaceHashWithGatewayUrl(json, \"ipfs://\", this.gatewayUrl);\n  }\n\n  /**\n   * {@inheritDoc IStorage.getRaw}\n   */\n  public async getRaw(hash: string): Promise<string> {\n    const res = await this._get(hash);\n    return await res.text();\n  }\n\n  /**\n   * {@inheritDoc IStorage.uploadMetadata}\n   */\n  public async uploadMetadata(\n    metadata: JsonObject,\n    contractAddress?: string,\n    signerAddress?: string,\n  ): Promise<string> {\n    // since there's only single object, always use the first index\n    const { metadataUris } = await this.uploadMetadataBatch(\n      [metadata],\n      0,\n      contractAddress,\n      signerAddress,\n    );\n    return metadataUris[0];\n  }\n\n  /**\n   * {@inheritDoc IStorage.uploadMetadataBatch}\n   */\n  public async uploadMetadataBatch(\n    metadatas: JsonObject[],\n    fileStartNumber?: number,\n    contractAddress?: string,\n    signerAddress?: string,\n  ) {\n    const metadataToUpload = (await this.batchUploadProperties(metadatas)).map(\n      (m: any) => JSON.stringify(m),\n    );\n\n    const { cid, fileNames } = await this.uploadBatchWithCid(\n      metadataToUpload,\n      fileStartNumber,\n      contractAddress,\n      signerAddress,\n    );\n\n    const baseUri = `ipfs://${cid}/`;\n    const uris = fileNames.map((filename) => `${baseUri}${filename}`);\n\n    return {\n      baseUri,\n      metadataUris: uris,\n    };\n  }\n\n  /** *************************\n   * PRIVATE FUNCTIONS\n   *************************/\n\n  private async _get(hash: string): Promise<Response> {\n    let uri = hash;\n    if (hash) {\n      uri = resolveGatewayUrl(hash, \"ipfs://\", this.gatewayUrl);\n    }\n    const result = await fetch(uri);\n    if (!result.ok && result.status !== 404) {\n      const nextUrl = this.getNextPublicGateway();\n      if (nextUrl) {\n        this.failedUrls.push(this.gatewayUrl);\n        this.gatewayUrl = nextUrl;\n        return this._get(hash);\n      } else {\n        throw new Error(`Error fetching ${uri} - Status code ${result.status}`);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Pre-processes metadata and uploads all file properties\n   * to storage in *bulk*, then performs a string replacement of\n   * all file properties -\\> the resulting ipfs uri. This is\n   * called internally by `uploadMetadataBatch`.\n   *\n   * @internal\n   *\n   * @param metadata - The metadata to recursively process\n   * @returns - The processed metadata with properties pointing at ipfs in place of `File | Buffer`\n   */\n  private async batchUploadProperties(metadatas: JsonObject[]) {\n    const filesToUpload = metadatas.flatMap((m) =>\n      this.buildFilePropertiesMap(m, []),\n    );\n    if (filesToUpload.length === 0) {\n      return metadatas;\n    }\n    const { cid, fileNames } = await this.uploadBatchWithCid(filesToUpload);\n\n    const cids = [];\n    // recurse ordered array\n    for (const filename of fileNames) {\n      cids.push(`${cid}/${filename}`);\n    }\n\n    const finalMetadata = await replaceFilePropertiesWithHashes(\n      metadatas,\n      cids,\n    );\n    return finalMetadata;\n  }\n\n  /**\n   * This function recurisely traverses an object and hashes any\n   * `Buffer` or `File` objects into the returned map.\n   *\n   * @param object - the Json Object\n   * @param files - The running array of files or buffer to upload\n   * @returns - The final map of all hashes to files\n   */\n  private buildFilePropertiesMap(\n    object: JsonObject,\n    files: (File | Buffer)[] = [],\n  ): (File | Buffer)[] {\n    if (Array.isArray(object)) {\n      object.forEach((element) => {\n        this.buildFilePropertiesMap(element, files);\n      });\n    } else if (object) {\n      const values = Object.values(object);\n      for (const val of values) {\n        if (val instanceof File || val instanceof Buffer) {\n          files.push(val);\n        } else if (typeof val === \"object\") {\n          this.buildFilePropertiesMap(val as JsonObject, files);\n        }\n      }\n    }\n    return files;\n  }\n\n  private async uploadBatchWithCid(\n    files: (string | FileOrBuffer)[],\n    fileStartNumber = 0,\n    contractAddress?: string,\n    signerAddress?: string,\n  ): Promise<CidWithFileName> {\n    const token = await this.getUploadToken(contractAddress || \"\");\n    const metadata = {\n      name: `CONSOLE-TS-SDK-${contractAddress}`,\n      keyvalues: {\n        sdk: \"typescript\",\n        contractAddress,\n        signerAddress,\n      },\n    };\n    const data = new FormData();\n    const fileNames: string[] = [];\n    files.forEach((file, i) => {\n      let fileName = \"\";\n      let fileData = file;\n      // if it is a file, we passthrough the file extensions,\n      // if it is a buffer or string, the filename would be fileStartNumber + index\n      // if it is a buffer or string with names, the filename would be the name\n      if (file instanceof File) {\n        let extensions = \"\";\n        if (file.name) {\n          const extensionStartIndex = file.name.lastIndexOf(\".\");\n          if (extensionStartIndex > -1) {\n            extensions = file.name.substring(extensionStartIndex);\n          }\n        }\n        fileName = `${i + fileStartNumber}${extensions}`;\n      } else if (file instanceof Buffer || typeof file === \"string\") {\n        fileName = `${i + fileStartNumber}`;\n      } else if (file && file.name && file?.data) {\n        fileData = file?.data;\n        fileName = `${file.name}`;\n      } else {\n        // default behavior\n        fileName = `${i + fileStartNumber}`;\n      }\n\n      const filepath = `files/${fileName}`;\n      if (fileNames.indexOf(fileName) > -1) {\n        throw new DuplicateFileNameError(fileName);\n      }\n      fileNames.push(fileName);\n      if (isNode()) {\n        data.append(\"file\", fileData as any, { filepath } as any);\n      } else {\n        // browser does blob things, filepath is parsed differently on browser vs node.\n        // pls pinata?\n        data.append(\"file\", new Blob([fileData as any]), filepath);\n      }\n    });\n\n    data.append(\"pinataMetadata\", JSON.stringify(metadata));\n    const res = await fetch(PINATA_IPFS_URL, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      body: data as any,\n    });\n    const body = await res.json();\n    if (!res.ok) {\n      console.log(body);\n      throw new UploadError(\"Failed to upload files to IPFS\");\n    }\n    return {\n      cid: body.IpfsHash,\n      fileNames,\n    };\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { BaseContract, utils } from \"ethers\";\n\n/**\n * Encodes and decodes Contract functions\n * @public\n */\nexport class ContractEncoder<TContract extends BaseContract> {\n  private contractWrapper;\n\n  constructor(contractWrapper: ContractWrapper<TContract>) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Encodes the given contract function with argument\n   * @returns the encoded data\n   */\n  public encode(\n    fn: keyof TContract[\"functions\"],\n    args: Parameters<TContract[\"functions\"][typeof fn]>,\n  ): string {\n    return this.contractWrapper.readContract.interface.encodeFunctionData(\n      fn as string,\n      args,\n    );\n  }\n\n  /**\n   * Decode encoded call data for a given function\n   * @param fn - the function to decode\n   * @param encodedArgs - the encoded arguments\n   */\n  public decode(\n    fn: keyof TContract[\"functions\"],\n    encodedArgs: string,\n  ): utils.Result {\n    return this.contractWrapper.readContract.interface.decodeFunctionData(\n      fn as string,\n      encodedArgs,\n    );\n  }\n}\n","import { IStorage } from \"../core/interfaces/IStorage\";\nimport MerkleTree from \"merkletreejs\";\nimport {\n  SnapshotInputSchema,\n  SnapshotSchema,\n} from \"../schema/contracts/common/snapshots\";\nimport {\n  SnapshotInfo,\n  SnapshotInput,\n} from \"../types/claim-conditions/claim-conditions\";\nimport { DuplicateLeafsError } from \"./error\";\nimport keccak256 from \"keccak256\";\nimport { BigNumber, BigNumberish, ethers } from \"ethers\";\n\n/**\n * Create a snapshot (merkle tree) from a list of addresses and uploads it to IPFS\n * @param snapshotInput - the list of addresses to hash\n * @param storage - the storage to upload to\n * @returns the generated snapshot and URI\n * @internal\n */\nexport async function createSnapshot(\n  snapshotInput: SnapshotInput,\n  tokenDecimals: number,\n  storage: IStorage,\n): Promise<SnapshotInfo> {\n  const input = SnapshotInputSchema.parse(snapshotInput);\n  const addresses = input.map((i) => i.address);\n  const hasDuplicates = new Set(addresses).size < addresses.length;\n  if (hasDuplicates) {\n    throw new DuplicateLeafsError();\n  }\n\n  const hashedLeafs = input.map((i) =>\n    hashLeafNode(\n      i.address,\n      ethers.utils.parseUnits(i.maxClaimable, tokenDecimals),\n    ),\n  );\n  const tree = new MerkleTree(hashedLeafs, keccak256, {\n    sort: true,\n  });\n\n  const snapshot = SnapshotSchema.parse({\n    merkleRoot: tree.getHexRoot(),\n    claims: input.map((i, index) => {\n      const proof = tree.getHexProof(hashedLeafs[index]);\n      return {\n        address: i.address,\n        maxClaimable: i.maxClaimable,\n        proof,\n      };\n    }),\n  });\n\n  const uri = await storage.uploadMetadata(snapshot);\n  return {\n    merkleRoot: tree.getHexRoot(),\n    snapshotUri: uri,\n    snapshot,\n  };\n}\n\n/**\n * Hash an address and the corresponding claimable amount\n * @internal\n * @param address - the address\n * @param maxClaimableAmount - the amount\n */\nexport function hashLeafNode(\n  address: string,\n  maxClaimableAmount: BigNumberish,\n): string {\n  return ethers.utils.solidityKeccak256(\n    [\"address\", \"uint256\"],\n    [address, BigNumber.from(maxClaimableAmount)],\n  );\n}\n","import { BytesLike, ethers } from \"ethers\";\n\n/**\n *\n * @internal\n */\nconst roleMap = {\n  admin: \"\",\n  transfer: \"TRANSFER_ROLE\",\n  minter: \"MINTER_ROLE\",\n  pauser: \"PAUSER_ROLE\",\n  editor: \"EDITOR_ROLE\",\n  lister: \"LISTER_ROLE\",\n  asset: \"ASSET_ROLE\",\n} as const;\n\n/**\n * @public\n */\nexport type Role = keyof typeof roleMap;\n\n/**\n * @public\n */\nexport const ALL_ROLES = Object.keys(roleMap) as Role[];\n\n/**\n * @internal\n */\nexport function getRoleHash(role: Role): BytesLike {\n  if (role === \"admin\") {\n    return ethers.utils.hexZeroPad([0], 32);\n  }\n  return ethers.utils.id(roleMap[role]);\n}\n","import { BaseContract, Contract, ethers, utils } from \"ethers\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { IStorage } from \"../core\";\nimport {\n  AbiFunction,\n  AbiSchema,\n  CustomContractMetadataSchema,\n  PublishedMetadata,\n} from \"../schema/contracts/custom\";\nimport { z } from \"zod\";\nimport {\n  Feature,\n  FeatureName,\n  FeatureWithEnabled,\n  SUPPORTED_FEATURES,\n} from \"../constants/contract-features\";\nimport ContractMetadataRegistryAbi from \"../../abis/ContractMetadataRegistry.json\";\nimport { ContractMetadataRegistry } from \"contracts\";\nimport { getContractAddressByChainId } from \"../constants\";\n\n/**\n * Type guards a contract to a known type if it matches the corresponding interface\n * @internal\n * @param contractWrapper\n * @param interfaceToMatch\n */\nexport function implementsInterface<C extends BaseContract>(\n  contractWrapper: ContractWrapper<BaseContract>,\n  interfaceToMatch: utils.Interface,\n): contractWrapper is ContractWrapper<C> {\n  return matchesInterface(contractWrapper.readContract, interfaceToMatch);\n}\n\n/**\n * Checks the intersection of the 'functions' objects of a given contract and interface\n * @internal\n * @param contract\n * @param interfaceToMatch\n */\nfunction matchesInterface(\n  contract: BaseContract,\n  interfaceToMatch: utils.Interface,\n) {\n  // returns true if all the functions in `interfaceToMatch` are found in `contract`\n  const contractFn = contract.interface.functions;\n  const interfaceFn = interfaceToMatch.functions;\n  return (\n    Object.keys(contractFn).filter((k) => k in interfaceFn).length ===\n    Object.keys(interfaceFn).length\n  );\n}\n\n/**\n * @internal\n * @param abi\n * @param interfaceAbis\n */\nfunction matchesAbiInterface(\n  abi: z.input<typeof AbiSchema>,\n  interfaceAbis: readonly z.input<typeof AbiSchema>[],\n): boolean {\n  // returns true if all the functions in `interfaceToMatch` are found in `contract`\n  const contractFn = extractFunctionsFromAbi(abi).map((f) => f.name);\n  const interfaceFn = interfaceAbis\n    .flatMap((i) => extractFunctionsFromAbi(i))\n    .map((f) => f.name);\n  return (\n    contractFn.filter((k) => interfaceFn.includes(k)).length ===\n    interfaceFn.length\n  );\n}\n\n/**\n * @internal\n */\nexport async function extractConstructorParams(\n  metadataUri: string,\n  storage: IStorage,\n) {\n  const metadata = CustomContractMetadataSchema.parse(\n    await storage.get(metadataUri),\n  );\n  const abiRaw = await storage.get(metadata.abiUri);\n  const abi = AbiSchema.parse(abiRaw);\n  return extractConstructorParamsFromAbi(abi);\n}\n\n/**\n * @internal\n * @param metadataUri\n * @param storage\n */\nexport async function extractFunctions(\n  metadataUri: string,\n  storage: IStorage,\n): Promise<AbiFunction[]> {\n  const metadata = CustomContractMetadataSchema.parse(\n    await storage.get(metadataUri),\n  );\n  const abiRaw = await storage.get(metadata.abiUri);\n  const abi = AbiSchema.parse(abiRaw);\n  return extractFunctionsFromAbi(abi);\n}\n\n/**\n *\n * @param abi\n * @returns\n * @internal\n */\nexport function extractConstructorParamsFromAbi(\n  abi: z.input<typeof AbiSchema>,\n) {\n  for (const input of abi) {\n    if (input.type === \"constructor\") {\n      return input.inputs ?? [];\n    }\n  }\n  return [];\n}\n\n/**\n * @internal\n * @param abi\n */\nexport function extractFunctionsFromAbi(\n  abi: z.input<typeof AbiSchema>,\n): AbiFunction[] {\n  const functions = abi.filter((el) => el.type === \"function\");\n  const parsed = [];\n  for (const f of functions) {\n    const args =\n      f.inputs\n        ?.map((i) => `${i.name || \"key\"}: ${toJSType(i.type)}`)\n        ?.join(\", \") || \"\";\n    const out = f.outputs?.map((o) => toJSType(o.type, true))?.join(\", \");\n    const promise = out ? `: Promise<${out}>` : \"\";\n    const signature = `${f.name}(${args})${promise}`;\n    parsed.push({\n      inputs: f.inputs ?? [],\n      outputs: f.outputs ?? [],\n      name: f.name ?? \"unknown\",\n      signature,\n    });\n  }\n  return parsed;\n}\n\nfunction toJSType(contractType: string, isReturnType = false): string {\n  let jsType = contractType;\n  if (contractType.startsWith(\"bytes\")) {\n    jsType = \"BytesLike\";\n  }\n  if (contractType.startsWith(\"uint\") || contractType.startsWith(\"int\")) {\n    jsType = isReturnType ? \"BigNumber\" : \"BigNumberish\";\n  }\n  if (contractType === \"bool\") {\n    jsType = \"boolean\";\n  }\n  if (contractType === \"address\") {\n    jsType = \"string\";\n  }\n  if (contractType.endsWith(\"[]\")) {\n    jsType += \"[]\";\n  }\n  return jsType;\n}\n\n/**\n * @internal\n * @param address\n * @param provider\n */\nexport async function resolveContractUriFromAddress(\n  address: string,\n  provider: ethers.providers.Provider,\n): Promise<string> {\n  const chainId = (await provider.getNetwork()).chainId;\n  const metadataRegistryAddress = getContractAddressByChainId(\n    chainId,\n    \"contractMetadataRegistry\",\n  );\n  const contract = new Contract(\n    metadataRegistryAddress,\n    ContractMetadataRegistryAbi,\n    provider,\n  ) as ContractMetadataRegistry;\n  return await contract.getMetadataUri(address);\n}\n\n/**\n * @internal\n * @param address\n * @param provider\n * @param storage\n */\nexport async function fetchContractMetadataFromAddress(\n  address: string,\n  provider: ethers.providers.Provider,\n  storage: IStorage,\n) {\n  const metadataUri = await resolveContractUriFromAddress(address, provider);\n  return await fetchContractMetadata(metadataUri, storage);\n}\n\n/**\n * @internal\n * @param metadataUri\n * @param storage\n */\nexport async function fetchContractMetadata(\n  metadataUri: string,\n  storage: IStorage,\n): Promise<PublishedMetadata> {\n  const metadata = CustomContractMetadataSchema.parse(\n    await storage.get(metadataUri),\n  );\n  const abi = AbiSchema.parse(await storage.get(metadata.abiUri));\n  const bytecode = await storage.getRaw(metadata.bytecodeUri);\n  return {\n    name: metadata.name,\n    abi,\n    bytecode,\n  };\n}\n\n/**\n * Processes ALL supported features and sets whether the passed in abi supports each individual feature\n * @internal\n * @param abi\n * @param features\n * @returns the nested struct of all features and whether they're detected in the abi\n */\nexport function detectFeatures(\n  abi: z.input<typeof AbiSchema>,\n  features: Record<string, Feature> = SUPPORTED_FEATURES,\n): Record<string, FeatureWithEnabled> {\n  const results: Record<string, FeatureWithEnabled> = {};\n  for (const featureKey in features) {\n    const feature = features[featureKey];\n    const enabled = matchesAbiInterface(abi, feature.abis);\n    const childResults = detectFeatures(abi, feature.features);\n    results[featureKey] = {\n      ...feature,\n      features: childResults,\n      enabled,\n    } as FeatureWithEnabled;\n  }\n  return results;\n}\n\n/**\n * Checks whether the given ABI supports a given feature\n * @internal\n * @param abi\n * @param featureName\n */\nexport function isFeatureEnabled(\n  abi: z.input<typeof AbiSchema>,\n  featureName: FeatureName,\n): boolean {\n  const features = detectFeatures(abi);\n  return _featureEnabled(features, featureName);\n}\n\n/**\n * Type guard for contractWrappers depending on passed feature name\n * @internal\n * @param contractWrapper\n * @param featureName\n */\nexport function detectContractFeature<T extends BaseContract>(\n  contractWrapper: ContractWrapper<BaseContract>,\n  featureName: FeatureName,\n): contractWrapper is ContractWrapper<T> {\n  return isFeatureEnabled(AbiSchema.parse(contractWrapper.abi), featureName);\n}\n\n/**\n * Searches the feature map for featureName and returns whether its enabled\n * @internal\n * @param features\n * @param featureName\n */\nfunction _featureEnabled(\n  features: Record<string, FeatureWithEnabled>,\n  featureName: FeatureName,\n): boolean {\n  const keys = Object.keys(features);\n  if (!keys.includes(featureName)) {\n    let found = false;\n    for (const key of keys) {\n      const f = features[key];\n      found = _featureEnabled(\n        f.features as Record<string, FeatureWithEnabled>,\n        featureName,\n      );\n      if (found) {\n        break;\n      }\n    }\n    return found;\n  }\n  const feature = features[featureName];\n  return feature.enabled;\n}\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonPrimarySaleSchema,\n  CommonRoyaltySchema,\n  CommonSymbolSchema,\n  CommonTrustedForwarderSchema,\n  MerkleSchema,\n} from \"./common\";\nimport { z } from \"zod\";\nimport { BigNumberishSchema, JsonSchema } from \"../shared\";\n\n/**\n * @internal\n */\nexport const BYOCContractMetadataSchema = CommonContractSchema.catchall(\n  z.lazy(() => JsonSchema),\n);\n\nexport type CustomContractMetadata = z.input<typeof BYOCContractMetadataSchema>;\n\n/**\n * @internal\n */\nexport const CustomContractInput = BYOCContractMetadataSchema.merge(\n  CommonRoyaltySchema.merge(MerkleSchema).merge(CommonSymbolSchema).partial(),\n);\n\n/**\n * @internal\n */\nexport const CustomContractOutput = CommonContractOutputSchema.merge(\n  CommonRoyaltySchema.merge(MerkleSchema).merge(CommonSymbolSchema).partial(),\n);\n\n/**\n * @internal\n */\nexport const CustomContractDeploy = CustomContractInput.merge(\n  CommonPlatformFeeSchema.merge(CommonPrimarySaleSchema)\n    .merge(CommonTrustedForwarderSchema)\n    .partial(),\n);\n\n/**\n * @internal\n */\nexport const CustomContractSchema = {\n  deploy: CustomContractDeploy,\n  output: CustomContractOutput,\n  input: CustomContractInput,\n};\n\n/**\n * @internal\n */\nexport const CustomContractMetadataSchema = z.object({\n  name: z.string(),\n  abiUri: z.string(),\n  bytecodeUri: z.string(),\n});\n\n/**\n * @internal\n */\nexport const AbiTypeSchema = z\n  .object({\n    type: z.string(),\n    name: z.string(),\n  })\n  .catchall(z.any());\n\n/**\n * @internal\n */\nexport const AbiObjectSchema = z\n  .object({\n    type: z.string(),\n    name: z.string().default(\"\"),\n    inputs: z.array(AbiTypeSchema).default([]),\n    outputs: z.array(AbiTypeSchema).default([]),\n  })\n  .catchall(z.any());\n\n/**\n * @internal\n */\nexport const AbiSchema = z.array(AbiObjectSchema);\n\n/**\n * @internal\n */\nexport const PublishedContractSchema = z.object({\n  id: z.string(),\n  timestamp: BigNumberishSchema,\n  metadataUri: z.string(),\n});\n\nexport type ContractParam = z.infer<typeof AbiTypeSchema>;\nexport type PublishedContract = z.infer<typeof PublishedContractSchema>;\nexport type AbiFunction = {\n  name: string;\n  inputs: z.infer<typeof AbiTypeSchema>[];\n  outputs: z.infer<typeof AbiTypeSchema>[];\n  signature: string;\n};\nexport type PublishedMetadata = {\n  name: string;\n  abi: z.infer<typeof AbiSchema>;\n  bytecode: string;\n};\n","import Erc721Abi from \"../../abis/IERC721.json\";\nimport Erc721EnumerableAbi from \"../../abis/IERC721Enumerable.json\";\nimport Erc721SupplyAbi from \"../../abis/IERC721Supply.json\";\nimport IMintableERC721Abi from \"../../abis/IMintableERC721.json\";\nimport MulticallAbi from \"../../abis/IMulticall.json\";\n\nexport const FEATURE_NFT_BATCH_MINTABLE = {\n  name: \"ERC721BatchMintable\",\n  namespace: \"nft.mint.batch\",\n  docLinks: {\n    sdk: \"sdk.erc721batchmintable\",\n    contracts: \"IMulticall\",\n  },\n  abis: [Erc721Abi, IMintableERC721Abi, MulticallAbi],\n  features: {},\n} as const;\n\nexport const FEATURE_NFT_MINTABLE = {\n  name: \"ERC721Mintable\",\n  namespace: \"nft.mint\",\n  docLinks: {\n    sdk: \"sdk.erc721mintable\",\n    contracts: \"IMintableERC721\",\n  },\n  abis: [Erc721Abi, IMintableERC721Abi],\n  features: {\n    [FEATURE_NFT_BATCH_MINTABLE.name]: FEATURE_NFT_BATCH_MINTABLE,\n  },\n} as const;\n\nexport const FEATURE_NFT_ENUMERABLE = {\n  name: \"ERC721Enumerable\",\n  namespace: \"nft.query.owned\",\n  docLinks: {\n    sdk: \"sdk.erc721enumerable\",\n    contracts: \"ERC721Enumerable\",\n  },\n  abis: [Erc721Abi, Erc721EnumerableAbi],\n  features: {},\n} as const;\n\nexport const FEATURE_NFT_SUPPLY = {\n  name: \"ERC721Supply\",\n  namespace: \"nft.query\",\n  docLinks: {\n    sdk: \"sdk.erc721supply\",\n    contracts: \"ERC721Supply\",\n  },\n  abis: [Erc721Abi, Erc721SupplyAbi],\n  features: {\n    [FEATURE_NFT_ENUMERABLE.name]: FEATURE_NFT_ENUMERABLE,\n  },\n} as const;\n\nexport const FEATURE_NFT = {\n  name: \"ERC721\",\n  namespace: \"nft\",\n  docLinks: {\n    sdk: \"sdk.erc721\",\n    contracts: \"ERC721\",\n  },\n  abis: [Erc721Abi],\n  features: {\n    [FEATURE_NFT_SUPPLY.name]: FEATURE_NFT_SUPPLY,\n    [FEATURE_NFT_MINTABLE.name]: FEATURE_NFT_MINTABLE,\n  },\n} as const;\n","import ERC20Abi from \"../../abis/IERC20.json\";\nimport IMintableERC20Abi from \"../../abis/IMintableERC20.json\";\nimport MulticallAbi from \"../../abis/IMulticall.json\";\n\nexport const FEATURE_TOKEN_BATCH_MINTABLE = {\n  name: \"ERC20BatchMintable\",\n  namespace: \"token.mint.batch\",\n  docLinks: {\n    sdk: \"sdk.erc20batchmintable\",\n    contracts: \"IMulticall\",\n  },\n  abis: [ERC20Abi, IMintableERC20Abi, MulticallAbi],\n  features: {},\n} as const;\n\nexport const FEATURE_TOKEN_MINTABLE = {\n  name: \"ERC20Mintable\",\n  namespace: \"token.mint\",\n  docLinks: {\n    sdk: \"sdk.erc20mintable\",\n    contracts: \"IMintableERC20\",\n  },\n  abis: [ERC20Abi, IMintableERC20Abi],\n  features: {\n    [FEATURE_TOKEN_BATCH_MINTABLE.name]: FEATURE_TOKEN_BATCH_MINTABLE,\n  },\n} as const;\n\nexport const FEATURE_TOKEN = {\n  name: \"ERC20\",\n  namespace: \"token\",\n  docLinks: {\n    sdk: \"sdk.erc20\",\n    contracts: \"ERC20\",\n  },\n  abis: [ERC20Abi],\n  features: {\n    [FEATURE_TOKEN_MINTABLE.name]: FEATURE_TOKEN_MINTABLE,\n  },\n} as const;\n","import Erc1155EnumerableAbi from \"../../abis/IERC1155Enumerable.json\";\nimport Erc1155Abi from \"../../abis/IERC1155.json\";\nimport MulticallAbi from \"../../abis/IMulticall.json\";\nimport IMintableERC1155Abi from \"../../abis/IMintableERC1155.json\";\n\nexport const FEATURE_EDITION_BATCH_MINTABLE = {\n  name: \"ERC1155BatchMintable\",\n  namespace: \"edition.mint.batch\",\n  docLinks: {\n    sdk: \"sdk.erc1155batchmintable\",\n    contracts: \"IMulticall\",\n  },\n  abis: [Erc1155Abi, IMintableERC1155Abi, MulticallAbi],\n  features: {},\n} as const;\n\nexport const FEATURE_EDITION_MINTABLE = {\n  name: \"ERC1155Mintable\",\n  namespace: \"edition.mint\",\n  docLinks: {\n    sdk: \"sdk.erc1155mintable\",\n    contracts: \"IMintableERC1155\",\n  },\n  abis: [Erc1155Abi, IMintableERC1155Abi],\n  features: {\n    [FEATURE_EDITION_BATCH_MINTABLE.name]: FEATURE_EDITION_BATCH_MINTABLE,\n  },\n} as const;\n\nexport const FEATURE_EDITION_ENUMERABLE = {\n  name: \"ERC1155Enumerable\",\n  namespace: \"edition.query\",\n  docLinks: {\n    sdk: \"sdk.erc1155\",\n    contracts: \"ERC1155\",\n  },\n  abis: [Erc1155Abi, Erc1155EnumerableAbi],\n  features: {},\n} as const;\n\nexport const FEATURE_EDITION = {\n  name: \"ERC1155\",\n  namespace: \"edition\",\n  docLinks: {\n    sdk: \"sdk.erc1155enumerable\",\n    contracts: \"ERC1155Enumerable\",\n  },\n  abis: [Erc1155Abi],\n  features: {\n    [FEATURE_EDITION_ENUMERABLE.name]: FEATURE_EDITION_ENUMERABLE,\n    [FEATURE_EDITION_MINTABLE.name]: FEATURE_EDITION_MINTABLE,\n  },\n} as const;\n","import IThirdwebPrimarySaleAbi from \"../../abis/IPrimarySale.json\";\nimport IThirdwebPlatformFeeAbi from \"../../abis/IPlatformFee.json\";\nimport IThirdwebRoyaltyAbi from \"../../abis/IRoyalty.json\";\nimport IPermissionsEnumerableAbi from \"../../abis/IPermissionsEnumerable.json\";\nimport IContractMetadataAbi from \"../../abis/IContractMetadata.json\";\n\nexport const FEATURE_ROYALTY = {\n  name: \"Royalty\",\n  namespace: \"sales\",\n  docLinks: {\n    sdk: \"sdk.contractroyalty\",\n    contracts: \"IThirdwebPrimarySale\",\n  },\n  abis: [IThirdwebRoyaltyAbi],\n  features: {},\n} as const;\n\nexport const FEATURE_PRIMARY_SALE = {\n  name: \"PrimarySale\",\n  namespace: \"sales\",\n  docLinks: {\n    sdk: \"sdk.contractprimarysale\",\n    contracts: \"IThirdwebPrimarySale\",\n  },\n  abis: [IThirdwebPrimarySaleAbi],\n  features: {},\n} as const;\n\nexport const FEATURE_PLATFORM_FEE = {\n  name: \"PlatformFee\",\n  namespace: \"platformFee\",\n  docLinks: {\n    sdk: \"sdk.platformfee\",\n    contracts: \"IThirdwebPlatformFee\",\n  },\n  abis: [IThirdwebPlatformFeeAbi],\n  features: {},\n} as const;\n\nexport const FEATURE_PERMISSIONS = {\n  name: \"Permissions\",\n  namespace: \"roles\",\n  docLinks: {\n    sdk: \"sdk.contractroles\",\n    contracts: \"IPermissionsEnumerable\",\n  },\n  abis: [IPermissionsEnumerableAbi],\n  features: {},\n} as const;\n\nexport const FEATURE_METADATA = {\n  name: \"ContractMetadata\",\n  namespace: \"metadata\",\n  docLinks: {\n    sdk: \"sdk.contractmetadata\",\n    contracts: \"IContractMetadata\",\n  },\n  abis: [IContractMetadataAbi],\n  features: {},\n} as const;\n","import {\n  FEATURE_NFT,\n  FEATURE_NFT_BATCH_MINTABLE,\n  FEATURE_NFT_ENUMERABLE,\n  FEATURE_NFT_MINTABLE,\n  FEATURE_NFT_SUPPLY,\n} from \"./erc721-features\";\nimport {\n  FEATURE_TOKEN,\n  FEATURE_TOKEN_BATCH_MINTABLE,\n  FEATURE_TOKEN_MINTABLE,\n} from \"./erc20-features\";\nimport {\n  FEATURE_EDITION,\n  FEATURE_EDITION_BATCH_MINTABLE,\n  FEATURE_EDITION_ENUMERABLE,\n  FEATURE_EDITION_MINTABLE,\n} from \"./erc1155-features\";\nimport {\n  FEATURE_METADATA,\n  FEATURE_PERMISSIONS,\n  FEATURE_PLATFORM_FEE,\n  FEATURE_PRIMARY_SALE,\n  FEATURE_ROYALTY,\n} from \"./thirdweb-features\";\n\n/**\n * @internal\n */\nexport type Feature =\n  | typeof FEATURE_TOKEN\n  | typeof FEATURE_TOKEN_MINTABLE\n  | typeof FEATURE_TOKEN_BATCH_MINTABLE\n  | typeof FEATURE_NFT\n  | typeof FEATURE_NFT_SUPPLY\n  | typeof FEATURE_NFT_ENUMERABLE\n  | typeof FEATURE_NFT_MINTABLE\n  | typeof FEATURE_NFT_BATCH_MINTABLE\n  | typeof FEATURE_EDITION\n  | typeof FEATURE_EDITION_ENUMERABLE\n  | typeof FEATURE_EDITION_MINTABLE\n  | typeof FEATURE_EDITION_BATCH_MINTABLE\n  | typeof FEATURE_ROYALTY\n  | typeof FEATURE_PLATFORM_FEE\n  | typeof FEATURE_PRIMARY_SALE\n  | typeof FEATURE_PERMISSIONS\n  | typeof FEATURE_METADATA;\n\n/**\n * @internal\n */\nexport type FeatureName = Feature[\"name\"];\n/**\n * @internal\n */\nexport type FeatureWithEnabled = Feature & {\n  features: Record<string, FeatureWithEnabled>;\n  enabled: boolean;\n};\n\n/**\n * @internal\n */\nexport const SUPPORTED_FEATURES: Record<string, Feature> = {\n  [FEATURE_TOKEN.name]: FEATURE_TOKEN,\n  [FEATURE_NFT.name]: FEATURE_NFT,\n  [FEATURE_EDITION.name]: FEATURE_EDITION,\n  [FEATURE_ROYALTY.name]: FEATURE_ROYALTY,\n  [FEATURE_PLATFORM_FEE.name]: FEATURE_PLATFORM_FEE,\n  [FEATURE_PRIMARY_SALE.name]: FEATURE_PRIMARY_SALE,\n  [FEATURE_PERMISSIONS.name]: FEATURE_PERMISSIONS,\n  [FEATURE_METADATA.name]: FEATURE_METADATA,\n};\n","import { constants } from \"ethers\";\nimport { ChainId, SUPPORTED_CHAIN_ID } from \"./chains\";\n\n/**\n * @internal\n */\nexport const OZ_DEFENDER_FORWARDER_ADDRESS =\n  \"0xc82BbE41f2cF04e3a8efA18F7032BDD7f6d98a81\";\n\nconst TWRegistry_address = \"0x7c487845f98938Bb955B1D5AD069d9a30e4131fd\";\nconst TWFactory_address = \"0x5DBC7B840baa9daBcBe9D2492E45D7244B54A2A0\";\nconst ContractPublisher_address = \"0x1e474395f58418e9c594a79abb0152D04C229E8e\"; // TODO finalize, this is\n\n/**\n * @internal\n */\nexport const CONTRACT_ADDRESSES: Record<\n  SUPPORTED_CHAIN_ID,\n  {\n    biconomyForwarder: string;\n    twFactory: string;\n    twRegistry: string;\n    twBYOCRegistry: string;\n    contractDeployer: string;\n    contractMetadataRegistry: string;\n  }\n> = {\n  [ChainId.Mainnet]: {\n    biconomyForwarder: \"0x84a0856b038eaAd1cC7E297cF34A7e72685A8693\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: constants.AddressZero,\n    contractDeployer: constants.AddressZero,\n    contractMetadataRegistry: constants.AddressZero,\n  },\n  [ChainId.Rinkeby]: {\n    biconomyForwarder: \"0xFD4973FeB2031D4409fB57afEE5dF2051b171104\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0x3E6eE864f850F5e5A98bc950B68E181Cf4010F23\",\n    contractDeployer: \"0xBD9fdebD651733e7EEAB8A83536D57023c3d3225\",\n    contractMetadataRegistry: \"0x1e474395f58418e9c594a79abb0152D04C229E8e\",\n  },\n  [ChainId.Goerli]: {\n    biconomyForwarder: constants.AddressZero,\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0xB1Bd9d7942A250BA2Dce27DD601F2ED4211A60C4\",\n    contractDeployer: \"0x25F2Ea750BF8bE10e1139C3a19F7B4e46557D04B\",\n    contractMetadataRegistry: \"0x520B80B85a3B9abfF75F77068116D759a11a455D\",\n  },\n  [ChainId.Polygon]: {\n    biconomyForwarder: \"0x86C80a8aa58e0A4fa09A69624c31Ab2a6CAD56b8\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: constants.AddressZero,\n    contractDeployer: constants.AddressZero,\n    contractMetadataRegistry: constants.AddressZero,\n  },\n  [ChainId.Mumbai]: {\n    biconomyForwarder: \"0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0x3F17972CB27506eb4a6a3D59659e0B57a43fd16C\",\n    contractDeployer: \"0x14905281051Cc0Cf1064Ad16c319DBe324C62196\",\n    contractMetadataRegistry: \"0x25F2Ea750BF8bE10e1139C3a19F7B4e46557D04B\",\n  },\n  [ChainId.Avalanche]: {\n    biconomyForwarder: \"0x64CD353384109423a966dCd3Aa30D884C9b2E057\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: constants.AddressZero,\n    contractDeployer: constants.AddressZero,\n    contractMetadataRegistry: constants.AddressZero,\n  },\n  [ChainId.AvalancheFujiTestnet]: {\n    biconomyForwarder: \"0x6271Ca63D30507f2Dcbf99B52787032506D75BBF\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0x3E6eE864f850F5e5A98bc950B68E181Cf4010F23\",\n    contractDeployer: \"0xBD9fdebD651733e7EEAB8A83536D57023c3d3225\",\n    contractMetadataRegistry: \"0x1e474395f58418e9c594a79abb0152D04C229E8e\",\n  },\n  [ChainId.Fantom]: {\n    biconomyForwarder: constants.AddressZero,\n    twFactory: \"0x97EA0Fcc552D5A8Fb5e9101316AAd0D62Ea0876B\",\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: constants.AddressZero,\n    contractDeployer: constants.AddressZero,\n    contractMetadataRegistry: constants.AddressZero,\n  },\n  [ChainId.FantomTestnet]: {\n    biconomyForwarder: constants.AddressZero,\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0x3E6eE864f850F5e5A98bc950B68E181Cf4010F23\",\n    contractDeployer: \"0xBD9fdebD651733e7EEAB8A83536D57023c3d3225\",\n    contractMetadataRegistry: \"0x1e474395f58418e9c594a79abb0152D04C229E8e\",\n  },\n};\n\n/**\n * @internal\n */\nexport function getContractAddressByChainId(\n  chainId: SUPPORTED_CHAIN_ID | ChainId.Hardhat,\n  contractName: keyof typeof CONTRACT_ADDRESSES[SUPPORTED_CHAIN_ID],\n): string {\n  // for testing only\n  if (chainId === ChainId.Hardhat) {\n    if (contractName === \"twFactory\") {\n      return process.env.factoryAddress as string;\n    } else if (contractName === \"twRegistry\") {\n      return process.env.registryAddress as string;\n    } else if (contractName === \"twBYOCRegistry\") {\n      return process.env.byocRegistryAddress as string;\n    } else if (contractName === \"contractDeployer\") {\n      return process.env.contractDeployerAddress as string;\n    } else if (contractName === \"contractMetadataRegistry\") {\n      return process.env.contractMetadataRegistryAddress as string;\n    } else {\n      return constants.AddressZero;\n    }\n  }\n  // real output here\n  return CONTRACT_ADDRESSES[chainId][contractName];\n}\n\n/**\n * @internal\n */\nexport function getContractPublisherAddress() {\n  if (process.env.contractPublisherAddress) {\n    return process.env.contractPublisherAddress as string;\n  } else {\n    return ContractPublisher_address;\n  }\n}\n","import { BigNumber, ethers } from \"ethers\";\nimport { ChainId } from \"./chains\";\n\n/**\n *\n * @internal\n */\nexport type ChainlinkInfo = {\n  vrfCoordinator: string;\n  linkTokenAddress: string;\n  keyHash: string;\n  fees: BigNumber;\n};\n\n/**\n *\n * @internal\n */\nexport const ChainlinkVrf: Record<number, ChainlinkInfo> = {\n  [ChainId.Polygon]: {\n    vrfCoordinator: \"0x3d2341ADb2D31f1c5530cDC622016af293177AE0\",\n    linkTokenAddress: \"0xb0897686c545045aFc77CF20eC7A532E3120E0F1\",\n    keyHash:\n      \"0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da\",\n    fees: ethers.utils.parseEther(\"0.0001\"),\n  },\n  [ChainId.Mumbai]: {\n    vrfCoordinator: \"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255\",\n    linkTokenAddress: \"0x326C977E6efc84E512bB9C30f76E30c160eD06FB\",\n    keyHash:\n      \"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4\",\n    fees: ethers.utils.parseEther(\"0.0001\"),\n  },\n  [ChainId.Rinkeby]: {\n    vrfCoordinator: \"0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B\",\n    linkTokenAddress: \"0x01be23585060835e02b77ef475b0cc51aa1e0709\",\n    keyHash:\n      \"0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311\",\n    fees: ethers.utils.parseEther(\"0.1\"),\n  },\n  [ChainId.Mainnet]: {\n    vrfCoordinator: \"0xf0d54349aDdcf704F77AE15b96510dEA15cb7952\",\n    linkTokenAddress: \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n    keyHash:\n      \"0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445\",\n    fees: ethers.utils.parseEther(\"2\"),\n  },\n  [ChainId.Hardhat]: {\n    vrfCoordinator: \"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255\",\n    linkTokenAddress: \"0x326C977E6efc84E512bB9C30f76E30c160eD06FB\",\n    keyHash:\n      \"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4\",\n    fees: ethers.utils.parseEther(\"0.0001\"),\n  },\n};\n","/**\n * @internal\n */\nimport { utils } from \"ethers\";\n\n/**\n * @internal\n */\nexport const InterfaceId_IERC721 = utils.arrayify(\"0x80ac58cd\");\n\n/**\n * @internal\n */\nexport const InterfaceId_IERC1155 = utils.arrayify(\"0xd9b67a26\");\n","/**\n * @public\n */\nexport enum EventType {\n  /**\n   * The event is triggered when the transaction is submitted and completed.\n   * The transaction is submitted when it is sent to the relayer or the blockchain.\n   * The transaction is completed when it is confirmed by the blockchain.\n   *\n   * status: \"submitted\" | \"completed\"\n   * transactionHash: string of the transaction hash\n   */\n  Transaction = \"transaction\",\n\n  /**\n   * The event is triggered when wallet sign message is requested and completed.\n   *\n   * status: \"submitted\" | \"completed\"\n   * message: message to sign\n   * signature: signature of the message (only available when status is \"completed\")\n   */\n  Signature = \"signature\",\n}\n","import {\n  IContractMetadata,\n  IThirdwebContract,\n  ThirdwebContract,\n} from \"contracts\";\nimport { z } from \"zod\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport { TransactionResult } from \"../types\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport {\n  detectContractFeature,\n  resolveContractUriFromAddress,\n} from \"../../common\";\n\n/**\n * @internal\n */\nexport interface IGenericSchemaType {\n  deploy: z.AnyZodObject;\n  input: z.AnyZodObject;\n  output: z.AnyZodObject;\n}\n\n/**\n * Handles metadata for a Contract\n * @public\n */\nexport class ContractMetadata<\n  TContract extends IThirdwebContract | ThirdwebContract,\n  TSchema extends IGenericSchemaType,\n> {\n  private contractWrapper;\n  private schema;\n  private storage;\n\n  constructor(\n    contractWrapper: ContractWrapper<TContract>,\n    schema: TSchema,\n    storage: IStorage,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.schema = schema;\n    this.storage = storage;\n  }\n  /**\n   * @internal\n   */\n  public parseOutputMetadata(metadata: any): z.output<TSchema[\"output\"]> {\n    return this.schema.output.parse(metadata);\n  }\n\n  /**\n   * @internal\n   */\n  public parseInputMetadata(metadata: any): z.input<TSchema[\"input\"]> {\n    return this.schema.input.parse(metadata);\n  }\n  /**\n   *\n   * @returns the metadata of the given contract\n   */\n  public async get() {\n    let uri;\n    let data;\n    if (this.supportsContractMetadata(this.contractWrapper)) {\n      uri = await this.contractWrapper.readContract.contractURI();\n      data = await this.storage.get(uri);\n    } else if (this.isThirdWebContract(this.contractWrapper)) {\n      uri = await resolveContractUriFromAddress(\n        this.contractWrapper.readContract.address,\n        this.contractWrapper.getProvider(),\n      );\n      const publishMeta = await this.storage.get(uri);\n      data = publishMeta.deployMetadata || publishMeta;\n    } else {\n      throw new Error(\"Contract does not support reading contract metadata\");\n    }\n\n    return this.parseOutputMetadata(data);\n  }\n  /**\n   *\n   * @param metadata - the metadata to set\n   * @returns\n   */\n  public async set(metadata: z.input<TSchema[\"input\"]>) {\n    const uri = await this._parseAndUploadMetadata(metadata);\n\n    const wrapper = this.contractWrapper;\n    if (this.supportsContractMetadata(wrapper)) {\n      const receipt = await wrapper.sendTransaction(\"setContractURI\", [uri]);\n      return { receipt, data: this.get } as TransactionResult<\n        z.output<TSchema[\"output\"]>\n      >;\n    } else {\n      throw new Error(\"Contract does not support updating contract metadata\");\n    }\n  }\n\n  public async update(metadata: Partial<z.input<TSchema[\"input\"]>>) {\n    return await this.set({\n      ...(await this.get()),\n      ...metadata,\n    });\n  }\n\n  /**\n   *\n   * @internal\n   * @param metadata - the metadata to set\n   * @returns\n   */\n  public async _parseAndUploadMetadata(metadata: z.input<TSchema[\"input\"]>) {\n    const parsedMetadata = this.parseInputMetadata(metadata);\n    return this.storage.uploadMetadata(parsedMetadata);\n  }\n\n  private supportsContractMetadata(\n    contractWrapper: ContractWrapper<any>,\n  ): contractWrapper is ContractWrapper<IContractMetadata> {\n    return detectContractFeature<IContractMetadata>(\n      contractWrapper,\n      \"ContractMetadata\",\n    );\n  }\n\n  private isThirdWebContract(\n    contractWrapper: ContractWrapper<any>,\n  ): contractWrapper is ContractWrapper<ThirdwebContract> {\n    return \"tw_initializeOwner\" in contractWrapper.readContract.functions;\n  }\n}\n","import { TransactionResult } from \"../types\";\nimport { getRoleHash, Role } from \"../../common/role\";\nimport invariant from \"tiny-invariant\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { MissingRoleError } from \"../../common/error\";\nimport { IPermissionsEnumerable } from \"contracts\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { FEATURE_PERMISSIONS } from \"../../constants/thirdweb-features\";\n\n/**\n * Handle contract permissions\n * @remarks Configure roles and permissions for a contract, to restrict certain actions.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const rolesAndMembers = await contract.roles.getAll();\n * await contract.roles.grantRole(\"admin\", \"0x...\");\n * ```\n * @public\n */\nexport class ContractRoles<\n  TContract extends IPermissionsEnumerable,\n  TRole extends Role,\n> implements DetectableFeature\n{\n  featureName = FEATURE_PERMISSIONS.name;\n  private contractWrapper;\n  private readonly roles;\n\n  constructor(\n    contractWrapper: ContractWrapper<TContract>,\n    roles: readonly TRole[],\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.roles = roles;\n  }\n\n  /** **************************\n   * READ FUNCTIONS\n   ****************************/\n\n  /**\n   * Call this to get get a list of addresses for all supported roles on the contract.\n   *\n   * @remarks See {@link ContractRoles.get} to get a list of addresses that are members of a specific role.\n   * @returns A record of {@link Role}s to lists of addresses that are members of the given role.\n   * @throws If the contract does not support roles this will throw an error.\n   *\n   * @public\n   */\n  public async getAll(): Promise<Record<TRole, string[]>> {\n    invariant(this.roles.length, \"this contract has no support for roles\");\n    const roles = {} as Record<TRole, string[]>;\n    for (const role of this.roles) {\n      roles[role] = await this.get(role);\n    }\n    return roles;\n  }\n\n  /**\n   * Call this to get a list of addresses that are members of a specific role.\n   *\n   * @remarks See {@link ContractRoles.getAll} to get get a list of addresses for all supported roles on the contract.\n   * @param role - The Role to to get a memberlist for.\n   * @returns The list of addresses that are members of the specific role.\n   * @throws If you are requestiong a role that does not exist on the contract this will throw an error.\n   *\n   * @example Say you want to get the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses: string[] = await contract.getRoleMemberList(\"minter\");\n   * ```\n   *\n   * @public\n   */\n  public async get(role: TRole): Promise<string[]> {\n    invariant(\n      this.roles.includes(role),\n      `this contract does not support the \"${role}\" role`,\n    );\n\n    const roleHash = getRoleHash(role);\n    const count = (\n      await this.contractWrapper.readContract.getRoleMemberCount(roleHash)\n    ).toNumber();\n    return await Promise.all(\n      Array.from(Array(count).keys()).map((i) =>\n        this.contractWrapper.readContract.getRoleMember(roleHash, i),\n      ),\n    );\n  }\n\n  /**\n   * Call this to OVERWRITE the list of addresses that are members of specific roles.\n   *\n   * Every role in the list will be overwritten with the new list of addresses provided with them.\n   * If you want to add or remove addresses for a single address use {@link ContractRoles.grant} and {@link ContractRoles.revoke} respectively instead.\n   * @param rolesWithAddresses - A record of {@link Role}s to lists of addresses that should be members of the given role.\n   * @throws If you are requestiong a role that does not exist on the contract this will throw an error.\n   * @example Say you want to overwrite the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses: string[] = await contract.getRoleMemberList(\"minter\");\n   * await contract.setAll({\n   *  minter: []\n   * });\n   * console.log(await contract.getRoleMemberList(\"minter\")); // No matter what members had the role before, the new list will be set to []\n   * ```\n   * @public\n   *\n   * */\n  public async setAll(rolesWithAddresses: {\n    [key in TRole]?: string[];\n  }): Promise<TransactionResult> {\n    const roles = Object.keys(rolesWithAddresses) as TRole[];\n    invariant(roles.length, \"you must provide at least one role to set\");\n    invariant(\n      roles.every((role) => this.roles.includes(role)),\n      \"this contract does not support the given role\",\n    );\n    const currentRoles = await this.getAll();\n    const encoded: string[] = [];\n    // add / remove admin role at the end so we don't revoke admin then grant\n    const sortedRoles = roles.sort((role) => (role === \"admin\" ? 1 : -1));\n    for (let i = 0; i < sortedRoles.length; i++) {\n      const role = sortedRoles[i];\n      const addresses: string[] = rolesWithAddresses[role] || [];\n      const currentAddresses = currentRoles[role] || [];\n      const toAdd = addresses.filter(\n        (address) => !currentAddresses.includes(address),\n      );\n      const toRemove = currentAddresses.filter(\n        (address) => !addresses.includes(address),\n      );\n      if (toAdd.length) {\n        toAdd.forEach((address) => {\n          encoded.push(\n            this.contractWrapper.readContract.interface.encodeFunctionData(\n              \"grantRole\",\n              [getRoleHash(role), address],\n            ),\n          );\n        });\n      }\n      if (toRemove.length) {\n        for (let j = 0; j < toRemove.length; j++) {\n          const address = toRemove[j];\n          const revokeFunctionName = (await this.getRevokeRoleFunctionName(\n            address,\n          )) as any;\n          encoded.push(\n            this.contractWrapper.readContract.interface.encodeFunctionData(\n              revokeFunctionName,\n              [getRoleHash(role), address],\n            ),\n          );\n        }\n      }\n    }\n    return {\n      receipt: await this.contractWrapper.multiCall(encoded),\n    };\n  }\n\n  /**\n   * Throws an error if an address is missing the roles specified.\n   *\n   * @param roles - The roles to check\n   * @param address - The address to check\n   *\n   * @internal\n   */\n  public async verify(roles: TRole[], address: string): Promise<void> {\n    await Promise.all(\n      roles.map(async (role) => {\n        const members = await this.get(role);\n        if (\n          !members.map((a) => a.toLowerCase()).includes(address.toLowerCase())\n        ) {\n          throw new MissingRoleError(address, role);\n        }\n      }),\n    );\n  }\n\n  /** **************************\n   * WRITE FUNCTIONS\n   ****************************/\n\n  /**\n   * Call this to grant a role to a specific address.\n   *\n   * @remarks\n   *\n   * Make sure you are sure you want to grant the role to the address.\n   *\n   * @param role - The {@link Role} to grant to the address\n   * @param address - The address to grant the role to\n   * @returns The transaction receipt\n   * @throws If you are trying to grant does not exist on the contract this will throw an error.\n   *\n   * @public\n   */\n  public async grant(role: TRole, address: string): Promise<TransactionResult> {\n    invariant(\n      this.roles.includes(role),\n      `this contract does not support the \"${role}\" role`,\n    );\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"grantRole\", [\n        getRoleHash(role),\n        address,\n      ]),\n    };\n  }\n\n  /**\n   * Call this to revoke a role from a specific address.\n   *\n   * @remarks\n   *\n   * -- Caution --\n   *\n   * This will let you remove yourself from the role, too.\n   * If you remove yourself from the admin role, you will no longer be able to administer the module.\n   * There is no way to recover from this.\n   *\n   * @param role - The {@link Role} to revoke\n   * @param address - The address to revoke the role from\n   * @returns The transaction receipt\n   * @throws If you are trying to revoke does not exist on the module this will throw an error.\n   *\n   * @public\n   */\n  public async revoke(\n    role: TRole,\n    address: string,\n  ): Promise<TransactionResult> {\n    invariant(\n      this.roles.includes(role),\n      `this contract does not support the \"${role}\" role`,\n    );\n    const revokeFunctionName = await this.getRevokeRoleFunctionName(address);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(revokeFunctionName, [\n        getRoleHash(role),\n        address,\n      ]),\n    };\n  }\n\n  /** **************************\n   * PRIVATE FUNCTIONS\n   ****************************/\n\n  private async getRevokeRoleFunctionName(address: string) {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    if (signerAddress.toLowerCase() === address.toLowerCase()) {\n      return \"renounceRole\";\n    }\n    return \"revokeRole\";\n  }\n}\n","import { IRoyalty, IThirdwebContract, ThirdwebContract } from \"contracts\";\nimport { CommonRoyaltySchema } from \"../../schema/contracts/common\";\nimport { ContractMetadata, IGenericSchemaType } from \"./contract-metadata\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { z } from \"zod\";\nimport { TransactionResult } from \"../types\";\nimport { BigNumberish } from \"ethers\";\nimport { FEATURE_ROYALTY } from \"../../constants/thirdweb-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\n\n/**\n * Handle contract royalties\n * @remarks Configure royalties for an entire contract or a particular token.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const royaltyInfo = await contract.royalties.getDefaultRoyaltyInfo();\n * await contract.roles.setTokenRoyaltyInfo(tokenId, {\n *   seller_fee_basis_points: 100, // 1% royalty fee\n *   fee_recipient: \"0x...\", // the fee recipient\n * });\n * ```\n * @public\n */\nexport class ContractRoyalty<\n  TContract extends IRoyalty & (IThirdwebContract | ThirdwebContract),\n  TSchema extends IGenericSchemaType,\n> implements DetectableFeature\n{\n  featureName = FEATURE_ROYALTY.name;\n  private contractWrapper;\n  private metadata;\n\n  constructor(\n    contractWrapper: ContractWrapper<TContract>,\n    metadata: ContractMetadata<TContract, TSchema>,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n  }\n\n  /**\n   * Gets the royalty recipient and BPS (basis points) of the contract\n   * @returns - The royalty recipient and BPS\n   */\n  public async getDefaultRoyaltyInfo() {\n    const [royaltyRecipient, royaltyBps] =\n      await this.contractWrapper.readContract.getDefaultRoyaltyInfo();\n    // parse it on the way out to make sure we default things if they are not set\n    return CommonRoyaltySchema.parse({\n      fee_recipient: royaltyRecipient,\n      seller_fee_basis_points: royaltyBps,\n    });\n  }\n\n  /**\n   * Gets the royalty recipient and BPS (basis points) of a particular token\n   * @returns - The royalty recipient and BPS\n   */\n  public async getTokenRoyaltyInfo(tokenId: BigNumberish) {\n    const [royaltyRecipient, royaltyBps] =\n      await this.contractWrapper.readContract.getRoyaltyInfoForToken(tokenId);\n    return CommonRoyaltySchema.parse({\n      fee_recipient: royaltyRecipient,\n      seller_fee_basis_points: royaltyBps,\n    });\n  }\n\n  /**\n   * Set the royalty recipient and fee for a contract\n   * @param royaltyData - the royalty recipient and fee\n   */\n  public async setDefaultRoyaltyInfo(\n    royaltyData: z.input<typeof CommonRoyaltySchema>,\n  ): Promise<TransactionResult<z.output<typeof CommonRoyaltySchema>>> {\n    // read the metadata from the contract\n    const oldMetadata = await this.metadata.get();\n\n    // update the metadata with the new royalty data\n    // if one of the keys is \"undefined\" it will be ignored (which is the desired behavior)\n    const mergedMetadata = this.metadata.parseInputMetadata({\n      ...oldMetadata,\n      ...royaltyData,\n    });\n\n    // why not use this.metadata.set()? - because that would end up sending it's own separate transaction to `setContractURI`\n    // but we want to send both the `setRoyaltyInfo` and `setContractURI` in one transaction!\n    const contractURI = await this.metadata._parseAndUploadMetadata(\n      mergedMetadata,\n    );\n\n    if (this.canUpdateContractUri(this.contractWrapper)) {\n      // encode both the functions we want to send\n      const encoded = [\n        this.contractWrapper.readContract.interface.encodeFunctionData(\n          \"setDefaultRoyaltyInfo\",\n          [\n            mergedMetadata.fee_recipient,\n            mergedMetadata.seller_fee_basis_points,\n          ],\n        ),\n        this.contractWrapper.readContract.interface.encodeFunctionData(\n          \"setContractURI\",\n          [contractURI],\n        ),\n      ];\n      // actually send the transaction and return the receipt + a way to get the new royalty info\n      return {\n        receipt: await this.contractWrapper.multiCall(encoded),\n        data: () => this.getDefaultRoyaltyInfo(),\n      };\n    } else {\n      throw new Error(\n        \"Updating royalties requires implementing ContractMetadata in your contract to support marketplaces like OpenSea.\",\n      );\n    }\n  }\n\n  /**\n   * Set the royalty recipient and fee for a particular token\n   * @param tokenId - the token id\n   * @param royaltyData - the royalty recipient and fee\n   */\n  public async setTokenRoyaltyInfo(\n    tokenId: BigNumberish,\n    royaltyData: z.input<typeof CommonRoyaltySchema>,\n  ) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"setRoyaltyInfoForToken\",\n        [\n          tokenId,\n          royaltyData.fee_recipient,\n          royaltyData.seller_fee_basis_points,\n        ],\n      ),\n      data: () => this.getDefaultRoyaltyInfo(),\n    };\n  }\n\n  private canUpdateContractUri(\n    contractWrapper: ContractWrapper<any>,\n  ): contractWrapper is ContractWrapper<IThirdwebContract> {\n    return \"setContractURI\" in contractWrapper.readContract.functions;\n  }\n}\n","import { IPrimarySale } from \"contracts\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { TransactionResult } from \"../types\";\nimport { FEATURE_PRIMARY_SALE } from \"../../constants/thirdweb-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\n\n/**\n * Handle primary sales recipients\n * @remarks Configure primary sale recipients for an entire contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const salesRecipient = await contract.sales.getRecipient();\n * await contract.roles.setRecipient(recipientWalletAddress);\n * ```\n * @public\n */\nexport class ContractPrimarySale<TContract extends IPrimarySale>\n  implements DetectableFeature\n{\n  featureName = FEATURE_PRIMARY_SALE.name;\n  private contractWrapper;\n\n  constructor(contractWrapper: ContractWrapper<TContract>) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the primary sale recipient.\n   * @returns the wallet address.\n   */\n  public async getRecipient(): Promise<string> {\n    return await this.contractWrapper.readContract.primarySaleRecipient();\n  }\n\n  /**\n   * Set the primary sale recipient\n   * @param recipient - the wallet address\n   */\n  public async setRecipient(recipient: string): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"setPrimarySaleRecipient\",\n        [recipient],\n      ),\n    };\n  }\n}\n","import { IStorage } from \"../interfaces/IStorage\";\nimport { ContractMetadata } from \"./contract-metadata\";\nimport { DropERC20, DropERC721, IERC20, IERC20Metadata } from \"contracts\";\nimport { BigNumber, constants, ethers } from \"ethers\";\nimport { isNativeToken } from \"../../common/currency\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { Amount, ClaimCondition, ClaimConditionInput } from \"../../types\";\nimport deepEqual from \"deep-equal\";\nimport { ClaimEligibility } from \"../../enums\";\nimport { TransactionResult } from \"../types\";\nimport {\n  getClaimerProofs,\n  processClaimConditionInputs,\n  transformResultToClaimCondition,\n  updateExistingClaimConditions,\n} from \"../../common/claim-conditions\";\n\nimport { detectContractFeature } from \"../../common/feature-detection\";\nimport { PriceSchema } from \"../../schema\";\nimport { includesErrorMessage } from \"../../common\";\nimport ERC20Abi from \"../../../abis/IERC20.json\";\nimport { isNode } from \"../../common/utils\";\n\n/**\n * Manages claim conditions for NFT Drop contracts\n * @public\n */\nexport class DropClaimConditions<TContract extends DropERC721 | DropERC20> {\n  private contractWrapper;\n  private metadata;\n  private storage: IStorage;\n\n  constructor(\n    contractWrapper: ContractWrapper<TContract>,\n    metadata: ContractMetadata<TContract, any>,\n    storage: IStorage,\n  ) {\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n  }\n\n  /** ***************************************\n   * READ FUNCTIONS\n   *****************************************/\n\n  /**\n   * Get the currently active claim condition\n   *\n   * @returns the claim condition metadata\n   */\n  public async getActive(): Promise<ClaimCondition> {\n    const id =\n      await this.contractWrapper.readContract.getActiveClaimConditionId();\n    const mc = await this.contractWrapper.readContract.getClaimConditionById(\n      id,\n    );\n    const metadata = await this.metadata.get();\n    return await transformResultToClaimCondition(\n      mc,\n      await this.getTokenDecimals(),\n      this.contractWrapper.getProvider(),\n      metadata.merkle,\n      this.storage,\n    );\n  }\n\n  /**\n   * Get all the claim conditions\n   *\n   * @returns the claim conditions metadata\n   */\n  public async getAll(): Promise<ClaimCondition[]> {\n    const claimCondition =\n      await this.contractWrapper.readContract.claimCondition();\n    const startId = claimCondition.currentStartId.toNumber();\n    const count = claimCondition.count.toNumber();\n    const conditions = [];\n    for (let i = startId; i < startId + count; i++) {\n      conditions.push(\n        await this.contractWrapper.readContract.getClaimConditionById(i),\n      );\n    }\n    const metadata = await this.metadata.get();\n    const decimals = await this.getTokenDecimals();\n    return Promise.all(\n      conditions.map((c) =>\n        transformResultToClaimCondition(\n          c,\n          decimals,\n          this.contractWrapper.getProvider(),\n          metadata.merkle,\n          this.storage,\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Can Claim\n   *\n   * @remarks Check if the drop can currently be claimed.\n   *\n   * @example\n   * ```javascript\n   * // Quantity of tokens to check claimability of\n   * const quantity = 1;\n   * const canClaim = await contract.canClaim(quantity);\n   * ```\n   */\n  public async canClaim(\n    quantity: Amount,\n    addressToCheck?: string,\n  ): Promise<boolean> {\n    // TODO switch to use verifyClaim\n    return (\n      (await this.getClaimIneligibilityReasons(quantity, addressToCheck))\n        .length === 0\n    );\n  }\n\n  /**\n   * For any claim conditions that a particular wallet is violating,\n   * this function returns human readable information about the\n   * breaks in the condition that can be used to inform the user.\n   *\n   * @param quantity - The desired quantity that would be claimed.\n   * @param addressToCheck - The wallet address, defaults to the connected wallet.\n   *\n   */\n  public async getClaimIneligibilityReasons(\n    quantity: Amount,\n    addressToCheck?: string,\n  ): Promise<ClaimEligibility[]> {\n    const reasons: ClaimEligibility[] = [];\n    let activeConditionIndex: BigNumber;\n    let claimCondition: ClaimCondition;\n\n    const decimals = await this.getTokenDecimals();\n    const quantityWithDecimals = ethers.utils.parseUnits(\n      PriceSchema.parse(quantity),\n      decimals,\n    );\n\n    if (addressToCheck === undefined) {\n      try {\n        addressToCheck = await this.contractWrapper.getSignerAddress();\n      } catch (err) {\n        console.warn(\"failed to get signer address\", err);\n      }\n    }\n\n    // if we have been unable to get a signer address, we can't check eligibility, so return a NoWallet error reason\n    if (!addressToCheck) {\n      return [ClaimEligibility.NoWallet];\n    }\n\n    try {\n      [activeConditionIndex, claimCondition] = await Promise.all([\n        this.contractWrapper.readContract.getActiveClaimConditionId(),\n        this.getActive(),\n      ]);\n    } catch (err: any) {\n      if (\n        includesErrorMessage(err, \"!CONDITION\") ||\n        includesErrorMessage(err, \"no active mint condition\")\n      ) {\n        reasons.push(ClaimEligibility.NoClaimConditionSet);\n        return reasons;\n      }\n      reasons.push(ClaimEligibility.Unknown);\n      return reasons;\n    }\n\n    if (claimCondition.availableSupply !== \"unlimited\") {\n      const supplyWithDecimals = ethers.utils.parseUnits(\n        claimCondition.availableSupply,\n        decimals,\n      );\n\n      if (supplyWithDecimals.lt(quantityWithDecimals)) {\n        reasons.push(ClaimEligibility.NotEnoughSupply);\n      }\n    }\n\n    // check for merkle root inclusion\n    const merkleRootArray = ethers.utils.stripZeros(\n      claimCondition.merkleRootHash,\n    );\n    if (merkleRootArray.length > 0) {\n      const merkleLower = claimCondition.merkleRootHash.toString();\n      const metadata = await this.metadata.get();\n      const proofs = await getClaimerProofs(\n        addressToCheck,\n        merkleLower,\n        await this.getTokenDecimals(),\n        metadata.merkle,\n        this.storage,\n      );\n      try {\n        const [validMerkleProof] =\n          await this.contractWrapper.readContract.verifyClaimMerkleProof(\n            activeConditionIndex,\n            addressToCheck,\n            quantity,\n            proofs.proof,\n            proofs.maxClaimable,\n          );\n        if (!validMerkleProof) {\n          reasons.push(ClaimEligibility.AddressNotAllowed);\n          return reasons;\n        }\n      } catch (e) {\n        reasons.push(ClaimEligibility.AddressNotAllowed);\n        return reasons;\n      }\n    }\n\n    // check for claim timestamp between claims\n    const [lastClaimedTimestamp, timestampForNextClaim] =\n      await this.contractWrapper.readContract.getClaimTimestamp(\n        activeConditionIndex,\n        addressToCheck,\n      );\n\n    const now = BigNumber.from(Date.now()).div(1000);\n\n    if (lastClaimedTimestamp.gt(0) && now.lt(timestampForNextClaim)) {\n      // contract will return MaxUint256 if user has already claimed and cannot claim again\n      if (timestampForNextClaim.eq(constants.MaxUint256)) {\n        reasons.push(ClaimEligibility.AlreadyClaimed);\n      } else {\n        reasons.push(ClaimEligibility.WaitBeforeNextClaimTransaction);\n      }\n    }\n\n    // if not within a browser conetext, check for wallet balance.\n    // In browser context, let the wallet do that job\n    if (claimCondition.price.gt(0) && isNode()) {\n      const totalPrice = claimCondition.price.mul(BigNumber.from(quantity));\n      const provider = this.contractWrapper.getProvider();\n      if (isNativeToken(claimCondition.currencyAddress)) {\n        const balance = await provider.getBalance(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      } else {\n        const erc20 = new ContractWrapper<IERC20>(\n          provider,\n          claimCondition.currencyAddress,\n          ERC20Abi,\n          {},\n        );\n        const balance = await erc20.readContract.balanceOf(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      }\n    }\n\n    return reasons;\n  }\n\n  /** ***************************************\n   * WRITE FUNCTIONS\n   *****************************************/\n\n  /**\n   * Set public mint conditions\n   *\n   * @remarks Sets the public mint conditions that need to be fullfiled by users to claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * await dropContract.claimConditions.set(claimConditions);\n   * ```\n   *\n   * @param claimConditionInputs - The claim conditions\n   * @param resetClaimEligibilityForAll - Whether to reset the state of who already claimed NFTs previously\n   */\n  public async set(\n    claimConditionInputs: ClaimConditionInput[],\n    resetClaimEligibilityForAll = false,\n  ): Promise<TransactionResult> {\n    // process inputs\n    const { snapshotInfos, sortedConditions } =\n      await processClaimConditionInputs(\n        claimConditionInputs,\n        await this.getTokenDecimals(),\n        this.contractWrapper.getProvider(),\n        this.storage,\n      );\n\n    const merkleInfo: { [key: string]: string } = {};\n    snapshotInfos.forEach((s) => {\n      merkleInfo[s.merkleRoot] = s.snapshotUri;\n    });\n    const metadata = await this.metadata.get();\n    const encoded = [];\n\n    // upload new merkle roots to snapshot URIs if updated\n    if (!deepEqual(metadata.merkle, merkleInfo)) {\n      const mergedMetadata = this.metadata.parseInputMetadata({\n        ...metadata,\n        merkle: merkleInfo,\n      });\n      // using internal method to just upload, avoids one contract call\n      const contractURI = await this.metadata._parseAndUploadMetadata(\n        mergedMetadata,\n      );\n      encoded.push(\n        this.contractWrapper.readContract.interface.encodeFunctionData(\n          \"setContractURI\",\n          [contractURI],\n        ),\n      );\n    }\n\n    encoded.push(\n      this.contractWrapper.readContract.interface.encodeFunctionData(\n        \"setClaimConditions\",\n        [sortedConditions, resetClaimEligibilityForAll],\n      ),\n    );\n\n    return {\n      receipt: await this.contractWrapper.multiCall(encoded),\n    };\n  }\n\n  /**\n   * Update a single claim condition with new data.\n   *\n   * @param index - the index of the claim condition to update, as given by the index from the result of `getAll()`\n   * @param claimConditionInput - the new data to update, previous data will be retained\n   */\n  public async update(\n    index: number,\n    claimConditionInput: ClaimConditionInput,\n  ): Promise<TransactionResult> {\n    const existingConditions = await this.getAll();\n    const newConditionInputs = await updateExistingClaimConditions(\n      index,\n      claimConditionInput,\n      existingConditions,\n    );\n    return await this.set(newConditionInputs);\n  }\n\n  /** ***************************************\n   * PRIVATE FUNCTIONS\n   *****************************************/\n\n  private async getTokenDecimals(): Promise<number> {\n    if (detectContractFeature<IERC20Metadata>(this.contractWrapper, \"ERC20\")) {\n      return this.contractWrapper.readContract.decimals();\n    } else {\n      return Promise.resolve(0);\n    }\n  }\n}\n","import {\n  BaseContract,\n  BigNumber,\n  BytesLike,\n  CallOverrides,\n  Contract,\n  ContractInterface,\n  ContractTransaction,\n  ethers,\n  providers,\n} from \"ethers\";\nimport { RPCConnectionHandler } from \"./rpc-connection-handler\";\nimport { SDKOptions } from \"../../schema/sdk-options\";\nimport {\n  ForwardRequestMessage,\n  GaslessTransaction,\n  NetworkOrSignerOrProvider,\n  PermitRequestMessage,\n} from \"../types\";\nimport { EventType } from \"../../constants/events\";\nimport invariant from \"tiny-invariant\";\nimport {\n  BiconomyForwarderAbi,\n  ForwardRequest,\n  getAndIncrementNonce,\n} from \"../../common/forwarder\";\nimport { Forwarder__factory } from \"contracts\";\nimport { getContractAddressByChainId } from \"../../constants/addresses\";\nimport { signEIP2612Permit } from \"../../common/permit\";\nimport { signTypedDataInternal } from \"../../common/sign\";\nimport { getPolygonGasPriorityFee } from \"../../common/gas-price\";\nimport { ChainId } from \"../../constants\";\nimport { convertToTWError } from \"../../common\";\nimport { isBrowser } from \"../../common/utils\";\n\n/**\n * @internal\n */\nexport class ContractWrapper<\n  TContract extends BaseContract,\n> extends RPCConnectionHandler {\n  private isValidContract = false;\n  private customOverrides: () => CallOverrides = () => ({});\n  /**\n   * @internal\n   */\n  public writeContract;\n  public readContract;\n  public abi;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    contractAddress: string,\n    contractAbi: ContractInterface,\n    options: SDKOptions,\n  ) {\n    super(network, options);\n    this.abi = contractAbi;\n    // set up the contract\n    this.writeContract = new Contract(\n      contractAddress,\n      contractAbi,\n      this.getSignerOrProvider(),\n    ) as TContract;\n    // setup the read only contract\n    this.readContract = this.writeContract.connect(\n      this.getProvider(),\n    ) as TContract;\n  }\n\n  public override updateSignerOrProvider(\n    network: NetworkOrSignerOrProvider,\n  ): void {\n    // update the underlying base class\n    super.updateSignerOrProvider(network);\n    // re-connect the contract with the new signer / provider\n    this.writeContract = this.writeContract.connect(\n      this.getSignerOrProvider(),\n    ) as TContract;\n    // setup the read only contract\n    this.readContract = this.writeContract.connect(\n      this.getProvider(),\n    ) as TContract;\n  }\n\n  /**\n   * @internal\n   */\n  public async getChainID(): Promise<number> {\n    const provider = this.getProvider();\n    const { chainId } = await provider.getNetwork();\n    return chainId;\n  }\n  /**\n   * @internal\n   */\n  public async getSignerAddress(): Promise<string> {\n    const signer = this.getSigner();\n    if (!signer) {\n      throw new Error(\n        \"This action requires a connected wallet to sign the transaction. Please pass a valid signer to the SDK.\",\n      );\n    }\n    return await signer.getAddress();\n  }\n\n  /**\n   * @internal\n   */\n  public callStatic() {\n    return this.writeContract.callStatic;\n  }\n\n  /**\n   * @internal\n   */\n  public async getCallOverrides(): Promise<CallOverrides> {\n    if (isBrowser()) {\n      // When running in the browser, let the wallet suggest gas estimates\n      // this means that the gas speed preferences set in the SDK options are ignored in a browser context\n      // but it also allows users to select their own gas speed prefs per tx from their wallet directly\n      return {};\n    }\n    const feeData = await this.getProvider().getFeeData();\n    const supports1559 = feeData.maxFeePerGas && feeData.maxPriorityFeePerGas;\n    if (supports1559) {\n      const chainId = await this.getChainID();\n      const block = await this.getProvider().getBlock(\"latest\");\n      const baseBlockFee =\n        block && block.baseFeePerGas\n          ? block.baseFeePerGas\n          : ethers.utils.parseUnits(\"1\", \"gwei\");\n      let defaultPriorityFee: BigNumber;\n      if (chainId === ChainId.Mumbai || chainId === ChainId.Polygon) {\n        // for polygon, get fee data from gas station\n        defaultPriorityFee = await getPolygonGasPriorityFee(chainId);\n      } else {\n        // otherwise get it from ethers\n        defaultPriorityFee = BigNumber.from(feeData.maxPriorityFeePerGas);\n      }\n      // then add additional fee based on user preferences\n      const maxPriorityFeePerGas =\n        this.getPreferredPriorityFee(defaultPriorityFee);\n      // See: https://eips.ethereum.org/EIPS/eip-1559 for formula\n      const baseMaxFeePerGas = baseBlockFee.mul(2);\n      const maxFeePerGas = baseMaxFeePerGas.add(maxPriorityFeePerGas);\n      return {\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n      };\n    } else {\n      return {\n        gasPrice: await this.getPreferredGasPrice(),\n      };\n    }\n  }\n\n  /**\n   * Calculates the priority fee per gas according to user preferences\n   * @param defaultPriorityFeePerGas - the base priority fee\n   */\n  private getPreferredPriorityFee(\n    defaultPriorityFeePerGas: BigNumber,\n  ): BigNumber {\n    const speed = this.options.gasSettings.speed;\n    const maxGasPrice = this.options.gasSettings.maxPriceInGwei;\n    let extraTip;\n    switch (speed) {\n      case \"standard\":\n        extraTip = BigNumber.from(0); // default is 2.5 gwei for ETH, 31 gwei for polygon\n        break;\n      case \"fast\":\n        extraTip = defaultPriorityFeePerGas.div(100).mul(5); // + 5% - 2.625 gwei / 32.5 gwei\n        break;\n      case \"fastest\":\n        extraTip = defaultPriorityFeePerGas.div(100).mul(10); // + 10% - 2.75 gwei / 34.1 gwei\n        break;\n    }\n    let txGasPrice = defaultPriorityFeePerGas.add(extraTip);\n    const max = ethers.utils.parseUnits(maxGasPrice.toString(), \"gwei\"); // no more than max gas setting\n    const min = ethers.utils.parseUnits(\"2.5\", \"gwei\"); // no less than 2.5 gwei\n    if (txGasPrice.gt(max)) {\n      txGasPrice = max;\n    }\n    if (txGasPrice.lt(min)) {\n      txGasPrice = min;\n    }\n    return txGasPrice;\n  }\n\n  /**\n   * Calculates the gas price for transactions according to user preferences\n   */\n  public async getPreferredGasPrice(): Promise<BigNumber> {\n    const gasPrice = await this.getProvider().getGasPrice();\n    const speed = this.options.gasSettings.speed;\n    const maxGasPrice = this.options.gasSettings.maxPriceInGwei;\n    let txGasPrice = gasPrice;\n    let extraTip;\n    switch (speed) {\n      case \"standard\":\n        extraTip = BigNumber.from(1); // min 1 wei\n        break;\n      case \"fast\":\n        extraTip = gasPrice.div(100).mul(5); // + 5%\n        break;\n      case \"fastest\":\n        extraTip = gasPrice.div(100).mul(10); // + 10%\n        break;\n    }\n    txGasPrice = txGasPrice.add(extraTip);\n    const max = ethers.utils.parseUnits(maxGasPrice.toString(), \"gwei\");\n    if (txGasPrice.gt(max)) {\n      txGasPrice = max;\n    }\n    return txGasPrice;\n  }\n\n  /**\n   * @internal\n   */\n  private emitTransactionEvent(\n    status: \"submitted\" | \"completed\",\n    transactionHash: string,\n  ) {\n    this.emit(EventType.Transaction, {\n      status,\n      transactionHash,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  public async multiCall(\n    encoded: string[],\n  ): Promise<providers.TransactionReceipt> {\n    return this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * @internal\n   */\n  public async estimateGas(\n    fn: keyof TContract[\"functions\"],\n    args: any[],\n  ): Promise<BigNumber> {\n    return this.writeContract.estimateGas[fn as string](...args);\n  }\n\n  /**\n   * @internal\n   */\n  public withTransactionOverride(hook: () => CallOverrides) {\n    this.customOverrides = hook;\n  }\n\n  /**\n   * @internal\n   */\n  public async sendTransaction(\n    fn: keyof TContract[\"functions\"],\n    args: any[],\n    callOverrides?: CallOverrides,\n  ): Promise<providers.TransactionReceipt> {\n    // one time verification that this is a valid contract (to avoid sending funds to wrong addresses)\n    if (!this.isValidContract) {\n      const code = await this.getProvider().getCode(this.readContract.address);\n      this.isValidContract = code !== \"0x\";\n      if (!this.isValidContract) {\n        throw new Error(\n          \"The address you're trying to send a transaction to is not a smart contract. Make sure you are on the correct network and the contract address is correct\",\n        );\n      }\n    }\n\n    if (!callOverrides) {\n      callOverrides = await this.getCallOverrides();\n    }\n    // if a custom override is set, merge our override with the custom one\n    callOverrides = {\n      ...callOverrides,\n      ...this.customOverrides(),\n    };\n    // clear up the override (single use)\n    this.customOverrides = () => ({});\n    if (\n      this.options?.gasless &&\n      (\"openzeppelin\" in this.options.gasless ||\n        \"biconomy\" in this.options.gasless)\n    ) {\n      const provider = this.getProvider();\n      const txHash = await this.sendGaslessTransaction(fn, args, callOverrides);\n      this.emitTransactionEvent(\"submitted\", txHash);\n      const receipt = await provider.waitForTransaction(txHash);\n      this.emitTransactionEvent(\"completed\", txHash);\n      return receipt;\n    } else {\n      const tx = await this.sendTransactionByFunction(\n        fn as keyof TContract[\"functions\"],\n        args,\n        callOverrides,\n      );\n      this.emitTransactionEvent(\"submitted\", tx.hash);\n      const receipt = tx.wait();\n      this.emitTransactionEvent(\"completed\", tx.hash);\n      return receipt;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private async sendTransactionByFunction(\n    fn: keyof TContract[\"functions\"],\n    args: any[],\n    callOverrides: CallOverrides,\n  ): Promise<ContractTransaction> {\n    const func: ethers.ContractFunction = (this.writeContract.functions as any)[\n      fn\n    ];\n    if (!func) {\n      throw new Error(\"invalid function\");\n    }\n    try {\n      return await func(...args, callOverrides);\n    } catch (e) {\n      const network = await this.getProvider().getNetwork();\n      const signerAddress = await this.getSignerAddress();\n      const contractAddress = await this.readContract.address;\n      throw await convertToTWError(e, network, signerAddress, contractAddress);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private async sendGaslessTransaction(\n    fn: keyof TContract[\"functions\"],\n    args: any[] = [],\n    callOverrides: CallOverrides,\n  ): Promise<string> {\n    const signer = this.getSigner();\n    invariant(\n      signer,\n      \"Cannot execute gasless transaction without valid signer\",\n    );\n\n    const chainId = await this.getChainID();\n    const from = await this.getSignerAddress();\n    const to = this.writeContract.address;\n    const value = callOverrides?.value || 0;\n\n    if (BigNumber.from(value).gt(0)) {\n      throw new Error(\n        \"Cannot send native token value with gasless transaction\",\n      );\n    }\n\n    const data = this.writeContract.interface.encodeFunctionData(\n      fn as any,\n      args as any,\n    );\n\n    const gasEstimate = await (this.writeContract.estimateGas as any)[fn](\n      ...args,\n    );\n    let gas = gasEstimate.mul(2);\n\n    // in some cases WalletConnect doesn't properly gives an estimate for how much gas it would actually use.\n    // it'd estimate ~21740 on polygon.\n    // as a fix, we're setting it to a high arbitrary number (500k) as the gas limit that should cover for most function calls.\n    if (gasEstimate.lt(25000)) {\n      gas = BigNumber.from(500000);\n    }\n\n    const tx: GaslessTransaction = {\n      from,\n      to,\n      data,\n      chainId,\n      gasLimit: gas,\n      functionName: fn.toString(),\n      functionArgs: args,\n      callOverrides,\n    };\n\n    return await this.defaultGaslessSendFunction(tx);\n  }\n\n  public async signTypedData(\n    signer: ethers.Signer,\n    domain: {\n      name: string;\n      version: string;\n      chainId: number;\n      verifyingContract: string;\n    },\n    types: any,\n    message: any,\n  ): Promise<BytesLike> {\n    this.emit(EventType.Signature, {\n      status: \"submitted\",\n      message,\n      signature: \"\",\n    });\n    const { signature: sig } = await signTypedDataInternal(\n      signer,\n      domain,\n      types,\n      message,\n    );\n    this.emit(EventType.Signature, {\n      status: \"completed\",\n      message,\n      signature: sig,\n    });\n    return sig;\n  }\n\n  public parseLogs<T = any>(eventName: string, logs?: providers.Log[]): T[] {\n    if (!logs || logs.length === 0) {\n      return [];\n    }\n    const topic = this.writeContract.interface.getEventTopic(eventName);\n    const parsedLogs = logs.filter((x) => x.topics.indexOf(topic) >= 0);\n    return parsedLogs.map(\n      (l) => this.writeContract.interface.parseLog(l) as unknown as T,\n    );\n  }\n\n  private async defaultGaslessSendFunction(\n    transaction: GaslessTransaction,\n  ): Promise<string> {\n    if (this.options.gasless && \"biconomy\" in this.options.gasless) {\n      return this.biconomySendFunction(transaction);\n    }\n    return this.defenderSendFunction(transaction);\n  }\n\n  private async biconomySendFunction(\n    transaction: GaslessTransaction,\n  ): Promise<string> {\n    invariant(\n      this.options.gasless && \"biconomy\" in this.options.gasless,\n      \"calling biconomySendFunction without biconomy\",\n    );\n    const signer = this.getSigner();\n    const provider = this.getProvider();\n    invariant(signer && provider, \"signer and provider must be set\");\n\n    const forwarder = new ethers.Contract(\n      getContractAddressByChainId(\n        transaction.chainId,\n        \"biconomyForwarder\",\n      ) as string,\n      BiconomyForwarderAbi,\n      provider,\n    );\n    const batchId = 0;\n    const batchNonce = await getAndIncrementNonce(forwarder, \"getNonce\", [\n      transaction.from,\n      batchId,\n    ]);\n\n    const request = {\n      from: transaction.from,\n      to: transaction.to,\n      token: ethers.constants.AddressZero,\n      txGas: transaction.gasLimit.toNumber(),\n      tokenGasPrice: \"0\",\n      batchId,\n      batchNonce: batchNonce.toNumber(),\n      deadline: Math.floor(\n        Date.now() / 1000 +\n          ((this.options?.gasless &&\n            \"biconomy\" in this.options.gasless &&\n            this.options.gasless.biconomy?.deadlineSeconds) ||\n            3600),\n      ),\n      data: transaction.data,\n    };\n\n    const hashToSign = ethers.utils.arrayify(\n      ethers.utils.solidityKeccak256(\n        [\n          \"address\",\n          \"address\",\n          \"address\",\n          \"uint256\",\n          \"uint256\",\n          \"uint256\",\n          \"uint256\",\n          \"uint256\",\n          \"bytes32\",\n        ],\n        [\n          request.from,\n          request.to,\n          request.token,\n          request.txGas,\n          request.tokenGasPrice,\n          request.batchId,\n          request.batchNonce,\n          request.deadline,\n          ethers.utils.keccak256(request.data),\n        ],\n      ),\n    );\n\n    this.emit(EventType.Signature, {\n      status: \"submitted\",\n      message: hashToSign,\n      signature: \"\",\n    });\n    const signature = await signer.signMessage(hashToSign);\n    this.emit(EventType.Signature, {\n      status: \"completed\",\n      message: hashToSign,\n      signature,\n    });\n    const response = await fetch(\n      \"https://api.biconomy.io/api/v2/meta-tx/native\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          from: transaction.from,\n          apiId: this.options.gasless.biconomy.apiId,\n          params: [request, signature],\n          to: transaction.to,\n          gasLimit: transaction.gasLimit.toHexString(),\n        }),\n        headers: {\n          \"x-api-key\": this.options.gasless.biconomy.apiKey,\n          \"Content-Type\": \"application/json;charset=utf-8\",\n        },\n      },\n    );\n\n    if (response.ok) {\n      const resp = await response.json();\n      if (!resp.txHash) {\n        throw new Error(`relay transaction failed: ${resp.log}`);\n      }\n      return resp.txHash;\n    }\n    throw new Error(\n      `relay transaction failed with status: ${response.status} (${response.statusText})`,\n    );\n  }\n\n  private async defenderSendFunction(\n    transaction: GaslessTransaction,\n  ): Promise<string> {\n    invariant(\n      this.options.gasless && \"openzeppelin\" in this.options.gasless,\n      \"calling biconomySendFunction without biconomy\",\n    );\n    const signer = this.getSigner();\n    const provider = this.getProvider();\n    invariant(signer, \"provider is not set\");\n    invariant(provider, \"provider is not set\");\n    const forwarderAddress =\n      this.options.gasless.openzeppelin.relayerForwarderAddress;\n    const forwarder = Forwarder__factory.connect(forwarderAddress, provider);\n    const nonce = await getAndIncrementNonce(forwarder, \"getNonce\", [\n      transaction.from,\n    ]);\n    const domain = {\n      name: \"GSNv2 Forwarder\",\n      version: \"0.0.1\",\n      chainId: transaction.chainId,\n      verifyingContract: forwarderAddress,\n    };\n\n    const types = {\n      ForwardRequest,\n    };\n\n    let message: ForwardRequestMessage | PermitRequestMessage = {\n      from: transaction.from,\n      to: transaction.to,\n      value: BigNumber.from(0).toString(),\n      gas: BigNumber.from(transaction.gasLimit).toString(),\n      nonce: BigNumber.from(nonce).toString(),\n      data: transaction.data,\n    };\n\n    let signature: BytesLike;\n\n    this.emit(EventType.Signature, {\n      status: \"submitted\",\n      message,\n      signature: \"\",\n    });\n\n    // if the executing function is \"approve\" and matches with erc20 approve signature\n    // and if the token supports permit, then we use permit for gasless instead of approve.\n    if (\n      transaction.functionName === \"approve\" &&\n      transaction.functionArgs.length === 2\n    ) {\n      const spender = transaction.functionArgs[0];\n      const amount = transaction.functionArgs[1];\n      // TODO: support DAI permit by signDAIPermit\n      const { message: permit, signature: sig } = await signEIP2612Permit(\n        signer,\n        this.writeContract.address,\n        transaction.from,\n        spender,\n        amount,\n      );\n\n      const { r, s, v } = ethers.utils.splitSignature(sig);\n\n      message = {\n        to: this.readContract.address,\n        owner: permit.owner,\n        spender: permit.spender,\n        value: BigNumber.from(permit.value).toString(),\n        nonce: BigNumber.from(permit.nonce).toString(),\n        deadline: BigNumber.from(permit.deadline).toString(),\n        r,\n        s,\n        v,\n      };\n      signature = sig;\n    } else {\n      const { signature: sig } = await signTypedDataInternal(\n        signer,\n        domain,\n        types,\n        message,\n      );\n      signature = sig;\n    }\n\n    let messageType = \"forward\";\n\n    // if has owner property then it's permit :)\n    if ((message as PermitRequestMessage)?.owner) {\n      messageType = \"permit\";\n    }\n\n    const body = JSON.stringify({\n      request: message,\n      signature,\n      type: messageType,\n    });\n\n    this.emit(EventType.Signature, {\n      status: \"completed\",\n      message,\n      signature,\n    });\n\n    const response = await fetch(this.options.gasless.openzeppelin.relayerUrl, {\n      method: \"POST\",\n      body,\n    });\n    if (response.ok) {\n      const resp = await response.json();\n      const result = JSON.parse(resp.result);\n      return result.txHash;\n    }\n    throw new Error(\n      `relay transaction failed with status: ${response.status} (${response.statusText})`,\n    );\n  }\n}\n","import { ethers, Signer, providers } from \"ethers\";\nimport EventEmitter from \"eventemitter3\";\nimport { getReadOnlyProvider } from \"../../constants/urls\";\nimport {\n  SDKOptions,\n  SDKOptionsOutput,\n  SDKOptionsSchema,\n} from \"../../schema/sdk-options\";\nimport { NetworkOrSignerOrProvider } from \"../types\";\n\n/**\n * @internal\n */\nexport class RPCConnectionHandler extends EventEmitter {\n  private provider: providers.Provider;\n  private signer: Signer | undefined;\n  protected readonly options: SDKOptionsOutput;\n\n  constructor(network: NetworkOrSignerOrProvider, options: SDKOptions) {\n    super();\n    const [signer, provider] = this.getSignerAndProvider(network, options);\n    this.signer = signer;\n    this.provider = provider;\n\n    try {\n      this.options = SDKOptionsSchema.parse(options);\n    } catch (optionParseError) {\n      console.error(\n        \"invalid sdk options object passed, falling back to default options\",\n        optionParseError,\n      );\n      this.options = SDKOptionsSchema.parse({});\n    }\n  }\n  /**\n   * The function to call whenever the network changes, such as when the users connects their wallet, disconnects their wallet, the connected chain changes, etc.\n   *\n   * @param network - a network, signer or provider that ethers js can interpret\n   */\n  public updateSignerOrProvider(network: NetworkOrSignerOrProvider) {\n    const [signer, provider] = this.getSignerAndProvider(network, this.options);\n    this.signer = signer;\n    this.provider = provider;\n  }\n  /**\n   *\n   * @returns whether or not a signer is set, `true` if there is no signer so the class is in \"read only\" mode\n   */\n  public isReadOnly(): boolean {\n    return !Signer.isSigner(this.signer);\n  }\n\n  /**\n   * Explicitly get the active signer.\n   * @returns the active signer, if there is one\n   */\n  public getSigner(): Signer | undefined {\n    return this.signer;\n  }\n\n  /**\n   * Explicitly get the active signer.\n   * @returns the active provider\n   */\n  public getProvider(): providers.Provider {\n    return this.provider;\n  }\n\n  /**\n   *\n   * @returns the current signer if there is one, otherwise the active provider\n   */\n  public getSignerOrProvider(): Signer | providers.Provider {\n    return this.getSigner() || this.getProvider();\n  }\n\n  /** ********************\n   * PRIVATE FUNCTIONS\n   *********************/\n\n  private getSignerAndProvider(\n    network: NetworkOrSignerOrProvider,\n    options: SDKOptions,\n  ): [Signer | undefined, providers.Provider] {\n    let signer: Signer | undefined;\n    let provider: providers.Provider | undefined;\n\n    if (Signer.isSigner(network)) {\n      signer = network;\n      if (network.provider) {\n        provider = network.provider;\n      }\n    }\n\n    if (options?.readonlySettings) {\n      provider = getReadOnlyProvider(\n        options.readonlySettings.rpcUrl,\n        options.readonlySettings.chainId,\n      );\n    }\n\n    if (!provider) {\n      if (providers.Provider.isProvider(network)) {\n        provider = network;\n      } else if (!Signer.isSigner(network)) {\n        if (typeof network === \"string\") {\n          provider = getReadOnlyProvider(\n            network,\n            options?.readonlySettings?.chainId,\n          );\n        } else {\n          // no a signer, not a provider, not a string? try with default provider\n          provider = ethers.getDefaultProvider(network);\n        }\n      }\n    }\n\n    if (!provider) {\n      // we should really never hit this case!\n      provider = ethers.getDefaultProvider();\n      console.error(\n        \"No provider found, using default provider on default chain!\",\n      );\n    }\n\n    return [signer, provider];\n  }\n}\n","import { OZ_DEFENDER_FORWARDER_ADDRESS } from \"../constants/addresses\";\nimport { z } from \"zod\";\n\n/**\n * @public\n */\nexport const SDKOptionsSchema = z\n  .object({\n    readonlySettings: z\n      .object({\n        rpcUrl: z.string().url(),\n        chainId: z.number().optional(),\n      })\n      .optional(),\n    gasSettings: z\n      .object({\n        maxPriceInGwei: z\n          .number()\n          .min(1, \"gas price cannot be less than 1\")\n          .default(300),\n        speed: z.enum([\"standard\", \"fast\", \"fastest\"]).default(\"fastest\"),\n      })\n      .default({ maxPriceInGwei: 300, speed: \"fastest\" }),\n    gasless: z\n      .union([\n        z.object({\n          openzeppelin: z.object({\n            relayerUrl: z.string().url(),\n            relayerForwarderAddress: z\n              .string()\n              .default(OZ_DEFENDER_FORWARDER_ADDRESS),\n          }),\n        }),\n        z.object({\n          biconomy: z.object({\n            apiId: z.string(),\n            apiKey: z.string(),\n            deadlineSeconds: z\n              .number()\n              .min(1, \"deadlineSeconds cannot be les than 1\")\n              .default(3600),\n          }),\n        }),\n      ])\n      .optional(),\n  })\n  .default({\n    gasSettings: { maxPriceInGwei: 300, speed: \"fastest\" },\n  });\n\n/**\n * @public\n * All these configuration options are optional with sane defaults:\n * @example\n * ```javascript\n * {\n *   readonlySettings: {\n *     rpcUrl, // force read calls to go through your own RPC url\n *     chainId, // reduce RPC calls by sepcifying your chain ID\n *   },\n *   gasSettings: {\n *     maxPriceInGwei, // Maximum gas price for transactions (default 300 gwei)\n *     speed, // the tx speed setting: 'standard'|'fast|'fastest' (default: 'fastest')\n *   },\n *   gasless: {\n *     // By specifying a gasless configuration - all transactions will get forwarded to enable gasless transactions\n *     openzeppelin: {\n *       relayerUrl, // your OZ Defender relayer URL\n *       relayerForwarderAddress, // the OZ defender relayer address (defaults to the standard one)\n *     },\n *     biconomy: {\n *       apiId, // your Biconomy API Id\n *       apiKey, // your Biconomy API Key\n *       deadlineSeconds, // your Biconomy timeout preference\n *     },\n *   },\n * }\n * ```\n */\nexport type SDKOptions = z.input<typeof SDKOptionsSchema>;\n/**\n * @internal\n */\nexport type SDKOptionsOutput = z.output<typeof SDKOptionsSchema>;\n","import { BaseContract, BigNumber } from \"ethers\";\n\n/**\n * @internal\n */\nexport const ForwardRequest = [\n  { name: \"from\", type: \"address\" },\n  { name: \"to\", type: \"address\" },\n  { name: \"value\", type: \"uint256\" },\n  { name: \"gas\", type: \"uint256\" },\n  { name: \"nonce\", type: \"uint256\" },\n  { name: \"data\", type: \"bytes\" },\n];\n\n/**\n * @internal\n */\nexport const BiconomyForwarderAbi = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"from\", type: \"address\" },\n      { internalType: \"uint256\", name: \"batchId\", type: \"uint256\" },\n    ],\n    name: \"getNonce\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _nonces: Record<string, BigNumber> = {};\nconst _noncesSyncTimestamp: Record<string, number> = {};\n\n/**\n * @internal\n */\nexport async function getAndIncrementNonce(\n  forwarder: BaseContract,\n  forwarderFunction: string,\n  forwarderArgs: any[],\n): Promise<BigNumber> {\n  // address is only used for internal caching :)\n  const address = forwarderArgs.join(\"|\");\n\n  const timestamp = _noncesSyncTimestamp[address];\n  // if it's within 2 seconds we're optimistically increment the nonce\n  // should we always sync?\n  const shouldSync = Date.now() - timestamp >= 2000;\n\n  if (!(address in _nonces) || shouldSync) {\n    const nonceResult = await forwarder.functions[forwarderFunction](\n      ...forwarderArgs,\n    );\n    if (Array.isArray(nonceResult) && nonceResult.length > 0) {\n      _nonces[address] = BigNumber.from(nonceResult[0]);\n    } else {\n      _nonces[address] = BigNumber.from(nonceResult);\n    }\n    _noncesSyncTimestamp[address] = Date.now();\n  }\n\n  const nonce = _nonces[address];\n  _nonces[address] = BigNumber.from(_nonces[address]).add(1);\n  return nonce;\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport type { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { Forwarder, ForwarderInterface } from \"../Forwarder\";\n\nconst _abi = [\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"value\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"gas\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"nonce\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"data\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct MinimalForwarder.ForwardRequest\",\n        name: \"req\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"signature\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"execute\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"\",\n        type: \"bytes\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n    ],\n    name: \"getNonce\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"value\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"gas\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"nonce\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"data\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct MinimalForwarder.ForwardRequest\",\n        name: \"req\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"signature\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"verify\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x61014060405234801561001157600080fd5b50604080518082018252601081526f26b4b734b6b0b62337b93bb0b93232b960811b602080830191825283518085019094526005845264302e302e3160d81b908401528151902060e08190527fae209a0b48f21c054280f2455d32cf309387644879d9acbd8ffc1991638118856101008190524660a0529192917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6100fb8184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6080523060c052610120525061011092505050565b60805160a05160c05160e0516101005161012051610b4061015f60003960006104f701526000610546015260006105210152600061047a015260006104a4015260006104ce0152610b406000f3fe6080604052600436106100345760003560e01c80632d0335ab1461003957806347153f8214610082578063bf5d3bdb146100a3575b600080fd5b34801561004557600080fd5b5061006f610054366004610901565b6001600160a01b031660009081526020819052604090205490565b6040519081526020015b60405180910390f35b610095610090366004610931565b6100d3565b604051610079929190610a00565b3480156100af57600080fd5b506100c36100be366004610931565b610277565b6040519015158152602001610079565b600060606100e2858585610277565b6101595760405162461bcd60e51b815260206004820152603260248201527f4d696e696d616c466f727761726465723a207369676e617475726520646f657360448201527f206e6f74206d617463682072657175657374000000000000000000000000000060648201526084015b60405180910390fd5b61016860808601356001610a3c565b6000806101786020890189610901565b6001600160a01b03166001600160a01b03168152602001908152602001600020819055506000808660200160208101906101b29190610901565b6001600160a01b0316606088013560408901356101d260a08b018b610a62565b6101df60208d018d610901565b6040516020016101f193929190610aa9565b60408051601f198184030181529082905261020b91610acf565b600060405180830381858888f193505050503d8060008114610249576040519150601f19603f3d011682016040523d82523d6000602084013e61024e565b606091505b509092509050610263603f6060890135610aeb565b5a1161026b57fe5b90969095509350505050565b60008061038a84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061038492507fdd8f4b70b0f4393e889bd39128a30628a78b61816a9eb8199759e7a349657e4891506102e7905060208a018a610901565b6102f760408b0160208c01610901565b60408b013560608c013560808d013561031360a08f018f610a62565b604051610321929190610b0d565b6040805191829003822060208301989098526001600160a01b0396871690820152949093166060850152608084019190915260a083015260c082015260e081019190915261010001604051602081830303815290604052805190602001206103f5565b90610449565b905060808501356000806103a16020890189610901565b6001600160a01b03166001600160a01b03168152602001908152602001600020541480156103ec57506103d76020860186610901565b6001600160a01b0316816001600160a01b0316145b95945050505050565b600061044361040261046d565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b60008060006104588585610594565b9150915061046581610604565b509392505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156104c657507f000000000000000000000000000000000000000000000000000000000000000046145b156104f057507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000808251604114156105cb5760208301516040840151606085015160001a6105bf878285856107c2565b945094505050506105fd565b8251604014156105f557602083015160408401516105ea8683836108af565b9350935050506105fd565b506000905060025b9250929050565b600081600481111561061857610618610b1d565b14156106215750565b600181600481111561063557610635610b1d565b14156106835760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610150565b600281600481111561069757610697610b1d565b14156106e55760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610150565b60038160048111156106f9576106f9610b1d565b14156107525760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610150565b600481600481111561076657610766610b1d565b14156107bf5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610150565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156107f957506000905060036108a6565b8460ff16601b1415801561081157508460ff16601c14155b1561082257506000905060046108a6565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610876573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661089f576000600192509250506108a6565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8316816108e560ff86901c601b610a3c565b90506108f3878288856107c2565b935093505050935093915050565b60006020828403121561091357600080fd5b81356001600160a01b038116811461092a57600080fd5b9392505050565b60008060006040848603121561094657600080fd5b833567ffffffffffffffff8082111561095e57600080fd5b9085019060c0828803121561097257600080fd5b9093506020850135908082111561098857600080fd5b818601915086601f83011261099c57600080fd5b8135818111156109ab57600080fd5b8760208285010111156109bd57600080fd5b6020830194508093505050509250925092565b60005b838110156109eb5781810151838201526020016109d3565b838111156109fa576000848401525b50505050565b82151581526040602082015260008251806040840152610a278160608501602087016109d0565b601f01601f1916919091016060019392505050565b60008219821115610a5d57634e487b7160e01b600052601160045260246000fd5b500190565b6000808335601e19843603018112610a7957600080fd5b83018035915067ffffffffffffffff821115610a9457600080fd5b6020019150368190038213156105fd57600080fd5b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b60008251610ae18184602087016109d0565b9190910192915050565b600082610b0857634e487b7160e01b600052601260045260246000fd5b500490565b8183823760009101908152919050565b634e487b7160e01b600052602160045260246000fdfea164736f6c634300080c000a\";\n\ntype ForwarderConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: ForwarderConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class Forwarder__factory extends ContractFactory {\n  constructor(...args: ForwarderConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<Forwarder> {\n    return super.deploy(overrides || {}) as Promise<Forwarder>;\n  }\n  override getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  override attach(address: string): Forwarder {\n    return super.attach(address) as Forwarder;\n  }\n  override connect(signer: Signer): Forwarder__factory {\n    return super.connect(signer) as Forwarder__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): ForwarderInterface {\n    return new utils.Interface(_abi) as ForwarderInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): Forwarder {\n    return new Contract(address, _abi, signerOrProvider) as Forwarder;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { IERC20, IERC20Interface } from \"../IERC20\";\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"who\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nexport class IERC20__factory {\n  static readonly abi = _abi;\n  static createInterface(): IERC20Interface {\n    return new utils.Interface(_abi) as IERC20Interface;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): IERC20 {\n    return new Contract(address, _abi, signerOrProvider) as IERC20;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  IThirdwebContract,\n  IThirdwebContractInterface,\n} from \"../IThirdwebContract\";\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"contractType\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"contractURI\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"contractVersion\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"_uri\",\n        type: \"string\",\n      },\n    ],\n    name: \"setContractURI\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nexport class IThirdwebContract__factory {\n  static readonly abi = _abi;\n  static createInterface(): IThirdwebContractInterface {\n    return new utils.Interface(_abi) as IThirdwebContractInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IThirdwebContract {\n    return new Contract(address, _abi, signerOrProvider) as IThirdwebContract;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport type { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { TWFactory, TWFactoryInterface } from \"../TWFactory\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_trustedForwarder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_registry\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"implementation\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"contractType\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"version\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ImplementationAdded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"implementation\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"isApproved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"ImplementationApproved\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"implementation\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"proxy\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"deployer\",\n        type: \"address\",\n      },\n    ],\n    name: \"ProxyDeployed\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"previousAdminRole\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"newAdminRole\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"RoleAdminChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"RoleGranted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"RoleRevoked\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DEFAULT_ADMIN_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"FACTORY_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_implementation\",\n        type: \"address\",\n      },\n    ],\n    name: \"addImplementation\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"approval\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_implementation\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"_toApprove\",\n        type: \"bool\",\n      },\n    ],\n    name: \"approveImplementation\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"currentVersion\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_type\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"deployProxy\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_implementation\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_data\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_salt\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"deployProxyByImplementation\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"deployedProxy\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_type\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_data\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_salt\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"deployProxyDeterministic\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"deployer\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_type\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_version\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getImplementation\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_type\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getLatestImplementation\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getRoleAdmin\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"index\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getRoleMember\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getRoleMemberCount\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"grantRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"hasRole\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"implementation\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"forwarder\",\n        type: \"address\",\n      },\n    ],\n    name: \"isTrustedForwarder\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes[]\",\n        name: \"data\",\n        type: \"bytes[]\",\n      },\n    ],\n    name: \"multicall\",\n    outputs: [\n      {\n        internalType: \"bytes[]\",\n        name: \"results\",\n        type: \"bytes[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"registry\",\n    outputs: [\n      {\n        internalType: \"contract TWRegistry\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"renounceRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"revokeRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"interfaceId\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"supportsInterface\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x60c06040523480156200001157600080fd5b5060405162001f6738038062001f67833981016040819052620000349162000276565b6001600160a01b0382166080526200005760006200005162000099565b620000b5565b620000867fdfbefbf47cfe66b701d8cfdbce1de81c821590819cb07e71cb01b6602fb0ee276200005162000099565b6001600160a01b031660a05250620002ae565b6000620000b0620000c560201b62000d211760201c565b905090565b620000c18282620000fe565b5050565b6080516000906001600160a01b0316331415620000e9575060131936013560601c90565b620000b06200014160201b62000d6b1760201c565b6200011582826200014560201b62000d6f1760201c565b60008281526001602090815260409091206200013c91839062000e0e620001e7821b17901c565b505050565b3390565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000c1576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001a362000099565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620001fe836001600160a01b03841662000207565b90505b92915050565b6000818152600183016020526040812054620002505750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000201565b50600062000201565b80516001600160a01b03811681146200027157600080fd5b919050565b600080604083850312156200028a57600080fd5b620002958362000259565b9150620002a56020840162000259565b90509250929050565b60805160a051611c7e620002e960003960008181610336015281816106510152610c6f0152600081816103010152610d250152611c7e6000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c80639010d07c116100e3578063c6e2a4001161008c578063dd47595a11610066578063dd47595a1461044f578063e92016a414610483578063ec54d72f146104b757600080fd5b8063c6e2a40014610416578063ca15c87314610429578063d547741f1461043c57600080fd5b8063a217fddf116100bd578063a217fddf146103c5578063ac9650d8146103cd578063b9caf9d9146103ed57600080fd5b80639010d07c1461035857806391d148541461036b5780639430b496146103a257600080fd5b806336568abe1161014557806356fb09581161011f57806356fb0958146102de578063572b6c05146102f15780637b1039991461033157600080fd5b806336568abe146102705780633b426d3f1461028357806344ab6680146102a357600080fd5b80631e5e1e99116101765780631e5e1e9914610225578063248a9ca3146102385780632f2ff15d1461025b57600080fd5b806301ffc9a71461019d57806304a0fb17146101c557806311b804ab146101fa575b600080fd5b6101b06101ab3660046116a3565b6104ca565b60405190151581526020015b60405180910390f35b6101ec7fdfbefbf47cfe66b701d8cfdbce1de81c821590819cb07e71cb01b6602fb0ee2781565b6040519081526020016101bc565b61020d61020836600461178c565b6104f5565b6040516001600160a01b0390911681526020016101bc565b61020d6102333660046117e3565b610705565b6101ec610246366004611816565b60009081526020819052604090206001015490565b61026e61026936600461182f565b610745565b005b61026e61027e36600461182f565b610777565b6101ec610291366004611816565b60036020526000908152604090205481565b61020d6102b1366004611816565b6000908152600460209081526040808320600383528184205484529091529020546001600160a01b031690565b61026e6102ec36600461185b565b610813565b6101b06102ff366004611897565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b61020d7f000000000000000000000000000000000000000000000000000000000000000081565b61020d6103663660046118b2565b6108db565b6101b061037936600461182f565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6101b06103b0366004611897565b60026020526000908152604090205460ff1681565b6101ec600081565b6103e06103db3660046118d4565b6108f3565b6040516101bc91906119a5565b61020d6103fb366004611897565b6005602052600090815260409020546001600160a01b031681565b61026e610424366004611897565b6109e8565b6101ec610437366004611816565b610c2b565b61026e61044a36600461182f565b610c42565b61020d61045d3660046118b2565b60009182526004602090815260408084209284529190529020546001600160a01b031690565b61020d6104913660046118b2565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b61020d6104c5366004611a07565b610c6a565b60006001600160e01b03198216635a05180f60e01b14806104ef57506104ef82610e23565b92915050565b6001600160a01b03831660009081526002602052604081205460ff166105625760405162461bcd60e51b815260206004820152601b60248201527f696d706c656d656e746174696f6e206e6f7420617070726f766564000000000060448201526064015b60405180910390fd5b600061056c610e58565b8360405160200161059b92919060609290921b6bffffffffffffffffffffffff19168252601482015260340190565b6040516020818303038152906040528051906020012090506105bd8582610e62565b91506105c7610e58565b6001600160a01b038381166000908152600560205260409020805473ffffffffffffffffffffffffffffffffffffffff19169290911691909117905561060b610e58565b6040516001600160a01b038481168252918216918716907f9e0862c4ebff2150fbbfd3f8547483f55bdec0c34fd977d3fccaa55d6c4ce7849060200160405180910390a37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352c28fab610686610e58565b6040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529085166024820152604401600060405180830381600087803b1580156106cf57600080fd5b505af11580156106e3573d6000803e3d6000fd5b505050506000845111156106fd576106fb8285610f19565b505b509392505050565b6000838152600460209081526040808320600383528184205484529091528120546001600160a01b031661073a8185856104f5565b9150505b9392505050565b60008281526020819052604090206001015461076881610763610e58565b610f5b565b6107728383610fd9565b505050565b61077f610e58565b6001600160a01b0316816001600160a01b0316146108055760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610559565b61080f8282610ffb565b5050565b61083f7fdfbefbf47cfe66b701d8cfdbce1de81c821590819cb07e71cb01b6602fb0ee27610379610e58565b6108785760405162461bcd60e51b815260206004820152600a6024820152693737ba1030b236b4b71760b11b6044820152606401610559565b6001600160a01b038216600081815260026020908152604091829020805460ff19168515159081179091558251938452908301527f46c2f0868ef35772e9324a42eb6fa484490cca8494538a909cf05c897d7d4108910160405180910390a15050565b600082815260016020526040812061073e908361101d565b60608167ffffffffffffffff81111561090e5761090e6116e9565b60405190808252806020026020018201604052801561094157816020015b606081526020019060019003908161092c5790505b50905060005b828110156109e1576109b13085858481811061096557610965611a4e565b90506020028101906109779190611a64565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061102992505050565b8282815181106109c3576109c3611a4e565b602002602001018190525080806109d990611ac8565b915050610947565b5092915050565b610a147fdfbefbf47cfe66b701d8cfdbce1de81c821590819cb07e71cb01b6602fb0ee27610379610e58565b610a4d5760405162461bcd60e51b815260206004820152600a6024820152693737ba1030b236b4b71760b11b6044820152606401610559565b60008190506000816001600160a01b031663cb2ef6f76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab69190611ae3565b90506000826001600160a01b031663a0a8e4606040518163ffffffff1660e01b8152600401602060405180830381865afa158015610af8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1c9190611afc565b60008381526003602052604090205490915060ff8082169083161015610b845760405162461bcd60e51b815260206004820152601460248201527f77726f6e67206d6f64756c652076657273696f6e0000000000000000000000006044820152606401610559565b600083815260036020908152604080832060ff861690819055600483528184208185528352818420805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038b169081179091558085526002845293829020805460ff1916600117905581519384529183019190915284917fc39db2d47bafbb20367a9c840abffa57a2bc243c1f1e67c939ea0e89e59ed01a910160405180910390a25050505050565b60008181526001602052604081206104ef9061104e565b600082815260208190526040902060010154610c6081610763610e58565b6107728383610ffb565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166305d85eda610ca4610e58565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610ce8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0c9190611ae3565b9050610d19848483610705565b949350505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331415610d61575060131936013560601c90565b503390565b905090565b3390565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661080f576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610dca610e58565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061073e836001600160a01b038416611058565b60006001600160e01b03198216637965db0b60e01b14806104ef57506301ffc9a760e01b6001600160e01b03198316146104ef565b6000610d66610d21565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528360601b60148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037826000f59150506001600160a01b0381166104ef5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152606401610559565b606061073e83836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506110a7565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661080f57610f97816001600160a01b031660146110b6565b610fa28360206110b6565b604051602001610fb3929190611b1f565b60408051601f198184030181529082905262461bcd60e51b825261055991600401611ba0565b610fe38282610d6f565b60008281526001602052604090206107729082610e0e565b611005828261125f565b600082815260016020526040902061077290826112fc565b600061073e8383611311565b606061073e8383604051806060016040528060278152602001611c4b6027913961133b565b60006104ef825490565b600081815260018301602052604081205461109f575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104ef565b5060006104ef565b6060610d19848460008561142f565b606060006110c5836002611bb3565b6110d0906002611bd2565b67ffffffffffffffff8111156110e8576110e86116e9565b6040519080825280601f01601f191660200182016040528015611112576020820181803683370190505b509050600360fc1b8160008151811061112d5761112d611a4e565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061115c5761115c611a4e565b60200101906001600160f81b031916908160001a9053506000611180846002611bb3565b61118b906001611bd2565b90505b6001811115611210577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106111cc576111cc611a4e565b1a60f81b8282815181106111e2576111e2611a4e565b60200101906001600160f81b031916908160001a90535060049490941c9361120981611bea565b905061118e565b50831561073e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610559565b6000828152602081815260408083206001600160a01b038516845290915290205460ff161561080f576000828152602081815260408083206001600160a01b03851684529091529020805460ff191690556112b8610e58565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600061073e836001600160a01b038416611577565b600082600001828154811061132857611328611a4e565b9060005260206000200154905092915050565b60606001600160a01b0384163b6113ba5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610559565b600080856001600160a01b0316856040516113d59190611c01565b600060405180830381855af49150503d8060008114611410576040519150601f19603f3d011682016040523d82523d6000602084013e611415565b606091505b509150915061142582828661166a565b9695505050505050565b6060824710156114a75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610559565b6001600160a01b0385163b6114fe5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610559565b600080866001600160a01b0316858760405161151a9190611c01565b60006040518083038185875af1925050503d8060008114611557576040519150601f19603f3d011682016040523d82523d6000602084013e61155c565b606091505b509150915061156c82828661166a565b979650505050505050565b6000818152600183016020526040812054801561166057600061159b600183611c1d565b85549091506000906115af90600190611c1d565b90508181146116145760008660000182815481106115cf576115cf611a4e565b90600052602060002001549050808760000184815481106115f2576115f2611a4e565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061162557611625611c34565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104ef565b60009150506104ef565b6060831561167957508161073e565b8251156116895782518084602001fd5b8160405162461bcd60e51b81526004016105599190611ba0565b6000602082840312156116b557600080fd5b81356001600160e01b03198116811461073e57600080fd5b80356001600160a01b03811681146116e457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261171057600080fd5b813567ffffffffffffffff8082111561172b5761172b6116e9565b604051601f8301601f19908116603f01168101908282118183101715611753576117536116e9565b8160405283815286602085880101111561176c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156117a157600080fd5b6117aa846116cd565b9250602084013567ffffffffffffffff8111156117c657600080fd5b6117d2868287016116ff565b925050604084013590509250925092565b6000806000606084860312156117f857600080fd5b83359250602084013567ffffffffffffffff8111156117c657600080fd5b60006020828403121561182857600080fd5b5035919050565b6000806040838503121561184257600080fd5b82359150611852602084016116cd565b90509250929050565b6000806040838503121561186e57600080fd5b611877836116cd565b91506020830135801515811461188c57600080fd5b809150509250929050565b6000602082840312156118a957600080fd5b61073e826116cd565b600080604083850312156118c557600080fd5b50508035926020909101359150565b600080602083850312156118e757600080fd5b823567ffffffffffffffff808211156118ff57600080fd5b818501915085601f83011261191357600080fd5b81358181111561192257600080fd5b8660208260051b850101111561193757600080fd5b60209290920196919550909350505050565b60005b8381101561196457818101518382015260200161194c565b83811115611973576000848401525b50505050565b60008151808452611991816020860160208601611949565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156119fa57603f198886030184526119e8858351611979565b945092850192908501906001016119cc565b5092979650505050505050565b60008060408385031215611a1a57600080fd5b82359150602083013567ffffffffffffffff811115611a3857600080fd5b611a44858286016116ff565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112611a7b57600080fd5b83018035915067ffffffffffffffff821115611a9657600080fd5b602001915036819003821315611aab57600080fd5b9250929050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611adc57611adc611ab2565b5060010190565b600060208284031215611af557600080fd5b5051919050565b600060208284031215611b0e57600080fd5b815160ff8116811461073e57600080fd5b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611b57816017850160208801611949565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611b94816028840160208801611949565b01602801949350505050565b60208152600061073e6020830184611979565b6000816000190483118215151615611bcd57611bcd611ab2565b500290565b60008219821115611be557611be5611ab2565b500190565b600081611bf957611bf9611ab2565b506000190190565b60008251611c13818460208701611949565b9190910192915050565b600082821015611c2f57611c2f611ab2565b500390565b634e487b7160e01b600052603160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080c000a\";\n\ntype TWFactoryConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: TWFactoryConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class TWFactory__factory extends ContractFactory {\n  constructor(...args: TWFactoryConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override deploy(\n    _trustedForwarder: string,\n    _registry: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<TWFactory> {\n    return super.deploy(\n      _trustedForwarder,\n      _registry,\n      overrides || {}\n    ) as Promise<TWFactory>;\n  }\n  override getDeployTransaction(\n    _trustedForwarder: string,\n    _registry: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(\n      _trustedForwarder,\n      _registry,\n      overrides || {}\n    );\n  }\n  override attach(address: string): TWFactory {\n    return super.attach(address) as TWFactory;\n  }\n  override connect(signer: Signer): TWFactory__factory {\n    return super.connect(signer) as TWFactory__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): TWFactoryInterface {\n    return new utils.Interface(_abi) as TWFactoryInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): TWFactory {\n    return new Contract(address, _abi, signerOrProvider) as TWFactory;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport type { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { TWRegistry, TWRegistryInterface } from \"../TWRegistry\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_trustedForwarder\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"deployer\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"deployment\",\n        type: \"address\",\n      },\n    ],\n    name: \"Added\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"deployer\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"deployment\",\n        type: \"address\",\n      },\n    ],\n    name: \"Deleted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"previousAdminRole\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"newAdminRole\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"RoleAdminChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"RoleGranted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"RoleRevoked\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DEFAULT_ADMIN_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"OPERATOR_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_deployer\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_deployment\",\n        type: \"address\",\n      },\n    ],\n    name: \"add\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_deployer\",\n        type: \"address\",\n      },\n    ],\n    name: \"count\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_deployer\",\n        type: \"address\",\n      },\n    ],\n    name: \"getAll\",\n    outputs: [\n      {\n        internalType: \"address[]\",\n        name: \"\",\n        type: \"address[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getRoleAdmin\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"index\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getRoleMember\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getRoleMemberCount\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"grantRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"hasRole\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"forwarder\",\n        type: \"address\",\n      },\n    ],\n    name: \"isTrustedForwarder\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes[]\",\n        name: \"data\",\n        type: \"bytes[]\",\n      },\n    ],\n    name: \"multicall\",\n    outputs: [\n      {\n        internalType: \"bytes[]\",\n        name: \"results\",\n        type: \"bytes[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_deployer\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_deployment\",\n        type: \"address\",\n      },\n    ],\n    name: \"remove\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"renounceRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"revokeRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"interfaceId\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"supportsInterface\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x60a06040523480156200001157600080fd5b50604051620016b4380380620016b483398101604081905262000034916200021e565b6001600160a01b038116608052620000576000620000516200005e565b6200007a565b5062000250565b6000620000756200008a60201b6200082e1760201c565b905090565b620000868282620000c3565b5050565b6080516000906001600160a01b0316331415620000ae575060131936013560601c90565b620000756200010660201b620008781760201c565b620000da82826200010a60201b6200087c1760201c565b6000828152600160209081526040909120620001019183906200091b620001ac821b17901c565b505050565b3390565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000086576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001686200005e565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620001c3836001600160a01b038416620001cc565b90505b92915050565b60008181526001830160205260408120546200021557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620001c6565b506000620001c6565b6000602082840312156200023157600080fd5b81516001600160a01b03811681146200024957600080fd5b9392505050565b60805161144162000273600039600081816101bc015261083201526114416000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80639010d07c11610097578063ca15c87311610066578063ca15c87314610289578063d547741f1461029c578063eb077342146102af578063f5b541a6146102cf57600080fd5b80639010d07c146101ff57806391d148541461022a578063a217fddf14610261578063ac9650d81461026957600080fd5b806336568abe116100d357806336568abe1461018657806352c28fab14610199578063572b6c05146101ac5780637f7c1491146101ec57600080fd5b806301ffc9a71461010557806305d85eda1461012d578063248a9ca31461014e5780632f2ff15d14610171575b600080fd5b610118610113366004610fc5565b6102f6565b60405190151581526020015b60405180910390f35b61014061013b36600461100b565b610321565b604051908152602001610124565b61014061015c366004611026565b60009081526020819052604090206001015490565b61018461017f36600461103f565b610342565b005b61018461019436600461103f565b610374565b6101846101a736600461106b565b610415565b6101186101ba36600461100b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b6101846101fa36600461106b565b610566565b61021261020d366004611095565b6106b7565b6040516001600160a01b039091168152602001610124565b61011861023836600461103f565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b610140600081565b61027c6102773660046110b7565b6106d6565b6040516101249190611188565b610140610297366004611026565b6107cb565b6101846102aa36600461103f565b6107e2565b6102c26102bd36600461100b565b61080a565b60405161012491906111ea565b6101407f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b60006001600160e01b03198216635a05180f60e01b148061031b575061031b82610930565b92915050565b6001600160a01b038116600090815260026020526040812061031b90610965565b6000828152602081905260409020600101546103658161036061096f565b610979565b61036f83836109f7565b505050565b61037c61096f565b6001600160a01b0316816001600160a01b0316146104075760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6104118282610a19565b5050565b6104417f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92961023861096f565b80610464575061044f61096f565b6001600160a01b0316826001600160a01b0316145b6104b05760405162461bcd60e51b815260206004820152601960248201527f6e6f74206f70657261746f72206f72206465706c6f7965722e0000000000000060448201526064016103fe565b6001600160a01b03821660009081526002602052604081206104d2908361091b565b9050806105215760405162461bcd60e51b815260206004820152600d60248201527f6661696c656420746f206164640000000000000000000000000000000000000060448201526064016103fe565b816001600160a01b0316836001600160a01b03167f938c63ac3d228b23f6bee7618fefc6790522e338ac202c958a2ea9eb9706c5d160405160405180910390a3505050565b6105927f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92961023861096f565b806105b557506105a061096f565b6001600160a01b0316826001600160a01b0316145b6106015760405162461bcd60e51b815260206004820152601960248201527f6e6f74206f70657261746f72206f72206465706c6f7965722e0000000000000060448201526064016103fe565b6001600160a01b03821660009081526002602052604081206106239083610a37565b9050806106725760405162461bcd60e51b815260206004820152601060248201527f6661696c656420746f2072656d6f76650000000000000000000000000000000060448201526064016103fe565b816001600160a01b0316836001600160a01b03167ffc5ffe2160301e6b21a86f66febb30fe4e9e6932ac1afc0348fb2fd5daa18b1360405160405180910390a3505050565b60008281526001602052604081206106cf9083610a4c565b9392505050565b60608167ffffffffffffffff8111156106f1576106f1611237565b60405190808252806020026020018201604052801561072457816020015b606081526020019060019003908161070f5790505b50905060005b828110156107c457610794308585848181106107485761074861124d565b905060200281019061075a9190611263565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a5892505050565b8282815181106107a6576107a661124d565b602002602001018190525080806107bc906112c7565b91505061072a565b5092915050565b600081815260016020526040812061031b90610965565b6000828152602081905260409020600101546108008161036061096f565b61036f8383610a19565b6001600160a01b038116600090815260026020526040902060609061031b90610a7d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633141561086e575060131936013560601c90565b503390565b905090565b3390565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610411576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556108d761096f565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006106cf836001600160a01b038416610a8a565b60006001600160e01b03198216637965db0b60e01b148061031b57506301ffc9a760e01b6001600160e01b031983161461031b565b600061031b825490565b600061087361082e565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610411576109b5816001600160a01b03166014610ad9565b6109c0836020610ad9565b6040516020016109d19291906112e2565b60408051601f198184030181529082905262461bcd60e51b82526103fe91600401611363565b610a01828261087c565b600082815260016020526040902061036f908261091b565b610a238282610c82565b600082815260016020526040902061036f90825b60006106cf836001600160a01b038416610d1f565b60006106cf8383610e12565b60606106cf838360405180606001604052806027815260200161140e60279139610e3c565b606060006106cf83610f30565b6000818152600183016020526040812054610ad15750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561031b565b50600061031b565b60606000610ae8836002611376565b610af3906002611395565b67ffffffffffffffff811115610b0b57610b0b611237565b6040519080825280601f01601f191660200182016040528015610b35576020820181803683370190505b509050600360fc1b81600081518110610b5057610b5061124d565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610b7f57610b7f61124d565b60200101906001600160f81b031916908160001a9053506000610ba3846002611376565b610bae906001611395565b90505b6001811115610c33577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110610bef57610bef61124d565b1a60f81b828281518110610c0557610c0561124d565b60200101906001600160f81b031916908160001a90535060049490941c93610c2c816113ad565b9050610bb1565b5083156106cf5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103fe565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610411576000828152602081815260408083206001600160a01b03851684529091529020805460ff19169055610cdb61096f565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60008181526001830160205260408120548015610e08576000610d436001836113c4565b8554909150600090610d57906001906113c4565b9050818114610dbc576000866000018281548110610d7757610d7761124d565b9060005260206000200154905080876000018481548110610d9a57610d9a61124d565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610dcd57610dcd6113db565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061031b565b600091505061031b565b6000826000018281548110610e2957610e2961124d565b9060005260206000200154905092915050565b60606001600160a01b0384163b610ebb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016103fe565b600080856001600160a01b031685604051610ed691906113f1565b600060405180830381855af49150503d8060008114610f11576040519150601f19603f3d011682016040523d82523d6000602084013e610f16565b606091505b5091509150610f26828286610f8c565b9695505050505050565b606081600001805480602002602001604051908101604052809291908181526020018280548015610f8057602002820191906000526020600020905b815481526020019060010190808311610f6c575b50505050509050919050565b60608315610f9b5750816106cf565b825115610fab5782518084602001fd5b8160405162461bcd60e51b81526004016103fe9190611363565b600060208284031215610fd757600080fd5b81356001600160e01b0319811681146106cf57600080fd5b80356001600160a01b038116811461100657600080fd5b919050565b60006020828403121561101d57600080fd5b6106cf82610fef565b60006020828403121561103857600080fd5b5035919050565b6000806040838503121561105257600080fd5b8235915061106260208401610fef565b90509250929050565b6000806040838503121561107e57600080fd5b61108783610fef565b915061106260208401610fef565b600080604083850312156110a857600080fd5b50508035926020909101359150565b600080602083850312156110ca57600080fd5b823567ffffffffffffffff808211156110e257600080fd5b818501915085601f8301126110f657600080fd5b81358181111561110557600080fd5b8660208260051b850101111561111a57600080fd5b60209290920196919550909350505050565b60005b8381101561114757818101518382015260200161112f565b83811115611156576000848401525b50505050565b6000815180845261117481602086016020860161112c565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156111dd57603f198886030184526111cb85835161115c565b945092850192908501906001016111af565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561122b5783516001600160a01b031683529284019291840191600101611206565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261127a57600080fd5b83018035915067ffffffffffffffff82111561129557600080fd5b6020019150368190038213156112aa57600080fd5b9250929050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156112db576112db6112b1565b5060010190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161131a81601785016020880161112c565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161135781602884016020880161112c565b01602801949350505050565b6020815260006106cf602083018461115c565b6000816000190483118215151615611390576113906112b1565b500290565b600082198211156113a8576113a86112b1565b500190565b6000816113bc576113bc6112b1565b506000190190565b6000828210156113d6576113d66112b1565b500390565b634e487b7160e01b600052603160045260246000fd5b6000825161140381846020870161112c565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080c000a\";\n\ntype TWRegistryConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: TWRegistryConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class TWRegistry__factory extends ContractFactory {\n  constructor(...args: TWRegistryConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override deploy(\n    _trustedForwarder: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<TWRegistry> {\n    return super.deploy(\n      _trustedForwarder,\n      overrides || {}\n    ) as Promise<TWRegistry>;\n  }\n  override getDeployTransaction(\n    _trustedForwarder: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(_trustedForwarder, overrides || {});\n  }\n  override attach(address: string): TWRegistry {\n    return super.attach(address) as TWRegistry;\n  }\n  override connect(signer: Signer): TWRegistry__factory {\n    return super.connect(signer) as TWRegistry__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): TWRegistryInterface {\n    return new utils.Interface(_abi) as TWRegistryInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): TWRegistry {\n    return new Contract(address, _abi, signerOrProvider) as TWRegistry;\n  }\n}\n","import { BigNumber, BigNumberish, Contract, ethers, Signer } from \"ethers\";\nimport {\n  EIP712Domain,\n  EIP712StandardDomain,\n  signTypedDataInternal,\n} from \"./sign\";\n\nconst NAME_ABI = [\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst DOMAIN_SEPARATOR_ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getDomainSeperator\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst NONCES_ABI = [\n  {\n    inputs: [{ internalType: \"address\", name: \"owner\", type: \"address\" }],\n    name: \"nonces\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"user\", type: \"address\" }],\n    name: \"getNonce\",\n    outputs: [{ internalType: \"uint256\", name: \"nonce\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nasync function getSignerNonce(signer: Signer, contractAddress: string) {\n  const contract = new Contract(contractAddress, NONCES_ABI, signer);\n  try {\n    return await contract.nonces(await signer.getAddress());\n  } catch (err) {\n    return await contract.getNonce(await signer.getAddress());\n  }\n}\n\nasync function getDomainSeperator(signer: Signer, contractAddress: string) {\n  const contract = new Contract(contractAddress, DOMAIN_SEPARATOR_ABI, signer);\n  try {\n    return await contract.DOMAIN_SEPARATOR();\n  } catch (err) {\n    return await contract.getDomainSeperator();\n  }\n}\n\nasync function getTokenName(signer: Signer, contractAddress: string) {\n  return new Contract(contractAddress, NAME_ABI, signer).name();\n}\n\n/**\n * Polygon chain has different EIP712 domain separator for USDC, DAI compared to other chains and slightly different than EIP-2612.\n */\nasync function getChainDomainSeperator(\n  signer: Signer,\n  domain: EIP712StandardDomain,\n) {\n  const contractDomainSeparator = await getDomainSeperator(\n    signer,\n    domain.verifyingContract,\n  );\n\n  const polygonDomain: EIP712Domain = {\n    name: domain.name,\n    version: domain.version,\n    verifyingContract: domain.verifyingContract,\n    salt: ethers.utils.hexZeroPad(\n      BigNumber.from(domain.chainId).toHexString(),\n      32,\n    ),\n  };\n\n  if (\n    ethers.utils._TypedDataEncoder.hashDomain(polygonDomain) ===\n    contractDomainSeparator\n  ) {\n    return polygonDomain;\n  }\n\n  return domain;\n}\n\n/**\n * @internal\n */\nexport async function signDAIPermit(\n  signer: Signer,\n  currencyAddress: string,\n  owner: string,\n  spender: string,\n  allowed = true,\n  deadline?: BigNumberish,\n  nonce?: BigNumberish,\n) {\n  const domain = await getChainDomainSeperator(signer, {\n    name: await getTokenName(signer, currencyAddress),\n    version: \"1\",\n    chainId: await signer.getChainId(),\n    verifyingContract: currencyAddress,\n  });\n\n  nonce = nonce ?? (await getSignerNonce(signer, currencyAddress)).toString();\n  deadline = deadline ?? ethers.constants.MaxUint256;\n\n  const message = {\n    owner,\n    spender,\n    nonce,\n    deadline,\n    value: 0,\n    allowed,\n  };\n\n  const types = {\n    Permit: [\n      { name: \"holder\", type: \"address\" },\n      { name: \"spender\", type: \"address\" },\n      { name: \"nonce\", type: \"uint256\" },\n      { name: \"expiry\", type: \"uint256\" },\n      { name: \"allowed\", type: \"bool\" },\n    ],\n  };\n\n  const { signature } = await signTypedDataInternal(signer, domain, types, {\n    holder: owner,\n    spender,\n    nonce,\n    expiry: deadline,\n    allowed,\n  });\n\n  return {\n    message,\n    signature,\n  };\n}\n\n/**\n * @internal\n */\nexport async function signEIP2612Permit(\n  signer: Signer,\n  currencyAddress: string,\n  owner: string,\n  spender: string,\n  value: BigNumberish,\n  deadline?: BigNumberish,\n  nonce?: BigNumberish,\n) {\n  const domain = await getChainDomainSeperator(signer, {\n    name: await getTokenName(signer, currencyAddress),\n    version: \"1\",\n    chainId: await signer.getChainId(),\n    verifyingContract: currencyAddress,\n  });\n\n  nonce = nonce ?? (await getSignerNonce(signer, currencyAddress)).toString();\n  deadline = deadline ?? ethers.constants.MaxUint256;\n\n  const message = {\n    owner,\n    spender,\n    value,\n    nonce,\n    deadline,\n  };\n\n  const types = {\n    Permit: [\n      { name: \"owner\", type: \"address\" },\n      { name: \"spender\", type: \"address\" },\n      { name: \"value\", type: \"uint256\" },\n      { name: \"nonce\", type: \"uint256\" },\n      { name: \"deadline\", type: \"uint256\" },\n    ],\n  };\n\n  const { signature } = await signTypedDataInternal(\n    signer,\n    domain,\n    types,\n    message,\n  );\n  return {\n    message,\n    signature,\n  };\n}\n","// couldn't find this in barbones ethers export, but \"type\" should mean it does not increase bundle size either way\nimport type { TypedDataField } from \"@ethersproject/abstract-signer\";\nimport { ethers, Signer, providers } from \"ethers\";\n\n/**\n * @internal\n */\nexport interface EIP712StandardDomain {\n  name: string;\n  version: string;\n  chainId: number;\n  verifyingContract: string;\n}\n\n/**\n * @internal\n */\nexport interface EIP712PolygonDomain {\n  name: string;\n  version: string;\n  verifyingContract: string;\n  salt: string;\n}\n\n/**\n * @internal\n */\nexport type EIP712Domain = EIP712StandardDomain | EIP712PolygonDomain;\n\n/**\n * eip712 sign typed data with different wallet handling including ledger live\n * @internal\n */\nexport async function signTypedDataInternal(\n  signer: Signer,\n  domain: EIP712Domain,\n  types: Record<string, Array<TypedDataField>>,\n  message: Record<string, any>,\n) {\n  const provider = signer?.provider as providers.JsonRpcProvider;\n  if (!provider) {\n    throw new Error(\"missing provider\");\n  }\n\n  const payload = ethers.utils._TypedDataEncoder.getPayload(\n    domain,\n    types,\n    message,\n  );\n\n  let signature = \"\";\n\n  // an indirect way for accessing walletconnect's underlying provider\n  if ((provider as any)?.provider?.isWalletConnect) {\n    signature = await provider.send(\"eth_signTypedData\", [\n      (await signer.getAddress()).toLowerCase(),\n      JSON.stringify(payload),\n    ]);\n  } else {\n    try {\n      signature = await (signer as providers.JsonRpcSigner)._signTypedData(\n        domain,\n        types,\n        message,\n      );\n    } catch (err: any) {\n      if (err?.message?.includes(\"Method eth_signTypedData_v4 not supported\")) {\n        signature = await provider.send(\"eth_signTypedData\", [\n          (await signer.getAddress()).toLowerCase(),\n          JSON.stringify(payload),\n        ]);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  // fix ledger live where signature result in v = 0, 1. ethers magically fix it in split/join.\n  return {\n    payload,\n    signature: ethers.utils.joinSignature(\n      ethers.utils.splitSignature(signature),\n    ),\n  };\n}\n","import { ChainId } from \"../constants/chains\";\nimport { BigNumber, ethers } from \"ethers\";\n\n/**\n * @internal\n */\nfunction getGasStationUrl(chainId: ChainId.Polygon | ChainId.Mumbai): string {\n  switch (chainId) {\n    case ChainId.Polygon:\n      return \"https://gasstation-mainnet.matic.network/v2\";\n    case ChainId.Mumbai:\n      return \"https://gasstation-mumbai.matic.today/v2\";\n  }\n}\n\nconst MIN_POLYGON_GAS_PRICE = ethers.utils.parseUnits(\"31\", \"gwei\");\nconst MIN_MUMBAI_GAS_PRICE = ethers.utils.parseUnits(\"1\", \"gwei\");\n\n/**\n * @internal\n */\nfunction getDefaultGasFee(\n  chainId: ChainId.Polygon | ChainId.Mumbai,\n): BigNumber {\n  switch (chainId) {\n    case ChainId.Polygon:\n      return MIN_POLYGON_GAS_PRICE;\n    case ChainId.Mumbai:\n      return MIN_MUMBAI_GAS_PRICE;\n  }\n}\n\n/**\n *\n * @returns the gas price\n * @internal\n */\nexport async function getPolygonGasPriorityFee(\n  chainId: ChainId.Polygon | ChainId.Mumbai,\n): Promise<BigNumber> {\n  const gasStationUrl = getGasStationUrl(chainId);\n  try {\n    const data = await (await fetch(gasStationUrl)).json();\n    // take the standard speed here, SDK options will define the extra tip\n    const priorityFee = data[\"standard\"][\"maxPriorityFee\"];\n    if (priorityFee > 0) {\n      const fixedFee = parseFloat(priorityFee).toFixed(9);\n      return ethers.utils.parseUnits(fixedFee, \"gwei\");\n    }\n  } catch (e) {\n    console.error(\"failed to fetch gas\", e);\n  }\n  return getDefaultGasFee(chainId);\n}\n","import { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport {\n  BigNumber,\n  BigNumberish,\n  Contract,\n  constants,\n  providers,\n  utils,\n  ethers,\n} from \"ethers\";\nimport {\n  getNativeTokenByChainId,\n  NATIVE_TOKEN_ADDRESS,\n} from \"../constants/currency\";\nimport { Amount, Currency, CurrencyValue, Price } from \"../types/currency\";\nimport { PriceSchema } from \"../schema/shared\";\nimport ERC20Abi from \"../../abis/IERC20.json\";\nimport ERC20MetadataAbi from \"../../abis/IERC20Metadata.json\";\nimport { BaseERC20 } from \"../types/eips\";\nimport { IERC20, IERC20Metadata } from \"contracts\";\n\nexport function isNativeToken(tokenAddress: string): boolean {\n  return (\n    tokenAddress.toLowerCase() === NATIVE_TOKEN_ADDRESS ||\n    tokenAddress.toLowerCase() === constants.AddressZero\n  );\n}\n\nexport async function normalizePriceValue(\n  provider: providers.Provider,\n  inputPrice: Price,\n  currencyAddress: string,\n) {\n  const metadata = await fetchCurrencyMetadata(provider, currencyAddress);\n  return utils.parseUnits(PriceSchema.parse(inputPrice), metadata.decimals);\n}\n\nexport async function fetchCurrencyMetadata(\n  provider: providers.Provider,\n  asset: string,\n): Promise<Currency> {\n  if (isNativeToken(asset)) {\n    const network = await provider.getNetwork();\n    const nativeToken = getNativeTokenByChainId(network.chainId);\n    return {\n      name: nativeToken.name,\n      symbol: nativeToken.symbol,\n      decimals: nativeToken.decimals,\n    };\n  } else {\n    const erc20 = new Contract(\n      asset,\n      ERC20MetadataAbi,\n      provider,\n    ) as IERC20Metadata;\n    const [name, symbol, decimals] = await Promise.all([\n      erc20.name(),\n      erc20.symbol(),\n      erc20.decimals(),\n    ]);\n    return {\n      name,\n      symbol,\n      decimals,\n    };\n  }\n}\n\nexport async function fetchCurrencyValue(\n  providerOrSigner: providers.Provider,\n  asset: string,\n  price: BigNumberish,\n): Promise<CurrencyValue> {\n  const metadata = await fetchCurrencyMetadata(providerOrSigner, asset);\n  return {\n    ...metadata,\n    value: BigNumber.from(price),\n    displayValue: utils.formatUnits(price, metadata.decimals),\n  };\n}\n\nexport async function setErc20Allowance(\n  contractToApprove: ContractWrapper<any>,\n  value: BigNumber,\n  currencyAddress: string,\n  overrides: any,\n): Promise<any> {\n  if (isNativeToken(currencyAddress)) {\n    overrides[\"value\"] = value;\n  } else {\n    const signer = contractToApprove.getSigner();\n    const provider = contractToApprove.getProvider();\n    const erc20 = new ContractWrapper<IERC20>(\n      signer || provider,\n      currencyAddress,\n      ERC20Abi,\n      {},\n    );\n\n    const owner = await contractToApprove.getSignerAddress();\n    const spender = contractToApprove.readContract.address;\n    const allowance = await erc20.readContract.allowance(owner, spender);\n    if (allowance.lt(value)) {\n      // approve overrides the previous allowance, set it to the minimum required for this tx\n      await erc20.sendTransaction(\"approve\", [spender, value]);\n    }\n    return overrides;\n  }\n}\n\nexport async function approveErc20Allowance(\n  contractToApprove: ContractWrapper<any>,\n  currencyAddress: string,\n  price: BigNumber,\n  quantity: BigNumberish,\n  tokenDecimals: number,\n) {\n  const signer = contractToApprove.getSigner();\n  const provider = contractToApprove.getProvider();\n  const erc20 = new ContractWrapper<IERC20>(\n    signer || provider,\n    currencyAddress,\n    ERC20Abi,\n    {},\n  );\n  const owner = await contractToApprove.getSignerAddress();\n  const spender = contractToApprove.readContract.address;\n  const allowance = await erc20.readContract.allowance(owner, spender);\n  const totalPrice = BigNumber.from(price)\n    .mul(BigNumber.from(quantity))\n    .div(ethers.utils.parseUnits(\"1\", tokenDecimals));\n  if (allowance.lt(totalPrice)) {\n    await erc20.sendTransaction(\"approve\", [\n      spender,\n      allowance.add(totalPrice),\n    ]);\n  }\n}\n\nexport async function normalizeAmount(\n  contractWrapper: ContractWrapper<BaseERC20>,\n  amount: Amount,\n): Promise<BigNumber> {\n  const decimals = await contractWrapper.readContract.decimals();\n  return utils.parseUnits(PriceSchema.parse(amount), decimals);\n}\n","export enum ListingType {\n  Direct = 0,\n  Auction = 1,\n}\n","export enum ProposalState {\n  Pending,\n  Active,\n  Canceled,\n  Defeated,\n  Succeeded,\n  Queued,\n  Expired,\n  Executed,\n}\n","export enum VoteType {\n  Against = 0,\n  For = 1,\n  Abstain = 2,\n}\n","export enum ClaimEligibility {\n  NotEnoughSupply = \"There is not enough supply to claim.\",\n\n  AddressNotAllowed = \"This address is not on the allowlist.\",\n\n  WaitBeforeNextClaimTransaction = \"Not enough time since last claim transaction. Please wait.\",\n\n  AlreadyClaimed = \"You have already claimed the token.\",\n\n  NotEnoughTokens = \"There are not enough tokens in the wallet to pay for the claim.\",\n\n  NoActiveClaimPhase = \"There is no active claim phase at the moment. Please check back in later.\",\n\n  NoClaimConditionSet = \"There is no claim condition set.\",\n\n  NoWallet = \"No wallet connected.\",\n\n  Unknown = \"No claim conditions found.\",\n}\n","import {\n  BigNumber,\n  BigNumberish,\n  BytesLike,\n  ethers,\n  constants,\n  providers,\n  utils,\n} from \"ethers\";\nimport {\n  SnapshotInputSchema,\n  SnapshotSchema,\n} from \"../schema/contracts/common/snapshots\";\nimport {\n  approveErc20Allowance,\n  fetchCurrencyValue,\n  isNativeToken,\n  normalizePriceValue,\n} from \"./currency\";\nimport {\n  ClaimCondition,\n  ClaimConditionInput,\n  ClaimVerification,\n  FilledConditionInput,\n  SnapshotInfo,\n} from \"../types\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { IStorage } from \"../core\";\nimport {\n  ClaimConditionInputArray,\n  ClaimConditionInputSchema,\n  ClaimConditionOutputSchema,\n} from \"../schema/contracts/common/claim-conditions\";\nimport { createSnapshot } from \"./snapshots\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../constants\";\nimport { IDropClaimCondition } from \"contracts/DropERC20\";\n\n/**\n * Returns proofs and the overrides required for the transaction.\n * @internal\n * @returns - `overrides` and `proofs` as an object.\n */\nexport async function prepareClaim(\n  quantity: BigNumberish,\n  activeClaimCondition: ClaimCondition,\n  merkleMetadata: Record<string, string>,\n  tokenDecimals: number,\n  contractWrapper: ContractWrapper<any>,\n  storage: IStorage,\n  proofs: BytesLike[] = [utils.hexZeroPad([0], 32)],\n): Promise<ClaimVerification> {\n  const addressToClaim = await contractWrapper.getSignerAddress();\n  let maxClaimable = BigNumber.from(0);\n\n  try {\n    if (\n      !activeClaimCondition.merkleRootHash\n        .toString()\n        .startsWith(constants.AddressZero)\n    ) {\n      const claims = await fetchSnapshot(\n        activeClaimCondition.merkleRootHash.toString(),\n        merkleMetadata,\n        storage,\n      );\n      const item =\n        claims &&\n        claims.find(\n          (c) => c.address.toLowerCase() === addressToClaim.toLowerCase(),\n        );\n      if (item === undefined) {\n        throw new Error(\"No claim found for this address\");\n      }\n      proofs = item.proof;\n      maxClaimable = ethers.utils.parseUnits(item.maxClaimable, tokenDecimals);\n    }\n  } catch (e) {\n    // have to handle the valid error case that we *do* want to throw on\n    if ((e as Error)?.message === \"No claim found for this address\") {\n      throw e;\n    }\n    // other errors we wanna ignore and try to continue\n    console.warn(\n      \"failed to check claim condition merkle root hash, continuing anyways\",\n      e,\n    );\n  }\n\n  const overrides = (await contractWrapper.getCallOverrides()) || {};\n  const price = activeClaimCondition.price;\n  const currencyAddress = activeClaimCondition.currencyAddress;\n  if (price.gt(0)) {\n    if (isNativeToken(currencyAddress)) {\n      overrides[\"value\"] = BigNumber.from(price)\n        .mul(quantity)\n        .div(ethers.utils.parseUnits(\"1\", tokenDecimals));\n    } else {\n      await approveErc20Allowance(\n        contractWrapper,\n        currencyAddress,\n        price,\n        quantity,\n        tokenDecimals,\n      );\n    }\n  }\n  return {\n    overrides,\n    proofs,\n    maxQuantityPerTransaction: maxClaimable,\n    price,\n    currencyAddress,\n  };\n}\n\n/**\n * @internal\n * @param merkleRoot\n * @param merkleMetadata\n * @param storage\n */\nexport async function fetchSnapshot(\n  merkleRoot: string,\n  merkleMetadata: Record<string, string>,\n  storage: IStorage,\n) {\n  const snapshotUri = merkleMetadata[merkleRoot];\n  let snapshot = undefined;\n  if (snapshotUri) {\n    const raw = await storage.get(snapshotUri);\n    const snapshotData = SnapshotSchema.parse(raw);\n    if (merkleRoot === snapshotData.merkleRoot) {\n      snapshot = snapshotData.claims;\n    }\n  }\n  return snapshot;\n}\n\n/**\n * @internal\n * @param index\n * @param claimConditionInput\n * @param existingConditions\n */\nexport async function updateExistingClaimConditions(\n  index: number,\n  claimConditionInput: ClaimConditionInput,\n  existingConditions: ClaimCondition[],\n): Promise<ClaimConditionInput[]> {\n  if (index >= existingConditions.length) {\n    throw Error(\n      `Index out of bounds - got index: ${index} with ${existingConditions.length} conditions`,\n    );\n  }\n  // merge input with existing claim condition\n  const priceDecimals = existingConditions[index].currencyMetadata.decimals;\n  const priceInWei = existingConditions[index].price;\n  const priceInTokens = ethers.utils.formatUnits(priceInWei, priceDecimals);\n\n  // merge existing (output format) with incoming (input format)\n  const newConditionParsed = ClaimConditionInputSchema.parse({\n    ...existingConditions[index],\n    price: priceInTokens,\n    ...claimConditionInput,\n  });\n\n  // convert to output claim condition\n  const mergedConditionOutput = ClaimConditionOutputSchema.parse({\n    ...newConditionParsed,\n    price: priceInWei,\n  });\n\n  return existingConditions.map((existingOutput, i) => {\n    let newConditionAtIndex;\n    if (i === index) {\n      newConditionAtIndex = mergedConditionOutput;\n    } else {\n      newConditionAtIndex = existingOutput;\n    }\n    const formattedPrice = ethers.utils.formatUnits(\n      newConditionAtIndex.price,\n      priceDecimals,\n    );\n    return {\n      ...newConditionAtIndex,\n      price: formattedPrice, // manually transform back to input price type\n    };\n  });\n}\n\n/**\n * Fetches the proof for the current signer for a particular wallet.\n *\n * @param merkleRoot - The merkle root of the condition to check.\n * @returns - The proof for the current signer for the specified condition.\n */\nexport async function getClaimerProofs(\n  addressToClaim: string,\n  merkleRoot: string,\n  tokenDecimals: number,\n  merkleMetadata: Record<string, string>,\n  storage: IStorage,\n): Promise<{ maxClaimable: BigNumber; proof: string[] }> {\n  const claims = await fetchSnapshot(merkleRoot, merkleMetadata, storage);\n  if (claims === undefined) {\n    return {\n      proof: [],\n      maxClaimable: BigNumber.from(0),\n    };\n  }\n  const item = claims.find(\n    (c) => c.address.toLowerCase() === addressToClaim?.toLowerCase(),\n  );\n\n  if (item === undefined) {\n    return {\n      proof: [],\n      maxClaimable: BigNumber.from(0),\n    };\n  }\n  return {\n    proof: item.proof,\n    maxClaimable: ethers.utils.parseUnits(item.maxClaimable, tokenDecimals),\n  };\n}\n\n/**\n * Create and uploads snapshots + converts claim conditions to contract format\n * @param claimConditionInputs\n * @internal\n */\nexport async function processClaimConditionInputs(\n  claimConditionInputs: ClaimConditionInput[],\n  tokenDecimals: number,\n  provider: providers.Provider,\n  storage: IStorage,\n) {\n  const snapshotInfos: SnapshotInfo[] = [];\n  const inputsWithSnapshots = await Promise.all(\n    claimConditionInputs.map(async (conditionInput) => {\n      // check snapshots and upload if provided\n      if (conditionInput.snapshot && conditionInput.snapshot.length > 0) {\n        const snapshotInfo = await createSnapshot(\n          SnapshotInputSchema.parse(conditionInput.snapshot),\n          tokenDecimals,\n          storage,\n        );\n        snapshotInfos.push(snapshotInfo);\n        conditionInput.merkleRootHash = snapshotInfo.merkleRoot;\n      } else {\n        // if no snapshot is passed or empty, reset the merkle root\n        conditionInput.merkleRootHash = utils.hexZeroPad([0], 32);\n      }\n      // fill condition with defaults values if not provided\n      return conditionInput;\n    }),\n  );\n\n  const parsedInputs = ClaimConditionInputArray.parse(inputsWithSnapshots);\n\n  // Convert processed inputs to the format the contract expects, and sort by timestamp\n  const sortedConditions: IDropClaimCondition.ClaimConditionStruct[] = (\n    await Promise.all(\n      parsedInputs.map((c) =>\n        convertToContractModel(c, tokenDecimals, provider),\n      ),\n    )\n  ).sort((a, b) => {\n    const left = BigNumber.from(a.startTimestamp);\n    const right = BigNumber.from(b.startTimestamp);\n    if (left.eq(right)) {\n      return 0;\n    } else if (left.gt(right)) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n  return { snapshotInfos, sortedConditions };\n}\n\n/**\n * Converts a local SDK model to contract model\n * @param c\n * @param tokenDecimals\n * @param provider\n * @internal\n */\nasync function convertToContractModel(\n  c: FilledConditionInput,\n  tokenDecimals: number,\n  provider: providers.Provider,\n): Promise<IDropClaimCondition.ClaimConditionStruct> {\n  const currency =\n    c.currencyAddress === constants.AddressZero\n      ? NATIVE_TOKEN_ADDRESS\n      : c.currencyAddress;\n  let maxClaimableSupply;\n  let quantityLimitPerTransaction;\n  if (c.maxQuantity === \"unlimited\") {\n    maxClaimableSupply = ethers.constants.MaxUint256.toString();\n  } else {\n    maxClaimableSupply = ethers.utils.parseUnits(c.maxQuantity, tokenDecimals);\n  }\n  if (c.quantityLimitPerTransaction === \"unlimited\") {\n    quantityLimitPerTransaction = ethers.constants.MaxUint256.toString();\n  } else {\n    quantityLimitPerTransaction = ethers.utils.parseUnits(\n      c.quantityLimitPerTransaction,\n      tokenDecimals,\n    );\n  }\n  return {\n    startTimestamp: c.startTime,\n    maxClaimableSupply,\n    supplyClaimed: 0,\n    quantityLimitPerTransaction,\n    waitTimeInSecondsBetweenClaims: c.waitInSeconds,\n    pricePerToken: await normalizePriceValue(provider, c.price, currency),\n    currency,\n    merkleRoot: c.merkleRootHash,\n  };\n}\n\n/**\n * Transforms a contract model to local model\n * @param pm\n * @param tokenDecimals\n * @param provider\n * @param merkleMetadata\n * @param storage\n * @internal\n */\nexport async function transformResultToClaimCondition(\n  pm: IDropClaimCondition.ClaimConditionStructOutput,\n  tokenDecimals: number,\n  provider: providers.Provider,\n  merkleMetadata: Record<string, string>,\n  storage: IStorage,\n): Promise<ClaimCondition> {\n  const cv = await fetchCurrencyValue(provider, pm.currency, pm.pricePerToken);\n  const claims = await fetchSnapshot(pm.merkleRoot, merkleMetadata, storage);\n  const maxClaimableSupply = convertToReadableQuantity(\n    pm.maxClaimableSupply,\n    tokenDecimals,\n  );\n  const quantityLimitPerTransaction = convertToReadableQuantity(\n    pm.quantityLimitPerTransaction,\n    tokenDecimals,\n  );\n  const availableSupply = convertToReadableQuantity(\n    BigNumber.from(pm.maxClaimableSupply).sub(pm.supplyClaimed),\n    tokenDecimals,\n  );\n  const currentMintSupply = convertToReadableQuantity(\n    pm.supplyClaimed,\n    tokenDecimals,\n  );\n  return ClaimConditionOutputSchema.parse({\n    startTime: pm.startTimestamp,\n    maxQuantity: maxClaimableSupply,\n    currentMintSupply,\n    availableSupply,\n    quantityLimitPerTransaction,\n    waitInSeconds: pm.waitTimeInSecondsBetweenClaims.toString(),\n    price: BigNumber.from(pm.pricePerToken),\n    currency: pm.currency,\n    currencyAddress: pm.currency,\n    currencyMetadata: cv,\n    merkleRootHash: pm.merkleRoot,\n    snapshot: claims,\n  });\n}\n\nfunction convertToReadableQuantity(bn: BigNumber, tokenDecimals: number) {\n  if (bn.toString() === ethers.constants.MaxUint256.toString()) {\n    return \"unlimited\";\n  } else {\n    return ethers.utils.formatUnits(bn, tokenDecimals);\n  }\n}\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonPrimarySaleSchema,\n  CommonRoyaltySchema,\n  CommonSymbolSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\nimport { MerkleSchema } from \"./common/snapshots\";\n\nexport const DropErc721ContractInput = CommonContractSchema.merge(\n  CommonRoyaltySchema,\n)\n  .merge(MerkleSchema)\n  .merge(CommonSymbolSchema);\n\nexport const DropErc721ContractOutput = CommonContractOutputSchema.merge(\n  CommonRoyaltySchema,\n)\n  .merge(MerkleSchema)\n  .merge(CommonSymbolSchema);\n\nexport const DropErc721ContractDeploy = DropErc721ContractInput.merge(\n  CommonPlatformFeeSchema,\n)\n  .merge(CommonPrimarySaleSchema)\n  .merge(CommonTrustedForwarderSchema);\n\nexport const DropErc721ContractSchema = {\n  deploy: DropErc721ContractDeploy,\n  output: DropErc721ContractOutput,\n  input: DropErc721ContractInput,\n};\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonPrimarySaleSchema,\n  CommonRoyaltySchema,\n  CommonSymbolSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\nimport { MerkleSchema } from \"./common/snapshots\";\n\nexport const DropErc1155ContractInput = CommonContractSchema.merge(\n  CommonRoyaltySchema,\n)\n  .merge(MerkleSchema)\n  .merge(CommonSymbolSchema);\n\nexport const DropErc1155ContractOutput = CommonContractOutputSchema.merge(\n  CommonRoyaltySchema,\n)\n  .merge(MerkleSchema)\n  .merge(CommonSymbolSchema);\n\nexport const DropErc1155ContractDeploy = DropErc1155ContractInput.merge(\n  CommonPlatformFeeSchema,\n)\n  .merge(CommonPrimarySaleSchema)\n  .merge(CommonTrustedForwarderSchema);\n\nexport const DropErc1155ContractSchema = {\n  deploy: DropErc1155ContractDeploy,\n  output: DropErc1155ContractOutput,\n  input: DropErc1155ContractInput,\n};\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\n\nexport const MarketplaceContractInput = CommonContractSchema;\n\nexport const MarketplaceContractOutput = CommonContractOutputSchema;\n\nexport const MarketplaceContractDeploy = MarketplaceContractInput.merge(\n  CommonPlatformFeeSchema,\n).merge(CommonTrustedForwarderSchema);\n\nexport const MarketplaceContractSchema = {\n  deploy: MarketplaceContractDeploy,\n  output: MarketplaceContractOutput,\n  input: MarketplaceContractInput,\n};\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonRoyaltySchema,\n  CommonSymbolSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\n\nexport const PacksContractInput =\n  CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\n\nexport const PacksContractOutput =\n  CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(\n    CommonSymbolSchema,\n  );\n\nexport const PacksContractDeploy = PacksContractInput.merge(\n  CommonPlatformFeeSchema,\n).merge(CommonTrustedForwarderSchema);\n\nexport const PacksContractSchema = {\n  deploy: PacksContractDeploy,\n  output: PacksContractOutput,\n  input: PacksContractInput,\n};\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\nimport { z } from \"zod\";\nimport { AddressSchema, BasisPointsSchema } from \"../shared\";\n\nconst SplitRecipientInputSchema = z.object({\n  address: AddressSchema,\n  sharesBps: BasisPointsSchema.gt(0, \"Shares must be greater than 0\"),\n});\n\nconst SplitRecipientOuputSchema = SplitRecipientInputSchema.extend({\n  address: AddressSchema,\n  sharesBps: BasisPointsSchema,\n});\n\nexport const SplitsContractInput = CommonContractSchema.extend({\n  recipients: z\n    .array(SplitRecipientInputSchema)\n    .default([])\n    .superRefine((val, context) => {\n      const addressMap: Record<string, boolean> = {};\n      let totalShares = 0;\n      for (let index = 0; index < val.length; index++) {\n        const entry = val[index];\n        if (addressMap[entry.address]) {\n          context.addIssue({\n            code: z.ZodIssueCode.custom,\n            message: `Duplicate address.`,\n            path: [index, `address`],\n          });\n        }\n        addressMap[entry.address] = true;\n        totalShares += entry.sharesBps;\n        if (totalShares > 10_000) {\n          context.addIssue({\n            code: z.ZodIssueCode.custom,\n            message: `Total shares cannot go over 100%.`,\n            path: [index, `sharesBps`],\n          });\n        }\n      }\n      if (totalShares !== 10_000) {\n        context.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: `Total shares need to add up to 100%. Total shares are currently ${\n            totalShares / 100\n          }%`,\n          path: [],\n        });\n      }\n    }),\n});\n\nexport const SplitsContractOutput = CommonContractOutputSchema.extend({\n  recipients: z.array(SplitRecipientOuputSchema),\n});\n\nexport const SplitsContractDeploy = SplitsContractInput.merge(\n  SplitsContractInput,\n).merge(CommonTrustedForwarderSchema);\n\nexport const SplitsContractSchema = {\n  deploy: SplitsContractDeploy,\n  output: SplitsContractOutput,\n  input: SplitsContractInput,\n};\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonSymbolSchema,\n  CommonPlatformFeeSchema,\n  CommonPrimarySaleSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\n\nexport const TokenErc20ContractInput =\n  CommonContractSchema.merge(CommonSymbolSchema);\n\nexport const TokenErc20ContractOutput =\n  CommonContractOutputSchema.merge(CommonSymbolSchema);\n\nexport const TokenErc20ContractDeploy = TokenErc20ContractInput.merge(\n  CommonPlatformFeeSchema,\n)\n  .merge(CommonPrimarySaleSchema)\n  .merge(CommonTrustedForwarderSchema);\n\nexport const TokenErc20ContractSchema = {\n  deploy: TokenErc20ContractDeploy,\n  output: TokenErc20ContractOutput,\n  input: TokenErc20ContractInput,\n};\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonPrimarySaleSchema,\n  CommonRoyaltySchema,\n  CommonSymbolSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\n\nexport const TokenErc721ContractInput =\n  CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\n\nexport const TokenErc721ContractOutput =\n  CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(\n    CommonSymbolSchema,\n  );\n\nexport const TokenErc721ContractDeploy = TokenErc721ContractInput.merge(\n  CommonPlatformFeeSchema,\n)\n  .merge(CommonPrimarySaleSchema)\n  .merge(CommonTrustedForwarderSchema);\n\nexport const TokenErc721ContractSchema = {\n  deploy: TokenErc721ContractDeploy,\n  output: TokenErc721ContractOutput,\n  input: TokenErc721ContractInput,\n};\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonPrimarySaleSchema,\n  CommonRoyaltySchema,\n  CommonSymbolSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\n\nexport const TokenErc1155ContractInput =\n  CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\n\nexport const TokenErc1155ContractOutput =\n  CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(\n    CommonSymbolSchema,\n  );\n\nexport const TokenErc1155ContractDeploy = TokenErc1155ContractInput.merge(\n  CommonPlatformFeeSchema,\n)\n  .merge(CommonPrimarySaleSchema)\n  .merge(CommonTrustedForwarderSchema);\n\nexport const TokenErc1155ContractSchema = {\n  deploy: TokenErc1155ContractDeploy,\n  output: TokenErc1155ContractOutput,\n  input: TokenErc1155ContractInput,\n};\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\nimport {\n  AddressSchema,\n  BigNumberishSchema,\n  BigNumberSchema,\n  PercentSchema,\n} from \"../shared\";\nimport { z } from \"zod\";\n\nexport const VoteSettingsInputSchema = z.object({\n  voting_delay_in_blocks: z.number().min(0).default(0),\n  voting_period_in_blocks: z.number().min(1).default(1),\n  voting_token_address: AddressSchema,\n  voting_quorum_fraction: PercentSchema.default(0),\n  proposal_token_threshold: BigNumberishSchema.default(1),\n});\n\nexport const VoteSettingsOuputSchema = VoteSettingsInputSchema.extend({\n  proposal_token_threshold: BigNumberSchema,\n});\n\nexport const VoteContractInput = CommonContractSchema.merge(\n  VoteSettingsInputSchema,\n);\n\nexport const VoteContractOutput = CommonContractOutputSchema.merge(\n  VoteSettingsOuputSchema,\n);\n\nexport const VoteContractDeploy = VoteContractInput.merge(\n  CommonTrustedForwarderSchema,\n);\n\nexport const VoteContractSchema = {\n  deploy: VoteContractDeploy,\n  output: VoteContractOutput,\n  input: VoteContractInput,\n};\n\nexport const ProposalOutputSchema = z.object({\n  proposalId: BigNumberSchema,\n  proposer: z.string(),\n  targets: z.array(z.string()),\n  values: z.array(BigNumberSchema),\n  signatures: z.array(z.string()),\n  calldatas: z.array(z.string()),\n  startBlock: BigNumberSchema,\n  endBlock: BigNumberSchema,\n  description: z.string(),\n});\n","import { IStorage } from \"../interfaces/IStorage\";\nimport { DropErc721ContractSchema } from \"../../schema/contracts/drop-erc721\";\nimport { ContractMetadata } from \"./contract-metadata\";\nimport { DropERC1155, IERC20, IERC20__factory } from \"contracts\";\nimport { BigNumber, BigNumberish, constants, ethers } from \"ethers\";\nimport { isNativeToken } from \"../../common/currency\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { ClaimCondition, ClaimConditionInput } from \"../../types\";\nimport deepEqual from \"deep-equal\";\nimport { ClaimEligibility } from \"../../enums\";\nimport { TransactionResult } from \"../index\";\nimport {\n  getClaimerProofs,\n  processClaimConditionInputs,\n  transformResultToClaimCondition,\n  updateExistingClaimConditions,\n} from \"../../common/claim-conditions\";\nimport { includesErrorMessage } from \"../../common\";\nimport { isNode } from \"../../common/utils\";\n\n/**\n * Manages claim conditions for Edition Drop contracts\n * @public\n */\nexport class DropErc1155ClaimConditions {\n  private contractWrapper;\n  private metadata;\n  private storage: IStorage;\n\n  constructor(\n    contractWrapper: ContractWrapper<DropERC1155>,\n    metadata: ContractMetadata<DropERC1155, typeof DropErc721ContractSchema>,\n    storage: IStorage,\n  ) {\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n  }\n\n  /** ***************************************\n   * READ FUNCTIONS\n   *****************************************/\n\n  /**\n   * Get the currently active claim condition\n   *\n   * @returns the claim condition metadata\n   */\n  public async getActive(tokenId: BigNumberish): Promise<ClaimCondition> {\n    const id =\n      await this.contractWrapper.readContract.getActiveClaimConditionId(\n        tokenId,\n      );\n    const mc = await this.contractWrapper.readContract.getClaimConditionById(\n      tokenId,\n      id,\n    );\n    const metadata = await this.metadata.get();\n    return await transformResultToClaimCondition(\n      mc,\n      0,\n      this.contractWrapper.getProvider(),\n      metadata.merkle,\n      this.storage,\n    );\n  }\n\n  /**\n   * Get all the claim conditions\n   *\n   * @returns the claim conditions metadata\n   */\n  public async getAll(tokenId: BigNumberish): Promise<ClaimCondition[]> {\n    const claimCondition =\n      await this.contractWrapper.readContract.claimCondition(tokenId);\n    const startId = claimCondition.currentStartId.toNumber();\n    const count = claimCondition.count.toNumber();\n    const conditions = [];\n    for (let i = startId; i < startId + count; i++) {\n      conditions.push(\n        await this.contractWrapper.readContract.getClaimConditionById(\n          tokenId,\n          i,\n        ),\n      );\n    }\n    const metadata = await this.metadata.get();\n    return Promise.all(\n      conditions.map((c) =>\n        transformResultToClaimCondition(\n          c,\n          0,\n          this.contractWrapper.getProvider(),\n          metadata.merkle,\n          this.storage,\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Can Claim\n   *\n   * @remarks Check if a particular NFT can currently be claimed by a given user.\n   *\n   * @example\n   * ```javascript\n   * // Quantity of tokens to check claimability of\n   * const quantity = 1;\n   * const canClaim = await contract.canClaim(quantity);\n   * ```\n   */\n  public async canClaim(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    addressToCheck?: string,\n  ): Promise<boolean> {\n    // TODO switch to use verifyClaim\n    return (\n      (\n        await this.getClaimIneligibilityReasons(\n          tokenId,\n          quantity,\n          addressToCheck,\n        )\n      ).length === 0\n    );\n  }\n\n  /**\n   * For any claim conditions that a particular wallet is violating,\n   * this function returns human-readable information about the\n   * breaks in the condition that can be used to inform the user.\n   *\n   * @param tokenId - the token id to check\n   * @param quantity - The desired quantity that would be claimed.\n   * @param addressToCheck - The wallet address, defaults to the connected wallet.\n   *\n   */\n  public async getClaimIneligibilityReasons(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    addressToCheck?: string,\n  ): Promise<ClaimEligibility[]> {\n    const reasons: ClaimEligibility[] = [];\n    let activeConditionIndex: BigNumber;\n    let claimCondition: ClaimCondition;\n\n    if (addressToCheck === undefined) {\n      try {\n        addressToCheck = await this.contractWrapper.getSignerAddress();\n      } catch (err) {\n        console.warn(\"failed to get signer address\", err);\n      }\n    }\n\n    // if we have been unable to get a signer address, we can't check eligibility, so return a NoWallet error reason\n    if (!addressToCheck) {\n      return [ClaimEligibility.NoWallet];\n    }\n\n    try {\n      [activeConditionIndex, claimCondition] = await Promise.all([\n        this.contractWrapper.readContract.getActiveClaimConditionId(tokenId),\n        this.getActive(tokenId),\n      ]);\n    } catch (err: any) {\n      if (\n        includesErrorMessage(err, \"!CONDITION\") ||\n        includesErrorMessage(err, \"no active mint condition\")\n      ) {\n        reasons.push(ClaimEligibility.NoClaimConditionSet);\n        return reasons;\n      }\n      reasons.push(ClaimEligibility.Unknown);\n      return reasons;\n    }\n\n    if (claimCondition.availableSupply !== \"unlimited\") {\n      if (BigNumber.from(claimCondition.availableSupply).lt(quantity)) {\n        reasons.push(ClaimEligibility.NotEnoughSupply);\n      }\n    }\n\n    // check for merkle root inclusion\n    const merkleRootArray = ethers.utils.stripZeros(\n      claimCondition.merkleRootHash,\n    );\n    if (merkleRootArray.length > 0) {\n      const merkleLower = claimCondition.merkleRootHash.toString();\n      const metadata = await this.metadata.get();\n      const proofs = await getClaimerProofs(\n        addressToCheck,\n        merkleLower,\n        0,\n        metadata.merkle,\n        this.storage,\n      );\n      try {\n        const [validMerkleProof] =\n          await this.contractWrapper.readContract.verifyClaimMerkleProof(\n            activeConditionIndex,\n            addressToCheck,\n            tokenId,\n            quantity,\n            proofs.proof,\n            proofs.maxClaimable,\n          );\n        if (!validMerkleProof) {\n          reasons.push(ClaimEligibility.AddressNotAllowed);\n          return reasons;\n        }\n      } catch (e) {\n        reasons.push(ClaimEligibility.AddressNotAllowed);\n        return reasons;\n      }\n    }\n\n    // check for claim timestamp between claims\n    const [lastClaimedTimestamp, timestampForNextClaim] =\n      await this.contractWrapper.readContract.getClaimTimestamp(\n        tokenId,\n        activeConditionIndex,\n        addressToCheck,\n      );\n\n    const now = BigNumber.from(Date.now()).div(1000);\n\n    if (lastClaimedTimestamp.gt(0) && now.lt(timestampForNextClaim)) {\n      // contract will return MaxUint256 if user has already claimed and cannot claim again\n      if (timestampForNextClaim.eq(constants.MaxUint256)) {\n        reasons.push(ClaimEligibility.AlreadyClaimed);\n      } else {\n        reasons.push(ClaimEligibility.WaitBeforeNextClaimTransaction);\n      }\n    }\n\n    // if not within a browser conetext, check for wallet balance.\n    // In browser context, let the wallet do that job\n    if (claimCondition.price.gt(0) && isNode()) {\n      const totalPrice = claimCondition.price.mul(quantity);\n      const provider = this.contractWrapper.getProvider();\n      if (isNativeToken(claimCondition.currencyAddress)) {\n        const balance = await provider.getBalance(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      } else {\n        const erc20 = new ContractWrapper<IERC20>(\n          provider,\n          claimCondition.currencyAddress,\n          IERC20__factory.abi,\n          {},\n        );\n        const balance = await erc20.readContract.balanceOf(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      }\n    }\n\n    return reasons;\n  }\n\n  /** ***************************************\n   * WRITE FUNCTIONS\n   *****************************************/\n\n  /**\n   * Set public mint conditions on a NFT\n   *\n   * @remarks Sets the public mint conditions that need to be fulfilled by users to claim a particular NFT in this bundle.\n   *\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * const tokenId = 0; // the id of the NFT to set claim conditions on\n   * await dropContract.claimConditions.set(tokenId, claimConditions);\n   * ```\n   *\n   * @param tokenId - The id of the NFT to set the claim conditions on\n   * @param claimConditionInputs - The claim conditions\n   * @param resetClaimEligibilityForAll - Whether to reset the state of who already claimed NFTs previously\n   */\n  public async set(\n    tokenId: BigNumberish,\n    claimConditionInputs: ClaimConditionInput[],\n    resetClaimEligibilityForAll = false,\n  ): Promise<TransactionResult> {\n    // process inputs\n    const { snapshotInfos, sortedConditions } =\n      await processClaimConditionInputs(\n        claimConditionInputs,\n        0,\n        this.contractWrapper.getProvider(),\n        this.storage,\n      );\n\n    const merkleInfo: { [key: string]: string } = {};\n    snapshotInfos.forEach((s) => {\n      merkleInfo[s.merkleRoot] = s.snapshotUri;\n    });\n    const metadata = await this.metadata.get();\n    const encoded = [];\n\n    // keep the old merkle roots from other tokenIds\n    for (const key of Object.keys(metadata.merkle)) {\n      merkleInfo[key] = metadata.merkle[key];\n    }\n\n    // upload new merkle roots to snapshot URIs if updated\n    if (!deepEqual(metadata.merkle, merkleInfo)) {\n      const mergedMetadata = this.metadata.parseInputMetadata({\n        ...metadata,\n        merkle: merkleInfo,\n      });\n      // using internal method to just upload, avoids one contract call\n      const contractURI = await this.metadata._parseAndUploadMetadata(\n        mergedMetadata,\n      );\n      encoded.push(\n        this.contractWrapper.readContract.interface.encodeFunctionData(\n          \"setContractURI\",\n          [contractURI],\n        ),\n      );\n    }\n\n    encoded.push(\n      this.contractWrapper.readContract.interface.encodeFunctionData(\n        \"setClaimConditions\",\n        [tokenId, sortedConditions, resetClaimEligibilityForAll],\n      ),\n    );\n\n    return {\n      receipt: await this.contractWrapper.multiCall(encoded),\n    };\n  }\n\n  /**\n   * Update a single claim condition with new data.\n   * @param tokenId - the token id to update\n   * @param index - the index of the claim condition to update, as given by the index from the result of `getAll()`\n   * @param claimConditionInput - the new data to update, previous data will be retained\n   */\n  public async update(\n    tokenId: BigNumberish,\n    index: number,\n    claimConditionInput: ClaimConditionInput,\n  ): Promise<TransactionResult> {\n    const existingConditions = await this.getAll(tokenId);\n    const newConditionInputs = await updateExistingClaimConditions(\n      index,\n      claimConditionInput,\n      existingConditions,\n    );\n    return await this.set(tokenId, newConditionInputs);\n  }\n}\n","import { DropERC1155 } from \"contracts\";\nimport { BigNumberish } from \"ethers\";\nimport { ContractAnalytics } from \"./contract-analytics\";\n\n/**\n * Manages history for Edition Drop contracts\n * @public\n */\nexport class DropErc1155History {\n  private analytics;\n\n  constructor(analytics: ContractAnalytics<DropERC1155>) {\n    this.analytics = analytics;\n  }\n\n  /**\n   * Get all claimer addresses\n   *\n   * @remarks Get a list of all the addresses that have claimed a token\n   * @param tokenId - the tokenId of the NFT to get the addresses of*\n   * @returns - A unique list of addresses that claimed the token\n   * @example\n   * ```javascript\n   * const tokenId = \"0\";\n   * const allClaimerAddresses = await contract.history.getAllClaimerAddresses(tokenId);\n   * ```\n   */\n  public async getAllClaimerAddresses(\n    tokenId: BigNumberish,\n  ): Promise<string[]> {\n    const a = (await this.analytics.query(\"TokensClaimed\")).filter((e) =>\n      e.args?.tokenId.eq(tokenId),\n    );\n\n    return Array.from(new Set(a.map((b) => b.args?.claimer)));\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { DropERC20, IMintableERC20, TokenERC20 } from \"contracts\";\nimport { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport { IStorage } from \"../interfaces\";\nimport { NetworkOrSignerOrProvider, TransactionResult } from \"../types\";\nimport { UpdateableNetwork } from \"../interfaces/contract\";\nimport { SDKOptions, SDKOptionsSchema } from \"../../schema/sdk-options\";\nimport { Amount, Currency, CurrencyValue } from \"../../types/currency\";\nimport {\n  fetchCurrencyMetadata,\n  fetchCurrencyValue,\n} from \"../../common/currency\";\nimport { TokenMintInput } from \"../../schema/tokens/token\";\nimport { PriceSchema } from \"../../schema\";\nimport { BaseERC20 } from \"../../types/eips\";\nimport { detectContractFeature } from \"../../common\";\nimport { Erc20Mintable } from \"./erc-20-mintable\";\nimport { FEATURE_TOKEN } from \"../../constants/erc20-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\n\n/**\n * Standard ERC20 Token functions\n * @remarks Basic functionality for a ERC20 contract that handles all unit transformation for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.transfer(walletAddress, amount);\n * ```\n * @public\n */\nexport class Erc20<T extends TokenERC20 | DropERC20 | BaseERC20 = BaseERC20>\n  implements UpdateableNetwork, DetectableFeature\n{\n  featureName = FEATURE_TOKEN.name;\n  protected contractWrapper: ContractWrapper<T>;\n  protected storage: IStorage;\n  protected options: SDKOptions;\n\n  /**\n   * Mint tokens\n   */\n  public mint: Erc20Mintable | undefined;\n\n  constructor(\n    contractWrapper: ContractWrapper<T>,\n    storage: IStorage,\n    options: SDKOptions = {},\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    try {\n      this.options = SDKOptionsSchema.parse(options);\n    } catch (optionParseError) {\n      console.error(\n        \"invalid contract options object passed, falling back to default options\",\n        optionParseError,\n      );\n      this.options = SDKOptionsSchema.parse({});\n    }\n    this.mint = this.detectErc20Mintable();\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network: NetworkOrSignerOrProvider): void {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the token Metadata (name, symbol, etc...)\n   *\n   * @example\n   * ```javascript\n   * const token = await contract.token.get();\n   * ```\n   * @returns The token metadata\n   */\n  public async get(): Promise<Currency> {\n    return await fetchCurrencyMetadata(\n      this.contractWrapper.getProvider(),\n      this.getAddress(),\n    );\n  }\n\n  /**\n   * Get Token Balance for the currently connected wallet\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.token.balance();\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  public async balance(): Promise<CurrencyValue> {\n    return await this.balanceOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get Token Balance\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.token.balanceOf(walletAddress);\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  public async balanceOf(address: string): Promise<CurrencyValue> {\n    return this.getValue(\n      await this.contractWrapper.readContract.balanceOf(address),\n    );\n  }\n\n  /**\n   * The total supply for this Token\n   * @remarks Get how much supply has been minted\n   * @example\n   * ```javascript\n   * const balance = await contract.token.totalSupply();\n   * ```\n   */\n  public async totalSupply(): Promise<CurrencyValue> {\n    return await this.getValue(\n      await this.contractWrapper.readContract.totalSupply(),\n    );\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token allowance\n   * const spenderAddress = \"0x...\";\n   * const allowance = await contract.token.allowance(spenderAddress);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  public async allowance(spender: string): Promise<CurrencyValue> {\n    return await this.allowanceOf(\n      await this.contractWrapper.getSignerAddress(),\n      spender,\n    );\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet who owns the funds\n   * const owner = \"{{wallet_address}}\";\n   * // Address of the wallet to check token allowance\n   * const spender = \"0x...\";\n   * const allowance = await contract.token.allowanceOf(owner, spender);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  public async allowanceOf(\n    owner: string,\n    spender: string,\n  ): Promise<CurrencyValue> {\n    return await this.getValue(\n      await this.contractWrapper.readContract.allowance(owner, spender),\n    );\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Transfer Tokens\n   *\n   * @remarks Transfer tokens from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The amount of tokens you want to send\n   * const amount = 0.1;\n   * await contract.token.transfer(toAddress, amount);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    amount: Amount,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"transfer\", [\n        to,\n        await this.normalizeAmount(amount),\n      ]),\n    };\n  }\n\n  /**\n   * Transfer Tokens From Address\n   *\n   * @remarks Transfer tokens from one wallet to another\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const fromAddress = \"{{wallet_address}}\";\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The number of tokens you want to send\n   * const amount = 1.2\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n   * await contract.token.transferFrom(fromAddress, toAddress, amount);\n   * ```\n   */\n  public async transferFrom(\n    from: string,\n    to: string,\n    amount: Amount,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"transferFrom\", [\n        from,\n        to,\n        await this.normalizeAmount(amount),\n      ]),\n    };\n  }\n\n  /**\n   * Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to allow transfers from\n   * const spenderAddress = \"0x...\";\n   * // The number of tokens to give as allowance\n   * const amount = 100\n   * await contract.token.setAllowance(spenderAddress, amount);\n   * ```\n   */\n  public async setAllowance(\n    spender: string,\n    amount: Amount,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"approve\", [\n        spender,\n        await this.normalizeAmount(amount),\n      ]),\n    };\n  }\n\n  /**\n   * Transfer Tokens To Many Wallets\n   *\n   * @remarks Mint tokens from the connected wallet to many wallets\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 100, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 100,\n   *  }\n   * ]\n   *\n   * await contract.token.transferBatch(data);\n   * ```\n   */\n  public async transferBatch(args: TokenMintInput[]) {\n    const encoded = await Promise.all(\n      args.map(async (arg) => {\n        const amountWithDecimals = await this.normalizeAmount(arg.amount);\n        return this.contractWrapper.readContract.interface.encodeFunctionData(\n          \"transfer\",\n          [arg.toAddress, amountWithDecimals],\n        );\n      }),\n    );\n    await this.contractWrapper.multiCall(encoded);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * @internal\n   */\n  protected async getValue(value: BigNumberish): Promise<CurrencyValue> {\n    return await fetchCurrencyValue(\n      this.contractWrapper.getProvider(),\n      this.getAddress(),\n      BigNumber.from(value),\n    );\n  }\n\n  /**\n   * returns the wei amount from a token amount\n   * @internal\n   * @param amount\n   */\n  public async normalizeAmount(amount: Amount): Promise<BigNumber> {\n    const decimals = await this.contractWrapper.readContract.decimals();\n    return ethers.utils.parseUnits(PriceSchema.parse(amount), decimals);\n  }\n\n  private detectErc20Mintable(): Erc20Mintable | undefined {\n    if (detectContractFeature<IMintableERC20>(this.contractWrapper, \"ERC20\")) {\n      return new Erc20Mintable(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { IMintableERC20, IMulticall } from \"contracts\";\nimport { Erc20 } from \"./erc-20\";\nimport { TokenMintInput } from \"../../schema\";\nimport { TransactionResult } from \"../types\";\nimport { FEATURE_TOKEN_BATCH_MINTABLE } from \"../../constants/erc20-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\n\n/**\n * Mint Many ERC20 Tokens at once\n * @remarks Token batch minting functionality that handles unit parsing for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.mint.batch.to(walletAddress, [nftMetadata1, nftMetadata2, ...]);\n * ```\n * @public\n */\nexport class Erc20BatchMintable implements DetectableFeature {\n  featureName = FEATURE_TOKEN_BATCH_MINTABLE.name;\n  private contractWrapper: ContractWrapper<IMintableERC20 & IMulticall>;\n  private erc20: Erc20;\n\n  constructor(\n    erc20: Erc20,\n    contractWrapper: ContractWrapper<IMintableERC20 & IMulticall>,\n  ) {\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Mint Tokens To Many Wallets\n   *\n   * @remarks Mint tokens to many wallets in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 0.2, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 1.4,\n   *  }\n   * ]\n   *\n   * await contract.mintBatchTo(data);\n   * ```\n   */\n  public async to(args: TokenMintInput[]): Promise<TransactionResult> {\n    const encoded = [];\n    for (const arg of args) {\n      encoded.push(\n        this.contractWrapper.readContract.interface.encodeFunctionData(\n          \"mintTo\",\n          [arg.toAddress, await this.erc20.normalizeAmount(arg.amount)],\n        ),\n      );\n    }\n    return { receipt: await this.contractWrapper.multiCall(encoded) };\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { IMintableERC20, IMulticall } from \"contracts\";\nimport { TransactionResult } from \"../types\";\nimport { detectContractFeature } from \"../../common\";\nimport { Erc20 } from \"./erc-20\";\nimport { Amount } from \"../../types\";\nimport { Erc20BatchMintable } from \"./erc-20-batch-mintable\";\nimport { FEATURE_TOKEN_MINTABLE } from \"../../constants/erc20-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\n\n/**\n * Mint ERC20 Tokens\n * @remarks Token minting functionality that handles unit parsing for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.mint.to(walletAddress, nftMetadata);\n * ```\n * @public\n */\nexport class Erc20Mintable implements DetectableFeature {\n  featureName = FEATURE_TOKEN_MINTABLE.name;\n  private contractWrapper: ContractWrapper<IMintableERC20>;\n  private erc20: Erc20;\n\n  /**\n   * Batch mint Tokens to many addresses\n   */\n  public batch: Erc20BatchMintable | undefined;\n\n  constructor(erc20: Erc20, contractWrapper: ContractWrapper<IMintableERC20>) {\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n    this.batch = this.detectErc20BatchMintable();\n  }\n\n  /**\n   * Mint Tokens\n   *\n   * @remarks Mint tokens to a specified address.\n   *\n   * @example\n   * ```javascript\n   * const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\n   * const amount = \"1.5\"; // The amount of this token you want to mint\n   * await contract.token.mint.to(toAddress, amount);\n   * ```\n   */\n  public async to(to: string, amount: Amount): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"mintTo\", [\n        to,\n        await this.erc20.normalizeAmount(amount),\n      ]),\n    };\n  }\n\n  private detectErc20BatchMintable() {\n    if (\n      detectContractFeature<IMintableERC20 & IMulticall>(\n        this.contractWrapper,\n        \"ERC20BatchMintable\",\n      )\n    ) {\n      return new Erc20BatchMintable(this.erc20, this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { BigNumber, constants } from \"ethers\";\nimport { TokenERC20 } from \"contracts\";\nimport { TokenHolderBalance } from \"../../types\";\nimport { fetchCurrencyValue } from \"../../common/currency\";\nimport { ContractAnalytics } from \"./contract-analytics\";\n\n/**\n * Manages history for Token contracts\n * @public\n */\nexport class TokenERC20History {\n  private analytics;\n  private contractWrapper;\n\n  constructor(\n    contractWrapper: ContractWrapper<TokenERC20>,\n    analytics: ContractAnalytics<TokenERC20>,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.analytics = analytics;\n  }\n\n  /**\n   * Get all holder balances\n   *\n   * @remarks Lets you get all token holders and their corresponding balances\n   * @returns - A JSON object of all token holders and their corresponding balances\n   * @example\n   * ```javascript\n   * const allHolderBalances = await contract.history.getAllHolderBalances();\n   * ```\n   */\n  public async getAllHolderBalances(): Promise<TokenHolderBalance[]> {\n    const a = await this.analytics.query(\"Transfer\");\n    const txns = a.map((b) => b.args);\n    const balances: {\n      [key: string]: BigNumber;\n    } = {};\n    txns.forEach((item) => {\n      const from = item?.from;\n      const to = item?.to;\n      const amount = item?.value;\n\n      if (!(from === constants.AddressZero)) {\n        if (!(from in balances)) {\n          balances[from] = BigNumber.from(0);\n        }\n        balances[from] = balances[from].sub(amount);\n      }\n      if (!(to === constants.AddressZero)) {\n        if (!(to in balances)) {\n          balances[to] = BigNumber.from(0);\n        }\n        balances[to] = balances[to].add(amount);\n      }\n    });\n    return Promise.all(\n      Object.keys(balances).map(async (addr) => ({\n        holder: addr,\n        balance: await fetchCurrencyValue(\n          this.contractWrapper.getProvider(),\n          this.contractWrapper.readContract.address,\n          balances[addr],\n        ),\n      })),\n    );\n  }\n}\n","import {\n  FilledSignaturePayload20,\n  MintRequest20,\n  PayloadToSign20,\n  PayloadWithUri20,\n  Signature20PayloadInput,\n  Signature20PayloadOutput,\n  SignedPayload20,\n} from \"../../schema/contracts/common/signature\";\nimport { TransactionResult } from \"../types\";\nimport { normalizePriceValue, setErc20Allowance } from \"../../common/currency\";\nimport { BigNumber, ethers } from \"ethers\";\nimport invariant from \"tiny-invariant\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { ITokenERC20, TokenERC20 } from \"contracts\";\nimport { ContractRoles } from \"./contract-roles\";\nimport { Token } from \"../../contracts\";\n\n/**\n * Enables generating ERC20 Tokens with rules and an associated signature, which can then be minted by anyone securely\n * @public\n */\n// TODO consolidate into a single class\nexport class Erc20SignatureMinting {\n  private contractWrapper: ContractWrapper<TokenERC20>;\n  private roles: ContractRoles<TokenERC20, typeof Token.contractRoles[number]>;\n\n  constructor(\n    contractWrapper: ContractWrapper<TokenERC20>,\n    roles: ContractRoles<TokenERC20, typeof Token.contractRoles[number]>,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.roles = roles;\n  }\n\n  /**\n   * Mint tokens from a signature\n   *\n   * @remarks Mint a certain amount of tokens from a previously generated signature.\n   *\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   * @param signedPayload - the previously generated payload and signature with {@link Erc20SignatureMinting.generate}\n   */\n  public async mint(\n    signedPayload: SignedPayload20,\n  ): Promise<TransactionResult> {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const overrides = await this.contractWrapper.getCallOverrides();\n    await setErc20Allowance(\n      this.contractWrapper,\n      BigNumber.from(message.price),\n      mintRequest.currencyAddress,\n      overrides,\n    );\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"mintWithSignature\",\n        [message, signature],\n        overrides,\n      ),\n    };\n  }\n\n  /**\n   * Mint any number of generated tokens signatures at once\n   * @remarks Mint multiple token signatures in one transaction. Note that this is only possible for free mints (cannot batch mints with a price attached to it for security reasons)\n   * @param signedPayloads - the array of signed payloads to mint\n   */\n  public async mintBatch(\n    signedPayloads: SignedPayload20[],\n  ): Promise<TransactionResult> {\n    const contractPayloads = await Promise.all(\n      signedPayloads.map(async (s) => {\n        const message = await this.mapPayloadToContractStruct(s.payload);\n        const signature = s.signature;\n        const price = s.payload.price;\n        if (BigNumber.from(price).gt(0)) {\n          throw new Error(\n            \"Can only batch free mints. For mints with a price, use regular mint()\",\n          );\n        }\n        return {\n          message,\n          signature,\n        };\n      }),\n    );\n    const encoded = contractPayloads.map((p) => {\n      return this.contractWrapper.readContract.interface.encodeFunctionData(\n        \"mintWithSignature\",\n        [p.message, p.signature],\n      );\n    });\n    return {\n      receipt: await this.contractWrapper.multiCall(encoded),\n    };\n  }\n\n  /**\n   * Verify that a payload is correctly signed\n   * @param signedPayload - the payload to verify\n   */\n  public async verify(signedPayload: SignedPayload20): Promise<boolean> {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const verification: [boolean, string] =\n      await this.contractWrapper.readContract.verify(message, signature);\n    return verification[0];\n  }\n\n  /**\n   * Generate a signature that can be used to mint a certain amount of tokens\n   *\n   * @remarks Takes in a quantity of tokens, some conditions for how it can be minted and signs it with your private key. The generated signature can then be used to mint those tokens using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   quantity: 4.2, // The quantity of tokens to be minted\n   *   to: {{wallet_address}}, // Who will receive the tokens (or AddressZero for anyone)\n   *   price: 0.5, // the price to pay for minting those tokens\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now,\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this token mint\n   * };\n   *\n   * const signedPayload = contract.signature.generate(payload);\n   * // now anyone can use these to mint the NFT using `contract.signature.mint(signedPayload)`\n   * ```\n   * @param mintRequest - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   */\n  public async generate(\n    mintRequest: PayloadToSign20,\n  ): Promise<SignedPayload20> {\n    return (await this.generateBatch([mintRequest]))[0];\n  }\n\n  /**\n   * Generate a batch of signatures that can be used to mint many token signatures.\n   *\n   * @remarks See {@link Erc20SignatureMinting.generate}\n   *\n   * @param payloadsToSign - the payloads to sign\n   * @returns an array of payloads and signatures\n   */\n  public async generateBatch(\n    payloadsToSign: PayloadToSign20[],\n  ): Promise<SignedPayload20[]> {\n    await this.roles.verify(\n      [\"minter\"],\n      await this.contractWrapper.getSignerAddress(),\n    );\n\n    const parsedRequests: FilledSignaturePayload20[] = payloadsToSign.map((m) =>\n      Signature20PayloadInput.parse(m),\n    );\n\n    const chainId = await this.contractWrapper.getChainID();\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"No signer available\");\n\n    // ERC20Permit (EIP-712) spec differs from signature mint 721, 1155.\n    const name = await this.contractWrapper.readContract.name();\n\n    return await Promise.all(\n      parsedRequests.map(async (m) => {\n        const finalPayload = Signature20PayloadOutput.parse(m);\n        const signature = await this.contractWrapper.signTypedData(\n          signer,\n          {\n            name,\n            version: \"1\",\n            chainId,\n            verifyingContract: this.contractWrapper.readContract.address,\n          },\n          { MintRequest: MintRequest20 },\n          await this.mapPayloadToContractStruct(finalPayload),\n        );\n        return {\n          payload: finalPayload,\n          signature: signature.toString(),\n        };\n      }),\n    );\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  private async mapPayloadToContractStruct(\n    mintRequest: PayloadWithUri20,\n  ): Promise<ITokenERC20.MintRequestStructOutput> {\n    const normalizedPrice = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      mintRequest.price,\n      mintRequest.currencyAddress,\n    );\n    const amountWithDecimals = ethers.utils.parseUnits(\n      mintRequest.quantity,\n      await this.contractWrapper.readContract.decimals(),\n    );\n    return {\n      to: mintRequest.to,\n      primarySaleRecipient: mintRequest.primarySaleRecipient,\n      quantity: amountWithDecimals,\n      price: normalizedPrice,\n      currency: mintRequest.currencyAddress,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      uid: mintRequest.uid,\n    } as ITokenERC20.MintRequestStructOutput;\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { BigNumber, BigNumberish, constants } from \"ethers\";\nimport { NFTMetadata, NFTMetadataOwner } from \"../../schema/tokens/common\";\nimport { IStorage } from \"../interfaces\";\nimport { NetworkOrSignerOrProvider, TransactionResult } from \"../types\";\nimport { UpdateableNetwork } from \"../interfaces/contract\";\nimport { SDKOptions, SDKOptionsSchema } from \"../../schema/sdk-options\";\nimport { fetchTokenMetadata } from \"../../common/nft\";\nimport { detectContractFeature, NotFoundError } from \"../../common\";\nimport {\n  DropERC721,\n  IERC721Supply,\n  IMintableERC721,\n  TokenERC721,\n} from \"contracts\";\nimport { Erc721Supply } from \"./erc-721-supply\";\nimport { Erc721Mintable } from \"./erc-721-mintable\";\nimport { BaseERC721 } from \"../../types/eips\";\nimport { FEATURE_NFT } from \"../../constants/erc721-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\n\n/**\n * Standard ERC721 NFT functions\n * @remarks Basic functionality for a ERC721 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.transfer(walletAddress, tokenId);\n * ```\n * @public\n */\nexport class Erc721<\n  T extends DropERC721 | TokenERC721 | BaseERC721 = BaseERC721,\n> implements UpdateableNetwork, DetectableFeature\n{\n  featureName = FEATURE_NFT.name;\n  protected contractWrapper: ContractWrapper<T>;\n  protected storage: IStorage;\n  protected options: SDKOptions;\n\n  public query: Erc721Supply | undefined;\n  public mint: Erc721Mintable | undefined;\n\n  constructor(\n    contractWrapper: ContractWrapper<T>,\n    storage: IStorage,\n    options: SDKOptions = {},\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    try {\n      this.options = SDKOptionsSchema.parse(options);\n    } catch (optionParseError) {\n      console.error(\n        \"invalid contract options object passed, falling back to default options\",\n        optionParseError,\n      );\n      this.options = SDKOptionsSchema.parse({});\n    }\n    this.query = this.detectErc721Enumerable();\n    this.mint = this.detectErc721Mintable();\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network: NetworkOrSignerOrProvider): void {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a single NFT Metadata\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.nft.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  public async get(tokenId: BigNumberish): Promise<NFTMetadataOwner> {\n    const [owner, metadata] = await Promise.all([\n      this.ownerOf(tokenId).catch(() => constants.AddressZero),\n      this.getTokenMetadata(tokenId),\n    ]);\n    return { owner, metadata };\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns the address of the owner\n   */\n  public async ownerOf(tokenId: BigNumberish): Promise<string> {\n    return await this.contractWrapper.readContract.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.nft.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n  public async balanceOf(address: string): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  public async balance(): Promise<BigNumber> {\n    return await this.balanceOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.contractWrapper.readContract.isApprovedForAll(\n      address,\n      operator,\n    );\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Transfer a single NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.nft.transfer(walletAddress, tokenId);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    tokenId: BigNumberish,\n  ): Promise<TransactionResult> {\n    const from = await this.contractWrapper.getSignerAddress();\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"safeTransferFrom(address,address,uint256)\",\n        [from, to, tokenId],\n      ),\n    };\n  }\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  public async setApprovalForAll(\n    operator: string,\n    approved: boolean,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"setApprovalForAll\", [\n        operator,\n        approved,\n      ]),\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * @internal\n   */\n  protected async getTokenMetadata(\n    tokenId: BigNumberish,\n  ): Promise<NFTMetadata> {\n    const tokenUri = await this.contractWrapper.readContract.tokenURI(tokenId);\n    if (!tokenUri) {\n      throw new NotFoundError();\n    }\n    return fetchTokenMetadata(tokenId, tokenUri, this.storage);\n  }\n\n  private detectErc721Enumerable(): Erc721Supply | undefined {\n    if (\n      detectContractFeature<BaseERC721 & IERC721Supply>(\n        this.contractWrapper,\n        \"ERC721Supply\",\n      )\n    ) {\n      return new Erc721Supply(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n\n  private detectErc721Mintable(): Erc721Mintable | undefined {\n    if (\n      detectContractFeature<IMintableERC721>(\n        this.contractWrapper,\n        \"ERC721Mintable\",\n      )\n    ) {\n      return new Erc721Mintable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n}\n","import { BigNumber, BigNumberish, Contract, ethers, providers } from \"ethers\";\nimport {\n  CommonNFTInput,\n  CommonNFTOutput,\n  NFTMetadata,\n  NFTMetadataInput,\n  NFTMetadataOrUri,\n} from \"../schema/tokens/common\";\nimport { IStorage } from \"../core\";\nimport { IERC1155Metadata, IERC165, IERC721Metadata } from \"contracts\";\nimport { NotFoundError } from \"./error\";\nimport {\n  InterfaceId_IERC1155,\n  InterfaceId_IERC721,\n} from \"../constants/contract\";\nimport ERC721MetadataAbi from \"../../abis/IERC721Metadata.json\";\nimport ERC1155MetadataAbi from \"../../abis/IERC1155Metadata.json\";\nimport ERC165MetadataAbi from \"../../abis/IERC165.json\";\n\n/**\n * fetches the token metadata\n * @param tokenId - the id (to get it back in the output)\n * @param tokenUri - the uri to fetch\n * @param storage - which storage to fetch from\n *\n * @internal\n */\nexport async function fetchTokenMetadata(\n  tokenId: BigNumberish,\n  tokenUri: string,\n  storage: IStorage,\n): Promise<NFTMetadata> {\n  const parsedUri = tokenUri.replace(\n    \"{id}\",\n    ethers.utils.hexZeroPad(BigNumber.from(tokenId).toHexString(), 32).slice(2),\n  );\n  const jsonMetadata = await storage.get(parsedUri);\n  return CommonNFTOutput.parse({\n    id: BigNumber.from(tokenId),\n    uri: tokenUri,\n    ...jsonMetadata,\n  });\n}\n\n// Used for marketplace to fetch NFT metadata from contract address + tokenId\n/**\n * @internal\n * @param contractAddress\n * @param provider\n * @param tokenId\n * @param storage\n */\nexport async function fetchTokenMetadataForContract(\n  contractAddress: string,\n  provider: providers.Provider,\n  tokenId: BigNumberish,\n  storage: IStorage,\n) {\n  let uri: string | undefined;\n  const erc165 = new Contract(\n    contractAddress,\n    ERC165MetadataAbi,\n    provider,\n  ) as IERC165;\n  const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n  const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n  if (isERC721) {\n    const erc721 = new Contract(\n      contractAddress,\n      ERC721MetadataAbi,\n      provider,\n    ) as IERC721Metadata;\n    uri = await erc721.tokenURI(tokenId);\n  } else if (isERC1155) {\n    const erc1155 = new Contract(\n      contractAddress,\n      ERC1155MetadataAbi,\n      provider,\n    ) as IERC1155Metadata;\n    uri = await erc1155.uri(tokenId);\n  } else {\n    throw Error(\"Contract must implement ERC 1155 or ERC 721.\");\n  }\n  if (!uri) {\n    throw new NotFoundError();\n  }\n  return fetchTokenMetadata(tokenId, uri, storage);\n}\n\n/**\n * @internal\n * @param metadata\n * @param storage\n */\nexport async function uploadOrExtractURI(\n  metadata: NFTMetadataOrUri,\n  storage: IStorage,\n): Promise<string> {\n  if (typeof metadata === \"string\") {\n    return metadata;\n  } else {\n    return await storage.uploadMetadata(CommonNFTInput.parse(metadata));\n  }\n}\n\n/**\n * @internal\n * @param metadatas\n * @param storage\n */\nexport async function uploadOrExtractURIs(\n  metadatas: NFTMetadataOrUri[],\n  storage: IStorage,\n): Promise<string[]> {\n  if (isUriList(metadatas)) {\n    return metadatas;\n  } else if (isMetadataList(metadatas)) {\n    const { metadataUris } = await storage.uploadMetadataBatch(\n      metadatas.map((m) => CommonNFTInput.parse(m)),\n    );\n    return metadataUris;\n  } else {\n    throw new Error(\n      \"NFT metadatas must all be of the same type (all URI or all NFTMetadataInput)\",\n    );\n  }\n}\n\nfunction isUriList(metadatas: NFTMetadataOrUri[]): metadatas is string[] {\n  return metadatas.find((m) => typeof m !== \"string\") === undefined;\n}\n\nfunction isMetadataList(\n  metadatas: NFTMetadataOrUri[],\n): metadatas is NFTMetadataInput[] {\n  return metadatas.find((m) => typeof m !== \"object\") === undefined;\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { IERC721Enumerable, IERC721Supply, TokenERC721 } from \"contracts\";\nimport { BigNumber } from \"ethers\";\nimport { DEFAULT_QUERY_ALL_COUNT, QueryAllParams } from \"../../types\";\nimport { NFTMetadataOwner } from \"../../schema\";\nimport { Erc721 } from \"./erc-721\";\nimport { BaseERC721 } from \"../../types/eips\";\nimport { detectContractFeature } from \"../../common\";\nimport { Erc721Enumerable } from \"./erc-721-enumerable\";\nimport { FEATURE_NFT_SUPPLY } from \"../../constants/erc721-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\n\n/**\n * List ERC721 NFTs\n * @remarks Easily list all the NFTs in a ERC721 contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const nfts = await contract.nft.query.all();\n * ```\n * @public\n */\nexport class Erc721Supply implements DetectableFeature {\n  featureName = FEATURE_NFT_SUPPLY.name;\n  private contractWrapper: ContractWrapper<BaseERC721 & IERC721Supply>;\n  private erc721: Erc721;\n\n  public owned: Erc721Enumerable | undefined;\n\n  constructor(\n    erc721: Erc721,\n    contractWrapper: ContractWrapper<BaseERC721 & IERC721Supply>,\n  ) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.owned = this.detectErc721Owned();\n  }\n\n  /**\n   * Get All Minted NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.nft.query.all();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  public async all(queryParams?: QueryAllParams): Promise<NFTMetadataOwner[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n\n    let maxSupply = await this.totalCirculatingSupply();\n    if (this.hasNextIdToMint(this.contractWrapper)) {\n      maxSupply = await this.contractWrapper.readContract.nextTokenIdToMint();\n    }\n    const maxId = Math.min(maxSupply.toNumber(), start + count);\n    return await Promise.all(\n      [...Array(maxId - start).keys()].map((i) =>\n        this.erc721.get((start + i).toString()),\n      ),\n    );\n  }\n\n  /**\n   * Get the number of NFTs of this contract currently owned by end users\n   * @returns the total number of NFTs of this contract in circulation (minted & not burned)\n   * @public\n   */\n  public async totalCirculatingSupply(): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.totalSupply();\n  }\n\n  private hasNextIdToMint(\n    contractWrapper: ContractWrapper<any>,\n  ): contractWrapper is ContractWrapper<TokenERC721> {\n    return \"nextTokenIdToMint\" in contractWrapper.readContract.functions;\n  }\n\n  private detectErc721Owned(): Erc721Enumerable | undefined {\n    if (\n      detectContractFeature<BaseERC721 & IERC721Enumerable>(\n        this.contractWrapper,\n        \"ERC721Enumerable\",\n      )\n    ) {\n      return new Erc721Enumerable(this.erc721, this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n","import { NFTMetadata, NFTMetadataInput } from \"../schema/tokens/common\";\nimport { BigNumber, BigNumberish } from \"ethers\";\n\nexport interface PackMetadata {\n  id: string;\n  creator: string;\n  currentSupply: BigNumber;\n  openStart: Date | null;\n  metadata: NFTMetadata;\n}\n\n/**\n * @public\n */\nexport interface PackNFTMetadata {\n  supply: BigNumber;\n  metadata: NFTMetadata;\n}\n\n/**\n * @public\n */\nexport interface PackMetadataWithBalance extends PackMetadata {\n  ownedByAddress: BigNumber;\n}\n\nexport enum UnderlyingType {\n  None = 0,\n  ERC20 = 1,\n  ERC721 = 2,\n}\n\n// TODO zodify\nexport interface IPackCreateArgs {\n  assetContract: string;\n  metadata: NFTMetadataInput;\n  assets: {\n    tokenId: BigNumberish;\n    amount: BigNumberish;\n  }[];\n  secondsUntilOpenStart?: BigNumberish;\n  rewardsPerOpen?: BigNumberish;\n}\n\n/**\n * @beta\n */\n// TODO zodify\nexport interface IPackBatchArgs {\n  tokenId: BigNumberish;\n  amount: BigNumberish;\n}\n","import { BigNumberish } from \"ethers\";\n\n/**\n * @internal\n */\nexport const DEFAULT_QUERY_ALL_COUNT = 100;\n\n/**\n * Pagination Parameters\n * @public\n */\nexport interface QueryAllParams {\n  /**\n   * the index to start from (default: 0)\n   */\n  start?: BigNumberish;\n  /**\n   * how many items to return (default: 100)\n   */\n  count?: BigNumberish;\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { IERC721Enumerable } from \"contracts\";\nimport { BigNumber } from \"ethers\";\nimport { NFTMetadataOwner } from \"../../schema\";\nimport { Erc721 } from \"./erc-721\";\nimport { BaseERC721 } from \"../../types/eips\";\nimport { FEATURE_NFT_ENUMERABLE } from \"../../constants/erc721-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\n\n/**\n * List owned ERC721 NFTs\n * @remarks Easily list all the NFTs from a ERC721 contract, owned by a certain wallet.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const walletAddress = \"0x...\";\n * const ownedNFTs = await contract.nft.query.owned.all(walletAddress);\n * ```\n * @public\n */\nexport class Erc721Enumerable implements DetectableFeature {\n  featureName = FEATURE_NFT_ENUMERABLE.name;\n  private contractWrapper: ContractWrapper<BaseERC721 & IERC721Enumerable>;\n  private erc721: Erc721;\n\n  constructor(\n    erc721: Erc721,\n    contractWrapper: ContractWrapper<BaseERC721 & IERC721Enumerable>,\n  ) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.nft.query.owned.all(address);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  public async all(walletAddress?: string): Promise<NFTMetadataOwner[]> {\n    const tokenIds = await this.tokenIds(walletAddress);\n    return await Promise.all(\n      tokenIds.map((tokenId) => this.erc721.get(tokenId.toString())),\n    );\n  }\n\n  /**\n   * Get all token ids of NFTs owned by a specific wallet.\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   */\n  public async tokenIds(walletAddress?: string): Promise<BigNumber[]> {\n    const address =\n      walletAddress || (await this.contractWrapper.getSignerAddress());\n\n    const balance = await this.contractWrapper.readContract.balanceOf(address);\n    const indices = Array.from(Array(balance.toNumber()).keys());\n    return await Promise.all(\n      indices.map((i) =>\n        this.contractWrapper.readContract.tokenOfOwnerByIndex(address, i),\n      ),\n    );\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { IMintableERC721, IMulticall } from \"contracts\";\nimport { NFTMetadataOrUri, NFTMetadataOwner } from \"../../schema\";\nimport { TransactionResultWithId } from \"../types\";\nimport { uploadOrExtractURIs } from \"../../common/nft\";\nimport { IStorage } from \"../interfaces\";\nimport { Erc721 } from \"./erc-721\";\nimport { TokensMintedEvent } from \"contracts/IMintableERC721\";\nimport { FEATURE_NFT_BATCH_MINTABLE } from \"../../constants/erc721-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\n\n/**\n * Mint Many ERC721 NFTs at once\n * @remarks NFT batch minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.mint.batch.to(walletAddress, [nftMetadata1, nftMetadata2, ...]);\n * ```\n * @public\n */\nexport class Erc721BatchMintable implements DetectableFeature {\n  featureName = FEATURE_NFT_BATCH_MINTABLE.name;\n  private contractWrapper: ContractWrapper<IMintableERC721 & IMulticall>;\n  private storage: IStorage;\n  private erc721: Erc721;\n\n  constructor(\n    erc721: Erc721,\n    contractWrapper: ContractWrapper<IMintableERC721 & IMulticall>,\n    storage: IStorage,\n  ) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Mint Many unique NFTs\n   *\n   * @remarks Mint many unique NFTs at once to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.mint.batch.to(walletAddress, metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  public async to(\n    to: string,\n    metadatas: NFTMetadataOrUri[],\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>[]> {\n    const uris = await uploadOrExtractURIs(metadatas, this.storage);\n    const encoded = uris.map((uri) =>\n      this.contractWrapper.readContract.interface.encodeFunctionData(\"mintTo\", [\n        to,\n        uri,\n      ]),\n    );\n    const receipt = await this.contractWrapper.multiCall(encoded);\n    const events = this.contractWrapper.parseLogs<TokensMintedEvent>(\n      \"TokensMinted\",\n      receipt.logs,\n    );\n    if (events.length === 0 || events.length < metadatas.length) {\n      throw new Error(\"TokenMinted event not found, minting failed\");\n    }\n    return events.map((e) => {\n      const id = e.args.tokenIdMinted;\n      return {\n        id,\n        receipt,\n        data: () => this.erc721.get(id),\n      };\n    });\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { IMintableERC721, IMulticall } from \"contracts\";\nimport { NFTMetadataOrUri, NFTMetadataOwner } from \"../../schema\";\nimport { TransactionResultWithId } from \"../types\";\nimport { uploadOrExtractURI } from \"../../common/nft\";\nimport { IStorage } from \"../interfaces\";\nimport { Erc721 } from \"./erc-721\";\nimport { TokensMintedEvent } from \"contracts/IMintableERC721\";\nimport { Erc721BatchMintable } from \"./erc-721-batch-mintable\";\nimport { detectContractFeature } from \"../../common\";\nimport { FEATURE_NFT_MINTABLE } from \"../../constants/erc721-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\n\n/**\n * Mint ERC721 NFTs\n * @remarks NFT minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.mint.to(walletAddress, nftMetadata);\n * ```\n * @public\n */\nexport class Erc721Mintable implements DetectableFeature {\n  featureName = FEATURE_NFT_MINTABLE.name;\n  private contractWrapper: ContractWrapper<IMintableERC721>;\n  private storage: IStorage;\n  private erc721: Erc721;\n\n  public batch: Erc721BatchMintable | undefined;\n\n  constructor(\n    erc721: Erc721,\n    contractWrapper: ContractWrapper<IMintableERC721>,\n    storage: IStorage,\n  ) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.batch = this.detectErc721BatchMintable();\n  }\n\n  /**\n   * Mint a unique NFT\n   *\n   * @remarks Mint a unique NFT to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.nft.mint.to(walletAddress, metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  public async to(\n    to: string,\n    metadata: NFTMetadataOrUri,\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>> {\n    const uri = await uploadOrExtractURI(metadata, this.storage);\n    const receipt = await this.contractWrapper.sendTransaction(\"mintTo\", [\n      to,\n      uri,\n    ]);\n    // TODO switch to Transfer event!\n    const event = this.contractWrapper.parseLogs<TokensMintedEvent>(\n      \"TokensMinted\",\n      receipt?.logs,\n    );\n    if (event.length === 0) {\n      throw new Error(\"TokenMinted event not found\");\n    }\n    const id = event[0].args.tokenIdMinted;\n    return {\n      id,\n      receipt,\n      data: () => this.erc721.get(id),\n    };\n  }\n\n  private detectErc721BatchMintable(): Erc721BatchMintable | undefined {\n    if (\n      detectContractFeature<IMintableERC721 & IMulticall>(\n        this.contractWrapper,\n        \"ERC721BatchMintable\",\n      )\n    ) {\n      return new Erc721BatchMintable(\n        this.erc721,\n        this.contractWrapper,\n        this.storage,\n      );\n    }\n    return undefined;\n  }\n}\n","import {\n  FilledSignaturePayload721,\n  MintRequest721,\n  PayloadToSign721,\n  PayloadWithUri721,\n  Signature721PayloadInput,\n  Signature721PayloadOutput,\n  SignedPayload721,\n} from \"../../schema/contracts/common/signature\";\nimport { TransactionResultWithId } from \"../types\";\nimport { normalizePriceValue, setErc20Allowance } from \"../../common/currency\";\nimport { BigNumber } from \"ethers\";\nimport invariant from \"tiny-invariant\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { ITokenERC721, TokenERC721 } from \"contracts\";\nimport { IStorage } from \"../interfaces\";\nimport { ContractRoles } from \"./contract-roles\";\nimport { NFTCollection } from \"../../contracts\";\nimport { uploadOrExtractURIs } from \"../../common/nft\";\nimport { TokensMintedWithSignatureEvent } from \"contracts/ITokenERC721\";\n\n/**\n * Enables generating dynamic ERC721 NFTs with rules and an associated signature, which can then be minted by anyone securely\n * @public\n */\n// TODO consolidate into a single class\nexport class Erc721SignatureMinting {\n  private contractWrapper: ContractWrapper<TokenERC721>;\n  private storage: IStorage;\n  private roles: ContractRoles<\n    TokenERC721,\n    typeof NFTCollection.contractRoles[number]\n  >;\n\n  constructor(\n    contractWrapper: ContractWrapper<TokenERC721>,\n    roles: ContractRoles<\n      TokenERC721,\n      typeof NFTCollection.contractRoles[number]\n    >,\n    storage: IStorage,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.roles = roles;\n  }\n\n  /**\n   * Mint a dynamically generated NFT\n   *\n   * @remarks Mint a dynamic NFT with a previously generated signature.\n   *\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   * @param signedPayload - the previously generated payload and signature with {@link Erc721SignatureMinting.generate}\n   */\n  public async mint(\n    signedPayload: SignedPayload721,\n  ): Promise<TransactionResultWithId> {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const overrides = await this.contractWrapper.getCallOverrides();\n    await setErc20Allowance(\n      this.contractWrapper,\n      BigNumber.from(message.price),\n      mintRequest.currencyAddress,\n      overrides,\n    );\n    const receipt = await this.contractWrapper.sendTransaction(\n      \"mintWithSignature\",\n      [message, signature],\n      overrides,\n    );\n    const t = this.contractWrapper.parseLogs<TokensMintedWithSignatureEvent>(\n      \"TokensMintedWithSignature\",\n      receipt.logs,\n    );\n    if (t.length === 0) {\n      throw new Error(\"No MintWithSignature event found\");\n    }\n    const id = t[0].args.tokenIdMinted;\n    return {\n      id,\n      receipt,\n    };\n  }\n\n  /**\n   * Mint any number of dynamically generated NFT at once\n   * @remarks Mint multiple dynamic NFTs in one transaction. Note that this is only possible for free mints (cannot batch mints with a price attached to it for security reasons)\n   * @param signedPayloads - the array of signed payloads to mint\n   */\n  public async mintBatch(\n    signedPayloads: SignedPayload721[],\n  ): Promise<TransactionResultWithId[]> {\n    const contractPayloads = await Promise.all(\n      signedPayloads.map(async (s) => {\n        const message = await this.mapPayloadToContractStruct(s.payload);\n        const signature = s.signature;\n        const price = s.payload.price;\n        if (BigNumber.from(price).gt(0)) {\n          throw new Error(\n            \"Can only batch free mints. For mints with a price, use regular mint()\",\n          );\n        }\n        return {\n          message,\n          signature,\n        };\n      }),\n    );\n    const encoded = contractPayloads.map((p) => {\n      return this.contractWrapper.readContract.interface.encodeFunctionData(\n        \"mintWithSignature\",\n        [p.message, p.signature],\n      );\n    });\n    const receipt = await this.contractWrapper.multiCall(encoded);\n    const events =\n      this.contractWrapper.parseLogs<TokensMintedWithSignatureEvent>(\n        \"TokensMintedWithSignature\",\n        receipt.logs,\n      );\n    if (events.length === 0) {\n      throw new Error(\"No MintWithSignature event found\");\n    }\n    return events.map((log) => ({\n      id: log.args.tokenIdMinted,\n      receipt,\n    }));\n  }\n\n  /**\n   * Verify that a payload is correctly signed\n   * @param signedPayload - the payload to verify\n   */\n  public async verify(signedPayload: SignedPayload721): Promise<boolean> {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const verification: [boolean, string] =\n      await this.contractWrapper.readContract.verify(message, signature);\n    return verification[0];\n  }\n\n  /**\n   * Generate a signature that can be used to mint a dynamic NFT\n   *\n   * @remarks Takes in an NFT and some information about how it can be minted, uploads the metadata and signs it with your private key. The generated signature can then be used to mint an NFT using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   metadata: nftMetadata, // The NFT to mint\n   *   to: {{wallet_address}}, // Who will receive the NFT (or AddressZero for anyone)\n   *   price: 0.5, // the price to pay for minting\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now,\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = contract.signature.generate(payload);\n   * // now anyone can use these to mint the NFT using `contract.signature.mint(signedPayload)`\n   * ```\n   * @param mintRequest - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   */\n  public async generate(\n    mintRequest: PayloadToSign721,\n  ): Promise<SignedPayload721> {\n    return (await this.generateBatch([mintRequest]))[0];\n  }\n\n  /**\n   * Genrate a batch of signatures that can be used to mint many dynamic NFTs.\n   *\n   * @remarks See {@link Erc721SignatureMinting.generate}\n   *\n   * @param payloadsToSign - the payloads to sign\n   * @returns an array of payloads and signatures\n   */\n  public async generateBatch(\n    payloadsToSign: PayloadToSign721[],\n  ): Promise<SignedPayload721[]> {\n    await this.roles.verify(\n      [\"minter\"],\n      await this.contractWrapper.getSignerAddress(),\n    );\n\n    const parsedRequests: FilledSignaturePayload721[] = payloadsToSign.map(\n      (m) => Signature721PayloadInput.parse(m),\n    );\n\n    const metadatas = parsedRequests.map((r) => r.metadata);\n    const uris = await uploadOrExtractURIs(metadatas, this.storage);\n\n    const chainId = await this.contractWrapper.getChainID();\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"No signer available\");\n\n    return await Promise.all(\n      parsedRequests.map(async (m, i) => {\n        const uri = uris[i];\n        const finalPayload = Signature721PayloadOutput.parse({\n          ...m,\n          uri,\n        });\n        const signature = await this.contractWrapper.signTypedData(\n          signer,\n          {\n            name: \"TokenERC721\",\n            version: \"1\",\n            chainId,\n            verifyingContract: this.contractWrapper.readContract.address,\n          },\n          { MintRequest: MintRequest721 },\n          await this.mapPayloadToContractStruct(finalPayload),\n        );\n        return {\n          payload: finalPayload,\n          signature: signature.toString(),\n        };\n      }),\n    );\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  private async mapPayloadToContractStruct(\n    mintRequest: PayloadWithUri721,\n  ): Promise<ITokenERC721.MintRequestStructOutput> {\n    const normalizedPricePerToken = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      mintRequest.price,\n      mintRequest.currencyAddress,\n    );\n    return {\n      to: mintRequest.to,\n      price: normalizedPricePerToken,\n      uri: mintRequest.uri,\n      currency: mintRequest.currencyAddress,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      uid: mintRequest.uid,\n      royaltyRecipient: mintRequest.royaltyRecipient,\n      royaltyBps: mintRequest.royaltyBps,\n      primarySaleRecipient: mintRequest.primarySaleRecipient,\n    } as ITokenERC721.MintRequestStructOutput;\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport {\n  DropERC1155,\n  IERC1155Enumerable,\n  IMintableERC1155,\n  TokenERC1155,\n} from \"contracts\";\nimport { BigNumber, BigNumberish, BytesLike } from \"ethers\";\nimport { NFTMetadata } from \"../../schema/tokens/common\";\nimport { IStorage } from \"../interfaces\";\nimport { NetworkOrSignerOrProvider, TransactionResult } from \"../types\";\nimport { UpdateableNetwork } from \"../interfaces/contract\";\nimport { SDKOptions, SDKOptionsSchema } from \"../../schema/sdk-options\";\nimport {\n  EditionMetadata,\n  EditionMetadataOutputSchema,\n} from \"../../schema/tokens/edition\";\nimport { fetchTokenMetadata } from \"../../common/nft\";\nimport { detectContractFeature, NotFoundError } from \"../../common\";\nimport { AirdropInput } from \"../../types/airdrop/airdrop\";\nimport { AirdropInputSchema } from \"../../schema/contracts/common/airdrop\";\nimport { BaseERC1155 } from \"../../types/eips\";\nimport { Erc1155Enumerable } from \"./erc-1155-enumerable\";\nimport { Erc1155Mintable } from \"./erc-1155-mintable\";\nimport { FEATURE_EDITION } from \"../../constants/erc1155-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\n\n/**\n * Standard ERC1155 NFT functions\n * @remarks Basic functionality for a ERC1155 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.transfer(walletAddress, tokenId, quantity);\n * ```\n * @public\n */\nexport class Erc1155<\n  T extends DropERC1155 | TokenERC1155 | BaseERC1155 = BaseERC1155,\n> implements UpdateableNetwork, DetectableFeature\n{\n  featureName = FEATURE_EDITION.name;\n  protected contractWrapper: ContractWrapper<T>;\n  protected storage: IStorage;\n  protected options: SDKOptions;\n\n  public query: Erc1155Enumerable | undefined;\n  public mint: Erc1155Mintable | undefined;\n\n  constructor(\n    contractWrapper: ContractWrapper<T>,\n    storage: IStorage,\n    options: SDKOptions = {},\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    try {\n      this.options = SDKOptionsSchema.parse(options);\n    } catch (optionParseError) {\n      console.error(\n        \"invalid contract options object passed, falling back to default options\",\n        optionParseError,\n      );\n      this.options = SDKOptionsSchema.parse({});\n    }\n    this.query = this.detectErc1155Enumerable();\n    this.mint = this.detectErc1155Mintable();\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network: NetworkOrSignerOrProvider): void {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a single NFT Metadata\n   *\n   * @example\n   * ```javascript\n   * const nft = await contract.get(\"0\");\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  public async get(tokenId: BigNumberish): Promise<EditionMetadata> {\n    const [supply, metadata] = await Promise.all([\n      this.contractWrapper.readContract\n        .totalSupply(tokenId)\n        .catch(() => BigNumber.from(0)),\n      this.getTokenMetadata(tokenId),\n    ]);\n    return EditionMetadataOutputSchema.parse({\n      supply,\n      metadata,\n    });\n  }\n\n  /**\n   * Returns the total supply of a specific token\n   * @param tokenId - The token ID to get the total supply of\n   * @returns the total supply\n   */\n  public async totalSupply(tokenId: BigNumberish): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.totalSupply(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0; // Id of the NFT to check\n   * const balance = await contract.balanceOf(walletAddress, tokenId);\n   * ```\n   */\n  public async balanceOf(\n    address: string,\n    tokenId: BigNumberish,\n  ): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.balanceOf(address, tokenId);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  public async balance(tokenId: BigNumberish): Promise<BigNumber> {\n    return await this.balanceOf(\n      await this.contractWrapper.getSignerAddress(),\n      tokenId,\n    );\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.contractWrapper.readContract.isApprovedForAll(\n      address,\n      operator,\n    );\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Transfer a single NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   * const tokenId = \"0\"; // The token ID of the NFT you want to send\n   * const amount = 3; // How many copies of the NFTs to transfer\n   * await contract.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    tokenId: BigNumberish,\n    amount: BigNumberish,\n    data: BytesLike = [0],\n  ): Promise<TransactionResult> {\n    const from = await this.contractWrapper.getSignerAddress();\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"safeTransferFrom\", [\n        from,\n        to,\n        tokenId,\n        amount,\n        data,\n      ]),\n    };\n  }\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  public async setApprovalForAll(\n    operator: string,\n    approved: boolean,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"setApprovalForAll\", [\n        operator,\n        approved,\n      ]),\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Airdrop multiple NFTs\n   *\n   * @remarks Airdrop one or multiple NFTs to the provided wallet addresses.\n   *\n   * @example\n   * ```javascript\n   * // Array of objects of addresses and quantities to airdrop NFTs to\n   * const addresses = [\n   *  {\n   *    address: \"0x...\",\n   *    quantity: 2,\n   *  },\n   *  {\n   *   address: \"0x...\",\n   *    quantity: 3,\n   *  },\n   * ];\n   * const tokenId = \"0\";\n   * await contract.airdrop(addresses, tokenId);\n   *\n   * // You can also pass an array of addresses, it will airdrop 1 NFT per address\n   * const addresses = [\n   *  \"0x...\", \"0x...\", \"0x...\",\n   * ]\n   * const tokenId = \"0\";\n   * await contract.airdrop(addresses, tokenId);\n   * ```\n   */\n  public async airdrop(\n    tokenId: BigNumberish,\n    addresses: AirdropInput,\n    data: BytesLike = [0],\n  ): Promise<TransactionResult> {\n    const from = await this.contractWrapper.getSignerAddress();\n\n    const balanceOf = await this.balanceOf(from, tokenId);\n\n    const input = AirdropInputSchema.parse(addresses);\n\n    const totalToAirdrop = input.reduce((prev, curr) => {\n      return prev + Number(curr?.quantity || 1);\n    }, 0);\n\n    if (balanceOf.toNumber() < totalToAirdrop) {\n      throw new Error(\n        `The caller owns ${balanceOf.toNumber()} NFTs, but wants to airdrop ${totalToAirdrop} NFTs.`,\n      );\n    }\n\n    const encoded = input.map(({ address: to, quantity }) => {\n      return this.contractWrapper.readContract.interface.encodeFunctionData(\n        \"safeTransferFrom\",\n        [from, to, tokenId, quantity, data],\n      );\n    });\n\n    return {\n      receipt: await this.contractWrapper.multiCall(encoded),\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * @internal\n   * @param tokenId - the token Id to fetch\n   */\n  public async getTokenMetadata(tokenId: BigNumberish): Promise<NFTMetadata> {\n    const tokenUri = await this.contractWrapper.readContract.uri(tokenId);\n    if (!tokenUri) {\n      throw new NotFoundError();\n    }\n    return fetchTokenMetadata(tokenId, tokenUri, this.storage);\n  }\n\n  private detectErc1155Enumerable(): Erc1155Enumerable | undefined {\n    if (\n      detectContractFeature<BaseERC1155 & IERC1155Enumerable>(\n        this.contractWrapper,\n        \"ERC1155Enumerable\",\n      )\n    ) {\n      return new Erc1155Enumerable(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n\n  private detectErc1155Mintable(): Erc1155Mintable | undefined {\n    if (\n      detectContractFeature<IMintableERC1155>(\n        this.contractWrapper,\n        \"ERC1155Mintable\",\n      )\n    ) {\n      return new Erc1155Mintable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n}\n","import { z } from \"zod\";\nimport { AddressSchema, PriceSchema } from \"../../shared\";\n\n/**\n * @internal\n */\nexport const AirdropAddressInput = z.object({\n  address: AddressSchema,\n  quantity: PriceSchema.default(1),\n});\n\n/**\n * @internal\n */\nexport const AirdropInputSchema = z.union([\n  z.array(z.string()).transform((strings) =>\n    strings.map((address) =>\n      AirdropAddressInput.parse({\n        address,\n      }),\n    ),\n  ),\n  z.array(AirdropAddressInput),\n]);\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { IERC1155Enumerable } from \"contracts\";\nimport { BigNumber } from \"ethers\";\nimport { DEFAULT_QUERY_ALL_COUNT, QueryAllParams } from \"../../types\";\nimport { EditionMetadata, EditionMetadataOwner } from \"../../schema\";\nimport { Erc1155 } from \"./erc-1155\";\nimport { BaseERC1155 } from \"../../types/eips\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { FEATURE_EDITION_ENUMERABLE } from \"../../constants/erc1155-features\";\n\n/**\n * List ERC1155 NFTs\n * @remarks Easily list all the NFTs in a ERC1155 contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const nfts = await contract.edition.query.all();\n * ```\n * @public\n */\nexport class Erc1155Enumerable implements DetectableFeature {\n  featureName = FEATURE_EDITION_ENUMERABLE.name;\n  private contractWrapper: ContractWrapper<BaseERC1155 & IERC1155Enumerable>;\n  private erc1155: Erc1155;\n\n  constructor(\n    erc1155: Erc1155,\n    contractWrapper: ContractWrapper<BaseERC1155 & IERC1155Enumerable>,\n  ) {\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get All NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.edition.query.all();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  public async all(queryParams?: QueryAllParams): Promise<EditionMetadata[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = Math.min(\n      (await this.getTotalCount()).toNumber(),\n      start + count,\n    );\n    return await Promise.all(\n      [...Array(maxId - start).keys()].map((i) =>\n        this.erc1155.get((start + i).toString()),\n      ),\n    );\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  public async getTotalCount(): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.nextTokenIdToMint();\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.edition.query.owned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  public async owned(walletAddress?: string): Promise<EditionMetadataOwner[]> {\n    const address =\n      walletAddress || (await this.contractWrapper.getSignerAddress());\n    const maxId = await this.contractWrapper.readContract.nextTokenIdToMint();\n    const balances = await this.contractWrapper.readContract.balanceOfBatch(\n      Array(maxId.toNumber()).fill(address),\n      Array.from(Array(maxId.toNumber()).keys()),\n    );\n\n    const ownedBalances = balances\n      .map((b, i) => {\n        return {\n          tokenId: i,\n          balance: b,\n        };\n      })\n      .filter((b) => b.balance.gt(0));\n    return await Promise.all(\n      ownedBalances.map(async (b) => {\n        const editionMetadata = await this.erc1155.get(b.tokenId.toString());\n        return {\n          ...editionMetadata,\n          owner: address,\n          quantityOwned: b.balance,\n        };\n      }),\n    );\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { IMintableERC1155, IMulticall } from \"contracts\";\nimport { TransactionResultWithId } from \"../types\";\nimport { Erc1155 } from \"./erc-1155\";\nimport { EditionMetadata, EditionMetadataOrUri } from \"../../schema\";\nimport { uploadOrExtractURIs } from \"../../common/nft\";\nimport { ethers } from \"ethers\";\nimport { TokensMintedEvent } from \"contracts/TokenERC1155\";\nimport { IStorage } from \"../interfaces\";\nimport { FEATURE_EDITION_BATCH_MINTABLE } from \"../../constants/erc1155-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\n\n/**\n * Mint Many ERC1155 NFTs at once\n * @remarks NFT batch minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.mint.batch.to(walletAddress, [nftMetadataWithSupply1, nftMetadataWithSupply2, ...]);\n * ```\n * @public\n */\nexport class Erc1155BatchMintable implements DetectableFeature {\n  featureName = FEATURE_EDITION_BATCH_MINTABLE.name;\n  private contractWrapper: ContractWrapper<IMintableERC1155 & IMulticall>;\n  private erc1155: Erc1155;\n  private storage: IStorage;\n\n  constructor(\n    erc1155: Erc1155,\n    contractWrapper: ContractWrapper<IMintableERC1155 & IMulticall>,\n    storage: IStorage,\n  ) {\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Mint Many NFTs with limited supplies\n   *\n   * @remarks Mint many different NFTs with limited supplies to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata and supplies of your NFTs\n   * const metadataWithSupply = [{\n   *   supply: 50, // The number of this NFT you want to mint\n   *   metadata: {\n   *     name: \"Cool NFT #1\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }, {\n   *   supply: 100,\n   *   metadata: {\n   *     name: \"Cool NFT #2\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }];\n   *\n   * const tx = await contract.edition.mint.batch.to(toAddress, metadataWithSupply);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  public async to(\n    to: string,\n    metadataWithSupply: EditionMetadataOrUri[],\n  ): Promise<TransactionResultWithId<EditionMetadata>[]> {\n    const metadatas = metadataWithSupply.map((a) => a.metadata);\n    const supplies = metadataWithSupply.map((a) => a.supply);\n    const uris = await uploadOrExtractURIs(metadatas, this.storage);\n    const encoded = uris.map((uri, index) =>\n      this.contractWrapper.readContract.interface.encodeFunctionData(\"mintTo\", [\n        to,\n        ethers.constants.MaxUint256,\n        uri,\n        supplies[index],\n      ]),\n    );\n    const receipt = await this.contractWrapper.multiCall(encoded);\n    const events = this.contractWrapper.parseLogs<TokensMintedEvent>(\n      \"TokensMinted\",\n      receipt.logs,\n    );\n    if (events.length === 0 || events.length < metadatas.length) {\n      throw new Error(\"TokenMinted event not found, minting failed\");\n    }\n    return events.map((e) => {\n      const id = e.args.tokenIdMinted;\n      return {\n        id,\n        receipt,\n        data: () => this.erc1155.get(id),\n      };\n    });\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { IMintableERC1155, IMulticall } from \"contracts\";\nimport { detectContractFeature } from \"../../common\";\nimport { Erc1155 } from \"./erc-1155\";\nimport { Erc1155BatchMintable } from \"./erc-1155-batch-mintable\";\nimport { EditionMetadata, EditionMetadataOrUri } from \"../../schema\";\nimport { TransactionResultWithId } from \"../types\";\nimport { uploadOrExtractURI } from \"../../common/nft\";\nimport { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport { TokensMintedEvent } from \"contracts/TokenERC1155\";\nimport { IStorage } from \"../interfaces\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { FEATURE_EDITION_MINTABLE } from \"../../constants/erc1155-features\";\n\n/**\n * Mint ERC1155 NFTs\n * @remarks NFT minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.mint.to(walletAddress, nftMetadata);\n * ```\n * @public\n */\nexport class Erc1155Mintable implements DetectableFeature {\n  featureName = FEATURE_EDITION_MINTABLE.name;\n  private contractWrapper: ContractWrapper<IMintableERC1155>;\n  private erc1155: Erc1155;\n  private storage: IStorage;\n\n  /**\n   * Batch mint Tokens to many addresses\n   */\n  public batch: Erc1155BatchMintable | undefined;\n\n  constructor(\n    erc1155: Erc1155,\n    contractWrapper: ContractWrapper<IMintableERC1155>,\n    storage: IStorage,\n  ) {\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.batch = this.detectErc1155BatchMintable();\n  }\n\n  /**\n   * Mint an NFT with a limited supply\n   *\n   * @remarks Mint an NFT with a limited supply to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * const metadataWithSupply = {\n   *   metadata,\n   *   supply: 1000, // The number of this NFT you want to mint\n   * }\n   *\n   * const tx = await contract.edition.mint.to(toAddress, metadataWithSupply);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  public async to(\n    to: string,\n    metadataWithSupply: EditionMetadataOrUri,\n  ): Promise<TransactionResultWithId<EditionMetadata>> {\n    const uri = await uploadOrExtractURI(\n      metadataWithSupply.metadata,\n      this.storage,\n    );\n    const receipt = await this.contractWrapper.sendTransaction(\"mintTo\", [\n      to,\n      ethers.constants.MaxUint256,\n      uri,\n      metadataWithSupply.supply,\n    ]);\n    const event = this.contractWrapper.parseLogs<TokensMintedEvent>(\n      \"TokensMinted\",\n      receipt?.logs,\n    );\n    if (event.length === 0) {\n      throw new Error(\"TokenMinted event not found\");\n    }\n    const id = event[0].args.tokenIdMinted;\n    return {\n      id,\n      receipt,\n      data: () => this.erc1155.get(id.toString()),\n    };\n  }\n\n  /**\n   * Increase the supply of an existing NFT and mint it to a given wallet address\n   *\n   * @param to - the address to mint to\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   */\n  public async additionalSupplyTo(\n    to: string,\n    tokenId: BigNumberish,\n    additionalSupply: BigNumberish,\n  ): Promise<TransactionResultWithId<EditionMetadata>> {\n    const metadata = await this.erc1155.getTokenMetadata(tokenId);\n    const receipt = await this.contractWrapper.sendTransaction(\"mintTo\", [\n      to,\n      tokenId,\n      metadata.uri,\n      additionalSupply,\n    ]);\n    return {\n      id: BigNumber.from(tokenId),\n      receipt,\n      data: () => this.erc1155.get(tokenId),\n    };\n  }\n\n  private detectErc1155BatchMintable() {\n    if (\n      detectContractFeature<IMintableERC1155 & IMulticall>(\n        this.contractWrapper,\n        \"ERC1155BatchMintable\",\n      )\n    ) {\n      return new Erc1155BatchMintable(\n        this.erc1155,\n        this.contractWrapper,\n        this.storage,\n      );\n    }\n    return undefined;\n  }\n}\n","import {\n  FilledSignaturePayload1155,\n  MintRequest1155,\n  PayloadToSign1155,\n  PayloadWithUri1155,\n  Signature1155PayloadInput,\n  Signature1155PayloadOutput,\n  SignedPayload1155,\n} from \"../../schema/contracts/common/signature\";\nimport { TransactionResultWithId } from \"../types\";\nimport { normalizePriceValue, setErc20Allowance } from \"../../common/currency\";\nimport invariant from \"tiny-invariant\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { ITokenERC1155, TokenERC1155 } from \"contracts\";\nimport { IStorage } from \"../interfaces\";\nimport { ContractRoles } from \"./contract-roles\";\nimport { NFTCollection } from \"../../contracts\";\nimport { BigNumber } from \"ethers\";\nimport { uploadOrExtractURIs } from \"../../common/nft\";\nimport { TokensMintedWithSignatureEvent } from \"contracts/ITokenERC1155\";\n\n/**\n * Enables generating dynamic ERC1155 NFTs with rules and an associated signature, which can then be minted by anyone securely\n * @public\n */\nexport class Erc1155SignatureMinting {\n  private contractWrapper: ContractWrapper<TokenERC1155>;\n  private storage: IStorage;\n  private roles: ContractRoles<\n    TokenERC1155,\n    typeof NFTCollection.contractRoles[number]\n  >;\n\n  constructor(\n    contractWrapper: ContractWrapper<TokenERC1155>,\n    roles: ContractRoles<\n      TokenERC1155,\n      typeof NFTCollection.contractRoles[number]\n    >,\n    storage: IStorage,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.roles = roles;\n  }\n\n  /**\n   * Mint a dynamically generated NFT\n   *\n   * @remarks Mint a dynamic NFT with a previously generated signature.\n   *\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   * @param signedPayload - the previously generated payload and signature with {@link Erc721SignatureMinting.generate}\n   */\n  public async mint(\n    signedPayload: SignedPayload1155,\n  ): Promise<TransactionResultWithId> {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const overrides = await this.contractWrapper.getCallOverrides();\n    await setErc20Allowance(\n      this.contractWrapper,\n      message.pricePerToken.mul(message.quantity),\n      mintRequest.currencyAddress,\n      overrides,\n    );\n    const receipt = await this.contractWrapper.sendTransaction(\n      \"mintWithSignature\",\n      [message, signature],\n      overrides,\n    );\n    const t = this.contractWrapper.parseLogs<TokensMintedWithSignatureEvent>(\n      \"TokensMintedWithSignature\",\n      receipt.logs,\n    );\n    if (t.length === 0) {\n      throw new Error(\"No MintWithSignature event found\");\n    }\n    const id = t[0].args.tokenIdMinted;\n    return {\n      id,\n      receipt,\n    };\n  }\n\n  /**\n   * Mint any number of dynamically generated NFT at once\n   * @remarks Mint multiple dynamic NFTs in one transaction. Note that this is only possible for free mints (cannot batch mints with a price attached to it for security reasons)\n   * @param signedPayloads - the array of signed payloads to mint\n   */\n  public async mintBatch(\n    signedPayloads: SignedPayload1155[],\n  ): Promise<TransactionResultWithId[]> {\n    const contractPayloads = await Promise.all(\n      signedPayloads.map(async (s) => {\n        const message = await this.mapPayloadToContractStruct(s.payload);\n        const signature = s.signature;\n        const price = s.payload.price;\n        if (BigNumber.from(price).gt(0)) {\n          throw new Error(\n            \"Can only batch free mints. For mints with a price, use regular mint()\",\n          );\n        }\n        return {\n          message,\n          signature,\n        };\n      }),\n    );\n    const encoded = contractPayloads.map((p) => {\n      return this.contractWrapper.readContract.interface.encodeFunctionData(\n        \"mintWithSignature\",\n        [p.message, p.signature],\n      );\n    });\n    const receipt = await this.contractWrapper.multiCall(encoded);\n    const events =\n      this.contractWrapper.parseLogs<TokensMintedWithSignatureEvent>(\n        \"TokensMintedWithSignature\",\n        receipt.logs,\n      );\n    if (events.length === 0) {\n      throw new Error(\"No MintWithSignature event found\");\n    }\n    return events.map((log) => ({\n      id: log.args.tokenIdMinted,\n      receipt,\n    }));\n  }\n\n  /**\n   * Verify that a payload is correctly signed\n   * @param signedPayload - the payload to verify\n   */\n  public async verify(signedPayload: SignedPayload1155): Promise<boolean> {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const verification: [boolean, string] =\n      await this.contractWrapper.readContract.verify(message, signature);\n    return verification[0];\n  }\n\n  /**\n   * Generate a signature that can be used to mint a dynamic NFT\n   *\n   * @remarks Takes in an NFT and some information about how it can be minted, uploads the metadata and signs it with your private key. The generated signature can then be used to mint an NFT using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   metadata: nftMetadata, // The NFT to mint\n   *   to: {{wallet_address}}, // Who will receive the NFT (or AddressZero for anyone)\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = contract.signature.generate(payload);\n   * // now anyone can use these to mint the NFT using `contract.signature.mint(signedPayload)`\n   * ```\n   * @param mintRequest - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   */\n  public async generate(\n    mintRequest: PayloadToSign1155,\n  ): Promise<SignedPayload1155> {\n    return (await this.generateBatch([mintRequest]))[0];\n  }\n\n  /**\n   * Genrate a batch of signatures that can be used to mint many dynamic NFTs.\n   *\n   * @remarks See {@link Erc721SignatureMinting.generate}\n   *\n   * @param payloadsToSign - the payloads to sign\n   * @returns an array of payloads and signatures\n   */\n  public async generateBatch(\n    payloadsToSign: PayloadToSign1155[],\n  ): Promise<SignedPayload1155[]> {\n    await this.roles.verify(\n      [\"minter\"],\n      await this.contractWrapper.getSignerAddress(),\n    );\n\n    const parsedRequests: FilledSignaturePayload1155[] = payloadsToSign.map(\n      (m) => Signature1155PayloadInput.parse(m),\n    );\n\n    const metadatas = parsedRequests.map((r) => r.metadata);\n    const uris = await uploadOrExtractURIs(metadatas, this.storage);\n\n    const chainId = await this.contractWrapper.getChainID();\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"No signer available\");\n\n    return await Promise.all(\n      parsedRequests.map(async (m, i) => {\n        const uri = uris[i];\n        const finalPayload = Signature1155PayloadOutput.parse({\n          ...m,\n          uri,\n        });\n        const signature = await this.contractWrapper.signTypedData(\n          signer,\n          {\n            name: \"TokenERC1155\",\n            version: \"1\",\n            chainId,\n            verifyingContract: this.contractWrapper.readContract.address,\n          },\n          { MintRequest: MintRequest1155 }, // TYPEHASH\n          await this.mapPayloadToContractStruct(finalPayload),\n        );\n        return {\n          payload: finalPayload,\n          signature: signature.toString(),\n        };\n      }),\n    );\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  private async mapPayloadToContractStruct(\n    mintRequest: PayloadWithUri1155,\n  ): Promise<ITokenERC1155.MintRequestStructOutput> {\n    const normalizedPricePerToken = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      mintRequest.price,\n      mintRequest.currencyAddress,\n    );\n    return {\n      to: mintRequest.to,\n      tokenId: mintRequest.tokenId,\n      uri: mintRequest.uri,\n      quantity: mintRequest.quantity,\n      pricePerToken: normalizedPricePerToken,\n      currency: mintRequest.currencyAddress,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      uid: mintRequest.uid,\n      royaltyRecipient: mintRequest.royaltyRecipient,\n      royaltyBps: mintRequest.royaltyBps,\n      primarySaleRecipient: mintRequest.primarySaleRecipient,\n    } as ITokenERC1155.MintRequestStructOutput;\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport {\n  IERC1155,\n  IERC165,\n  IERC721,\n  IMarketplace,\n  Marketplace,\n} from \"contracts\";\nimport {\n  BigNumber,\n  BigNumberish,\n  Contract,\n  ethers,\n  constants,\n  utils,\n} from \"ethers\";\nimport {\n  DirectListing,\n  NewDirectListing,\n  Offer,\n} from \"../../types/marketplace\";\nimport { ListingNotFoundError, WrongListingTypeError } from \"../../common\";\nimport { ListingType } from \"../../enums\";\nimport { TransactionResult, TransactionResultWithId } from \"../types\";\nimport {\n  fetchCurrencyValue,\n  isNativeToken,\n  normalizePriceValue,\n  setErc20Allowance,\n} from \"../../common/currency\";\nimport { Price } from \"../../types/currency\";\nimport { fetchTokenMetadataForContract } from \"../../common/nft\";\nimport {\n  InterfaceId_IERC1155,\n  InterfaceId_IERC721,\n} from \"../../constants/contract\";\nimport {\n  handleTokenApproval,\n  isTokenApprovedForMarketplace,\n  mapOffer,\n  validateNewListingParam,\n} from \"../../common/marketplace\";\nimport { IStorage } from \"../interfaces\";\nimport invariant from \"tiny-invariant\";\nimport { ListingAddedEvent } from \"contracts/Marketplace\";\nimport ERC1155Abi from \"../../../abis/IERC1155.json\";\nimport ERC721Abi from \"../../../abis/IERC721.json\";\nimport ERC165Abi from \"../../../abis/IERC165.json\";\n\n/**\n * Handles direct listings\n * @public\n */\nexport class MarketplaceDirect {\n  private contractWrapper: ContractWrapper<Marketplace>;\n  private storage: IStorage;\n\n  constructor(\n    contractWrapper: ContractWrapper<Marketplace>,\n    storage: IStorage,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a direct listing by id\n   *\n   * @param listingId - the listing id\n   * @returns the Direct listing object\n   */\n  public async getListing(listingId: BigNumberish): Promise<DirectListing> {\n    const listing = await this.contractWrapper.readContract.listings(listingId);\n\n    if (listing.assetContract === constants.AddressZero) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n\n    if (listing.listingType !== ListingType.Direct) {\n      throw new WrongListingTypeError(\n        this.getAddress(),\n        listingId.toString(),\n        \"Auction\",\n        \"Direct\",\n      );\n    }\n\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Get the active offer on a listing\n   * @param listingId - the listing id\n   * @param address - the address that made the offer\n   */\n  public async getActiveOffer(\n    listingId: BigNumberish,\n    address: string,\n  ): Promise<Offer | undefined> {\n    await this.validateListing(BigNumber.from(listingId));\n    invariant(utils.isAddress(address), \"Address must be a valid address\");\n    const offers = await this.contractWrapper.readContract.offers(\n      listingId,\n      address,\n    );\n    if (offers.offeror === constants.AddressZero) {\n      return undefined;\n    }\n    return await mapOffer(\n      this.contractWrapper.getProvider(),\n      BigNumber.from(listingId),\n      offers,\n    );\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Direct Listing\n   *\n   * @remarks Create a new listing on the marketplace where people can buy an asset directly.\n   *\n   * @example\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(),\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much the asset will be sold for\n   *   buyoutPricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.direct.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   */\n  public async createListing(\n    listing: NewDirectListing,\n  ): Promise<TransactionResultWithId> {\n    validateNewListingParam(listing);\n\n    await handleTokenApproval(\n      this.contractWrapper.getSignerOrProvider(),\n      this.getAddress(),\n      listing.assetContractAddress,\n      listing.tokenId,\n      await this.contractWrapper.getSignerAddress(),\n    );\n\n    const normalizedPricePerToken = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      listing.buyoutPricePerToken,\n      listing.currencyContractAddress,\n    );\n\n    let listingStartTime = Math.floor(listing.startTimestamp.getTime() / 1000);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (listingStartTime < blockTime) {\n      listingStartTime = blockTime;\n    }\n\n    const receipt = await this.contractWrapper.sendTransaction(\n      \"createListing\",\n      [\n        {\n          assetContract: listing.assetContractAddress,\n          tokenId: listing.tokenId,\n          buyoutPricePerToken: normalizedPricePerToken,\n          currencyToAccept: listing.currencyContractAddress,\n          listingType: ListingType.Direct,\n          quantityToList: listing.quantity,\n          reservePricePerToken: normalizedPricePerToken,\n          secondsUntilEndTime: listing.listingDurationInSeconds,\n          startTime: BigNumber.from(listingStartTime),\n        } as IMarketplace.ListingParametersStruct,\n      ],\n      {\n        // Higher gas limit for create listing\n        gasLimit: 500000,\n      },\n    );\n\n    const event = this.contractWrapper.parseLogs<ListingAddedEvent>(\n      \"ListingAdded\",\n      receipt?.logs,\n    );\n    return {\n      id: event[0].args.listingId,\n      receipt,\n    };\n  }\n\n  /**\n   * Make an offer for a Direct Listing\n   *\n   */\n  public async makeOffer(\n    listingId: BigNumberish,\n    quantityDesired: BigNumberish,\n    currencyContractAddress: string,\n    pricePerToken: Price,\n    expirationDate?: Date,\n  ): Promise<TransactionResult> {\n    if (isNativeToken(currencyContractAddress)) {\n      throw new Error(\n        \"You must use the wrapped native token address when making an offer with a native token\",\n      );\n    }\n\n    const normalizedPrice = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      pricePerToken,\n      currencyContractAddress,\n    );\n\n    try {\n      await this.getListing(listingId);\n    } catch (err) {\n      console.error(\"Failed to get listing, err =\", err);\n      throw new Error(`Error getting the listing with id ${listingId}`);\n    }\n\n    const quantity = BigNumber.from(quantityDesired);\n    const value = BigNumber.from(normalizedPrice).mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(\n      this.contractWrapper,\n      value,\n      currencyContractAddress,\n      overrides,\n    );\n\n    let expirationTimestamp = ethers.constants.MaxUint256;\n    if (expirationDate) {\n      expirationTimestamp = BigNumber.from(\n        Math.floor(expirationDate.getTime() / 1000),\n      );\n    }\n\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"offer\",\n        [\n          listingId,\n          quantityDesired,\n          currencyContractAddress,\n          normalizedPrice,\n          expirationTimestamp,\n        ],\n        overrides,\n      ),\n    };\n  }\n\n  public async acceptOffer(\n    listingId: BigNumberish,\n    addressOfOfferor: string,\n  ): Promise<TransactionResult> {\n    /**\n     * TODO:\n     * - Provide better error handling if offer is too low.\n     */\n    await this.validateListing(BigNumber.from(listingId));\n    const offer = await this.contractWrapper.readContract.offers(\n      listingId,\n      addressOfOfferor,\n    );\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"acceptOffer\", [\n        listingId,\n        addressOfOfferor,\n        offer.currency,\n        offer.pricePerToken,\n      ]),\n    };\n  }\n\n  /**\n   * Buy a Listing\n   *\n   * @remarks Buy a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.direct.buyoutListing(listingId, quantityDesired);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param quantityDesired - the quantity to buy\n   * @param receiver - optional receiver of the bought listing if different from the connected wallet\n   */\n  public async buyoutListing(\n    listingId: BigNumberish,\n    quantityDesired: BigNumberish,\n    receiver?: string,\n  ): Promise<TransactionResult> {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const valid = await this.isStillValidListing(listing, quantityDesired);\n    if (!valid) {\n      throw new Error(\n        \"The asset on this listing has been moved from the lister's wallet, this listing is now invalid\",\n      );\n    }\n    const buyFor = receiver\n      ? receiver\n      : await this.contractWrapper.getSignerAddress();\n    const quantity = BigNumber.from(quantityDesired);\n    const value = BigNumber.from(listing.buyoutPrice).mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(\n      this.contractWrapper,\n      value,\n      listing.currencyContractAddress,\n      overrides,\n    );\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"buy\",\n        [listingId, buyFor, quantity, listing.currencyContractAddress, value],\n        overrides,\n      ),\n    };\n  }\n\n  /**\n   * Update a Direct listing with new metadata.\n   *\n   * Note: cannot update a listing with a new quantity of 0. Use `cancelDirectListing` to remove a listing instead.\n   *\n   * @param listing - the new listing information\n   */\n  public async updateListing(\n    listing: DirectListing,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"updateListing\", [\n        listing.id,\n        listing.quantity,\n        listing.buyoutPrice, // reserve price, doesn't matter for direct listing\n        listing.buyoutPrice,\n        listing.currencyContractAddress,\n        listing.startTimeInSeconds,\n        listing.secondsUntilEnd,\n      ]),\n    };\n  }\n\n  /**\n   * Cancel Direct Listing\n   *\n   * @remarks Cancel a direct listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to cancel\n   * const listingId = \"0\";\n   *\n   * await contract.direct.cancelListing(listingId);\n   * ```\n   */\n  public async cancelListing(\n    listingId: BigNumberish,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"cancelDirectListing\",\n        [listingId],\n      ),\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  private async validateListing(listingId: BigNumber): Promise<DirectListing> {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the direct listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  public async mapListing(\n    listing: IMarketplace.ListingStruct,\n  ): Promise<DirectListing> {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: BigNumber.from(listing.buyoutPricePerToken),\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await fetchCurrencyValue(\n        this.contractWrapper.getProvider(),\n        listing.currency,\n        listing.buyoutPricePerToken,\n      ),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInSeconds: listing.startTime,\n      asset: await fetchTokenMetadataForContract(\n        listing.assetContract,\n        this.contractWrapper.getProvider(),\n        listing.tokenId,\n        this.storage,\n      ),\n      secondsUntilEnd: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Direct,\n    };\n  }\n\n  /**\n   * Use this method to check if a direct listing is still valid.\n   *\n   * Ways a direct listing can become invalid:\n   * 1. The asset holder transferred the asset to another wallet\n   * 2. The asset holder burned the asset\n   * 3. The asset holder removed the approval on the marketplace\n   *\n   * @internal\n   * @param listing - The listing to check.\n   * @returns - True if the listing is valid, false otherwise.\n   */\n  public async isStillValidListing(\n    listing: DirectListing,\n    quantity?: BigNumberish,\n  ): Promise<boolean> {\n    const approved = await isTokenApprovedForMarketplace(\n      this.contractWrapper.getProvider(),\n      this.getAddress(),\n      listing.assetContractAddress,\n      listing.tokenId,\n      listing.sellerAddress,\n    );\n\n    if (!approved) {\n      return false;\n    }\n\n    const provider = this.contractWrapper.getProvider();\n    const erc165 = new Contract(\n      listing.assetContractAddress,\n      ERC165Abi,\n      provider,\n    ) as IERC165;\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n    if (isERC721) {\n      const asset = new Contract(\n        listing.assetContractAddress,\n        ERC721Abi,\n        provider,\n      ) as IERC721;\n      return (\n        (await asset.ownerOf(listing.tokenId)).toLowerCase() ===\n        listing.sellerAddress.toLowerCase()\n      );\n    } else if (isERC1155) {\n      const asset = new Contract(\n        listing.assetContractAddress,\n        ERC1155Abi,\n        provider,\n      ) as IERC1155;\n      const balance = await asset.balanceOf(\n        listing.sellerAddress,\n        listing.tokenId,\n      );\n      return balance.gte(quantity || listing.quantity);\n    } else {\n      console.error(\"Contract does not implement ERC 1155 or ERC 721.\");\n      return false;\n    }\n  }\n}\n","import { BigNumber, BigNumberish, Contract, providers } from \"ethers\";\nimport {\n  InterfaceId_IERC1155,\n  InterfaceId_IERC721,\n} from \"../constants/contract\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { SignerOrProvider } from \"../core\";\nimport {\n  NewAuctionListing,\n  NewDirectListing,\n  Offer,\n} from \"../types/marketplace\";\nimport invariant from \"tiny-invariant\";\nimport { fetchCurrencyValue } from \"./currency\";\nimport { MAX_BPS } from \"../schema/shared\";\nimport { IERC1155, IERC165, IERC721 } from \"contracts\";\nimport ERC1155Abi from \"../../abis/IERC1155.json\";\nimport ERC721Abi from \"../../abis/IERC721.json\";\nimport ERC165Abi from \"../../abis/IERC165.json\";\n\n/**\n * This method checks if the given token is approved for the marketplace contract.\n * This is particularly useful for direct listings where the token\n * being listed may be moved before the listing is actually closed.\n *\n * @internal\n * @param provider - The connected provider\n * @param marketplaceAddress - The address of the marketplace contract\n * @param assetContract - The address of the asset contract.\n * @param tokenId - The token id of the token.\n * @param from - The address of the account that owns the token.\n * @returns - True if the marketplace is approved on the token, false otherwise.\n */\nexport async function isTokenApprovedForMarketplace(\n  provider: providers.Provider,\n  marketplaceAddress: string,\n  assetContract: string,\n  tokenId: BigNumberish,\n  from: string,\n): Promise<boolean> {\n  try {\n    const erc165 = new Contract(assetContract, ERC165Abi, provider) as IERC165;\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n    if (isERC721) {\n      const asset = new Contract(assetContract, ERC721Abi, provider) as IERC721;\n\n      const approved = await asset.isApprovedForAll(from, marketplaceAddress);\n      if (approved) {\n        return true;\n      }\n      return (\n        (await asset.getApproved(tokenId)).toLowerCase() ===\n        marketplaceAddress.toLowerCase()\n      );\n    } else if (isERC1155) {\n      const asset = new Contract(\n        assetContract,\n        ERC1155Abi,\n        provider,\n      ) as IERC1155;\n      return await asset.isApprovedForAll(from, marketplaceAddress);\n    } else {\n      console.error(\"Contract does not implement ERC 1155 or ERC 721.\");\n      return false;\n    }\n  } catch (err: any) {\n    console.error(\"Failed to check if token is approved\", err);\n    return false;\n  }\n}\n\n/**\n * Checks if the marketplace is approved to make transfers on the assetContract\n * If not, it tries to set the approval.\n * @param signerOrProvider\n * @param marketplaceAddress\n * @param assetContract\n * @param tokenId\n * @param from\n */\nexport async function handleTokenApproval(\n  signerOrProvider: SignerOrProvider,\n  marketplaceAddress: string,\n  assetContract: string,\n  tokenId: BigNumberish,\n  from: string,\n): Promise<void> {\n  const erc165 = new Contract(\n    assetContract,\n    ERC165Abi,\n    signerOrProvider,\n  ) as IERC165;\n  const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n  const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n  // check for token approval\n  if (isERC721) {\n    const asset = new ContractWrapper<IERC721>(\n      signerOrProvider,\n      assetContract,\n      ERC721Abi,\n      {},\n    );\n    const approved = await asset.readContract.isApprovedForAll(\n      from,\n      marketplaceAddress,\n    );\n    if (!approved) {\n      const isTokenApproved =\n        (await asset.readContract.getApproved(tokenId)).toLowerCase() ===\n        marketplaceAddress.toLowerCase();\n\n      if (!isTokenApproved) {\n        await asset.sendTransaction(\"setApprovalForAll\", [\n          marketplaceAddress,\n          true,\n        ]);\n      }\n    }\n  } else if (isERC1155) {\n    const asset = new ContractWrapper<IERC1155>(\n      signerOrProvider,\n      assetContract,\n      ERC1155Abi,\n      {},\n    );\n\n    const approved = await asset.readContract.isApprovedForAll(\n      from,\n      marketplaceAddress,\n    );\n    if (!approved) {\n      await asset.sendTransaction(\"setApprovalForAll\", [\n        marketplaceAddress,\n        true,\n      ]);\n    }\n  } else {\n    throw Error(\"Contract must implement ERC 1155 or ERC 721.\");\n  }\n}\n\n/**\n * Used to verify fields in new listing.\n * @internal\n */\n// TODO this should be done in zod\nexport function validateNewListingParam(\n  param: NewDirectListing | NewAuctionListing,\n) {\n  invariant(\n    param.assetContractAddress !== undefined &&\n      param.assetContractAddress !== null,\n    \"Asset contract address is required\",\n  );\n  invariant(\n    param.buyoutPricePerToken !== undefined &&\n      param.buyoutPricePerToken !== null,\n    \"Buyout price is required\",\n  );\n  invariant(\n    param.listingDurationInSeconds !== undefined &&\n      param.listingDurationInSeconds !== null,\n    \"Listing duration is required\",\n  );\n  invariant(\n    param.startTimestamp !== undefined && param.startTimestamp !== null,\n    \"Start time is required\",\n  );\n  invariant(\n    param.tokenId !== undefined && param.tokenId !== null,\n    \"Token ID is required\",\n  );\n  invariant(\n    param.quantity !== undefined && param.quantity !== null,\n    \"Quantity is required\",\n  );\n\n  switch (param.type) {\n    case \"NewAuctionListing\": {\n      invariant(\n        param.reservePricePerToken !== undefined &&\n          param.reservePricePerToken !== null,\n        \"Reserve price is required\",\n      );\n    }\n  }\n}\n\n/**\n * Maps a contract offer to the strict interface\n *\n * @internal\n * @param offer\n * @returns - An `Offer` object\n */\nexport async function mapOffer(\n  provider: providers.Provider,\n  listingId: BigNumber,\n  offer: any,\n): Promise<Offer> {\n  return {\n    quantity: offer.quantityDesired,\n    pricePerToken: offer.pricePerToken,\n    currencyContractAddress: offer.currency,\n    buyerAddress: offer.offeror,\n    quantityDesired: offer.quantityWanted,\n    currencyValue: await fetchCurrencyValue(\n      provider,\n      offer.currency,\n      (offer.quantityWanted as BigNumber).mul(offer.pricePerToken as BigNumber),\n    ),\n    listingId,\n  } as Offer;\n}\n\nexport function isWinningBid(\n  winningPrice: BigNumberish,\n  newBidPrice: BigNumberish,\n  bidBuffer: BigNumberish,\n): boolean {\n  bidBuffer = BigNumber.from(bidBuffer);\n  winningPrice = BigNumber.from(winningPrice);\n  newBidPrice = BigNumber.from(newBidPrice);\n  if (winningPrice.eq(BigNumber.from(0))) {\n    return false;\n  }\n  const buffer = newBidPrice.sub(winningPrice).mul(MAX_BPS).div(winningPrice);\n  return buffer.gte(bidBuffer);\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { IMarketplace, Marketplace } from \"contracts\";\nimport { IStorage } from \"../interfaces\";\nimport { BigNumber, BigNumberish, ethers, constants } from \"ethers\";\nimport {\n  AuctionListing,\n  NewAuctionListing,\n  Offer,\n} from \"../../types/marketplace\";\nimport {\n  AuctionAlreadyStartedError,\n  AuctionHasNotEndedError,\n  ListingNotFoundError,\n  WrongListingTypeError,\n} from \"../../common\";\nimport { ListingType } from \"../../enums\";\nimport {\n  fetchCurrencyMetadata,\n  fetchCurrencyValue,\n  normalizePriceValue,\n  setErc20Allowance,\n} from \"../../common/currency\";\nimport { fetchTokenMetadataForContract } from \"../../common/nft\";\nimport { TransactionResult, TransactionResultWithId } from \"../types\";\nimport {\n  handleTokenApproval,\n  isWinningBid,\n  mapOffer,\n  validateNewListingParam,\n} from \"../../common/marketplace\";\nimport { Price } from \"../../types/currency\";\nimport invariant from \"tiny-invariant\";\nimport { ListingAddedEvent } from \"contracts/Marketplace\";\n\n/**\n * Handles auction listings\n * @public\n */\nexport class MarketplaceAuction {\n  private contractWrapper: ContractWrapper<Marketplace>;\n  private storage: IStorage;\n\n  constructor(\n    contractWrapper: ContractWrapper<Marketplace>,\n    storage: IStorage,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get an Auction listing by id\n   *\n   * @param listingId - the listing Id\n   * @returns the Auction listing object\n   */\n  public async getListing(listingId: BigNumberish): Promise<AuctionListing> {\n    const listing = await this.contractWrapper.readContract.listings(listingId);\n\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n\n    if (listing.listingType !== ListingType.Auction) {\n      throw new WrongListingTypeError(\n        this.getAddress(),\n        listingId.toString(),\n        \"Direct\",\n        \"Auction\",\n      );\n    }\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Get Highest Bid\n   *\n   * @remarks Get the current highest bid of an active auction.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * contract.auction.\n   *   .getWinningBid(listingId)\n   *   .then((offer) => console.log(offer))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  public async getWinningBid(\n    listingId: BigNumberish,\n  ): Promise<Offer | undefined> {\n    await this.validateListing(BigNumber.from(listingId));\n    const offers = await this.contractWrapper.readContract.winningBid(\n      listingId,\n    );\n    if (offers.offeror === constants.AddressZero) {\n      return undefined;\n    }\n    return await mapOffer(\n      this.contractWrapper.getProvider(),\n      BigNumber.from(listingId),\n      offers,\n    );\n  }\n\n  /**\n   * Get Auction Winner\n   *\n   * @remarks Get the winner of the auction after an auction ends.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * contract.auction.\n   *   .getWinner(listingId)\n   *   .then((auctionWinner) => console.log(auctionWinner))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  public async getWinner(listingId: BigNumberish): Promise<string> {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const offers = await this.contractWrapper.readContract.winningBid(\n      listingId,\n    );\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    const endTime = BigNumber.from(listing.endTimeInEpochSeconds);\n\n    // if we have a winner in the map and the current time is past the endtime of the auction return the address of the winner\n    if (now.gt(endTime) && offers.offeror !== constants.AddressZero) {\n      return offers.offeror;\n    }\n    // otherwise fall back to query filter things\n\n    // TODO this should be via indexer or direct contract call\n    const closedAuctions = await this.contractWrapper.readContract.queryFilter(\n      this.contractWrapper.readContract.filters.AuctionClosed(),\n    );\n    const auction = closedAuctions.find((a) =>\n      a.args.listingId.eq(BigNumber.from(listingId)),\n    );\n    if (!auction) {\n      throw new Error(\n        `Could not find auction with listingId ${listingId} in closed auctions`,\n      );\n    }\n    return auction.args.winningBidder;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Auction\n   *\n   * @remarks Create a new auction where people can bid on an asset.\n   *\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *  // when should the listing open up for offers\n   *   startTimestamp: new Date(),\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutPricePerToken: \"10\",\n   *   // the minimum bid that will be accepted for the token\n   *   reservePricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.auction.createListing(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   */\n  public async createListing(\n    listing: NewAuctionListing,\n  ): Promise<TransactionResultWithId> {\n    validateNewListingParam(listing);\n\n    await handleTokenApproval(\n      this.contractWrapper.getSignerOrProvider(),\n      this.getAddress(),\n      listing.assetContractAddress,\n      listing.tokenId,\n      await this.contractWrapper.getSignerAddress(),\n    );\n\n    const normalizedPricePerToken = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      listing.buyoutPricePerToken,\n      listing.currencyContractAddress,\n    );\n\n    const normalizedReservePrice = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      listing.reservePricePerToken,\n      listing.currencyContractAddress,\n    );\n\n    let listingStartTime = Math.floor(listing.startTimestamp.getTime() / 1000);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (listingStartTime < blockTime) {\n      listingStartTime = blockTime;\n    }\n\n    const receipt = await this.contractWrapper.sendTransaction(\n      \"createListing\",\n      [\n        {\n          assetContract: listing.assetContractAddress,\n          tokenId: listing.tokenId,\n          buyoutPricePerToken: normalizedPricePerToken,\n          currencyToAccept: listing.currencyContractAddress,\n          listingType: ListingType.Auction,\n          quantityToList: listing.quantity,\n          reservePricePerToken: normalizedReservePrice,\n          secondsUntilEndTime: listing.listingDurationInSeconds,\n          startTime: BigNumber.from(listingStartTime),\n        } as IMarketplace.ListingParametersStruct,\n      ],\n      {\n        // Higher gas limit for create listing\n        gasLimit: 500000,\n      },\n    );\n\n    const event = this.contractWrapper.parseLogs<ListingAddedEvent>(\n      \"ListingAdded\",\n      receipt?.logs,\n    );\n    return {\n      id: event[0].args.listingId,\n      receipt,\n    };\n  }\n\n  /**\n   * Buyout Auction\n   *\n   * @remarks Buy a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   *\n   * await contract.auction.buyoutListing(listingId);\n   * ```\n   */\n  public async buyoutListing(\n    listingId: BigNumberish,\n  ): Promise<TransactionResult> {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n\n    const currencyMetadata = await fetchCurrencyMetadata(\n      this.contractWrapper.getProvider(),\n      listing.currencyContractAddress,\n    );\n\n    return this.makeBid(\n      listingId,\n      ethers.utils.formatUnits(listing.buyoutPrice, currencyMetadata.decimals),\n    );\n  }\n\n  /**\n   * Bid On Auction\n   *\n   * @remarks Make a bid on an auction listings\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to bid on\n   * const listingId = 0;\n   * // The price you are willing to bid for a single token of the listing\n   * const pricePerToken = 1;\n   *\n   * await contract.auction.makeBid(listingId, pricePerToken);\n   * ```\n   */\n  public async makeBid(\n    listingId: BigNumberish,\n    pricePerToken: Price,\n  ): Promise<TransactionResult> {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const normalizedPrice = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      pricePerToken,\n      listing.currencyContractAddress,\n    );\n    if (normalizedPrice.eq(BigNumber.from(0))) {\n      throw new Error(\"Cannot make a bid with 0 value\");\n    }\n    const bidBuffer = await this.contractWrapper.readContract.bidBufferBps();\n    const winningBid = await this.getWinningBid(listingId);\n    if (winningBid) {\n      const isWinnner = isWinningBid(\n        winningBid.pricePerToken,\n        normalizedPrice,\n        bidBuffer,\n      );\n\n      invariant(\n        isWinnner,\n        \"Bid price is too low based on the current winning bid and the bid buffer\",\n      );\n    } else {\n      const tokenPrice = normalizedPrice;\n      const reservePrice = BigNumber.from(listing.reservePrice);\n      invariant(\n        tokenPrice.gte(reservePrice),\n        \"Bid price is too low based on reserve price\",\n      );\n    }\n\n    const quantity = BigNumber.from(listing.quantity);\n    const value = normalizedPrice.mul(quantity);\n\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(\n      this.contractWrapper,\n      value,\n      listing.currencyContractAddress,\n      overrides,\n    );\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"offer\",\n        [\n          listingId,\n          listing.quantity,\n          listing.currencyContractAddress,\n          normalizedPrice,\n          ethers.constants.MaxUint256,\n        ],\n        overrides,\n      ),\n    };\n  }\n\n  /**\n   * Cancel Auction Listing\n   *\n   * @remarks Cancel an auction listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to cancel\n   * const listingId = \"0\";\n   *\n   * await contract.auction.cancelListing(listingId);\n   * ```\n   */\n  public async cancelListing(\n    listingId: BigNumberish,\n  ): Promise<TransactionResult> {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    const startTime = BigNumber.from(listing.startTimeInEpochSeconds);\n\n    const offers = await this.contractWrapper.readContract.winningBid(\n      listingId,\n    );\n    if (now.gt(startTime) && offers.offeror !== constants.AddressZero) {\n      throw new AuctionAlreadyStartedError(listingId.toString());\n    }\n\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"closeAuction\", [\n        BigNumber.from(listingId),\n        await this.contractWrapper.getSignerAddress(),\n      ]),\n    };\n  }\n\n  /**\n   * Close the Auction\n   *\n   * @remarks Closes the Auction and executes the sale.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to close\n   * const listingId = \"0\";\n   * await contract.auction.closeListing(listingId);\n   * ```\n   *\n   * @param listingId - the auction  listing ud to close\n   * @param closeFor - optionally pass the auction creator address or winning bid offeror address to close the auction on their behalf\n   */\n  public async closeListing(\n    listingId: BigNumberish,\n    closeFor?: string,\n  ): Promise<TransactionResult> {\n    if (!closeFor) {\n      closeFor = await this.contractWrapper.getSignerAddress();\n    }\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    try {\n      return {\n        receipt: await this.contractWrapper.sendTransaction(\"closeAuction\", [\n          BigNumber.from(listingId),\n          closeFor,\n        ]),\n      };\n    } catch (err: any) {\n      if (err.message.includes(\"cannot close auction before it has ended\")) {\n        throw new AuctionHasNotEndedError(\n          listingId.toString(),\n          listing.endTimeInEpochSeconds.toString(),\n        );\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Update an Auction listing with new metadata\n   * @param listing - the listing id to update\n   */\n  public async updateListing(\n    listing: AuctionListing,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"updateListing\", [\n        listing.id,\n        listing.quantity,\n        listing.reservePrice,\n        listing.buyoutPrice,\n        listing.currencyContractAddress,\n        listing.startTimeInEpochSeconds,\n        listing.endTimeInEpochSeconds,\n      ]),\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  private async validateListing(listingId: BigNumber): Promise<AuctionListing> {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the auction listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  public async mapListing(\n    listing: IMarketplace.ListingStruct,\n  ): Promise<AuctionListing> {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: BigNumber.from(listing.buyoutPricePerToken),\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await fetchCurrencyValue(\n        this.contractWrapper.getProvider(),\n        listing.currency,\n        listing.buyoutPricePerToken,\n      ),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInEpochSeconds: listing.startTime,\n      asset: await fetchTokenMetadataForContract(\n        listing.assetContract,\n        this.contractWrapper.getProvider(),\n        listing.tokenId,\n        this.storage,\n      ),\n      reservePriceCurrencyValuePerToken: await fetchCurrencyValue(\n        this.contractWrapper.getProvider(),\n        listing.currency,\n        listing.reservePricePerToken,\n      ),\n      reservePrice: BigNumber.from(listing.reservePricePerToken),\n      endTimeInEpochSeconds: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Auction,\n    };\n  }\n}\n","import { TWRegistry, TWRegistry__factory } from \"contracts\";\nimport { SDKOptions } from \"../../schema/sdk-options\";\nimport { NetworkOrSignerOrProvider } from \"../types\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { constants, utils } from \"ethers\";\nimport { TransactionResult } from \"..\";\n\n/**\n * @internal\n */\nexport class ContractRegistry extends ContractWrapper<TWRegistry> {\n  private byocRegistry: ContractWrapper<TWRegistry>;\n\n  constructor(\n    registryAddress: string,\n    contractPublisherAddress: string,\n    network: NetworkOrSignerOrProvider,\n    options?: SDKOptions,\n  ) {\n    super(network, registryAddress, TWRegistry__factory.abi, options);\n    this.byocRegistry = new ContractWrapper<TWRegistry>(\n      network,\n      contractPublisherAddress,\n      TWRegistry__factory.abi,\n      options,\n    );\n  }\n\n  public async getContractAddresses(walletAddress: string) {\n    let byocContracts: string[] = [];\n    try {\n      byocContracts = await this.byocRegistry.readContract.getAll(\n        walletAddress,\n      );\n    } catch (e) {\n      // do nothing\n    }\n    // TODO @fixme the filter here is necessary because for some reason getAll returns a 0x0 address for the first entry\n    return (await this.readContract.getAll(walletAddress))\n      .concat(byocContracts)\n      .filter(\n        (adr) =>\n          utils.isAddress(adr) && adr.toLowerCase() !== constants.AddressZero,\n      );\n  }\n\n  public async addContract(\n    contractAddress: string,\n  ): Promise<TransactionResult> {\n    return await this.addContracts([contractAddress]);\n  }\n\n  public async addContracts(\n    contractAddresses: string[],\n  ): Promise<TransactionResult> {\n    const deployerAddress = await this.getSignerAddress();\n\n    const encoded: string[] = [];\n    contractAddresses.forEach((address) => {\n      encoded.push(\n        this.readContract.interface.encodeFunctionData(\"add\", [\n          deployerAddress,\n          address,\n        ]),\n      );\n    });\n\n    return {\n      receipt: await this.multiCall(encoded),\n    };\n  }\n\n  public async addCustomContract(\n    contractAddress: string,\n  ): Promise<TransactionResult> {\n    return await this.addCustomContracts([contractAddress]);\n  }\n\n  public async addCustomContracts(\n    contractAddresses: string[],\n  ): Promise<TransactionResult> {\n    const deployerAddress = await this.getSignerAddress();\n\n    const encoded: string[] = [];\n    contractAddresses.forEach((address) => {\n      encoded.push(\n        this.byocRegistry.readContract.interface.encodeFunctionData(\"add\", [\n          deployerAddress,\n          address,\n        ]),\n      );\n    });\n\n    return {\n      receipt: await this.byocRegistry.multiCall(encoded),\n    };\n  }\n\n  public async removeContract(\n    contractAddress: string,\n  ): Promise<TransactionResult> {\n    return await this.removeContracts([contractAddress]);\n  }\n\n  public async removeContracts(\n    contractAddresses: string[],\n  ): Promise<TransactionResult> {\n    const deployerAddress = await this.getSignerAddress();\n\n    const encoded: string[] = [];\n    contractAddresses.forEach((address) => {\n      encoded.push(\n        this.readContract.interface.encodeFunctionData(\"remove\", [\n          deployerAddress,\n          address,\n        ]),\n      );\n    });\n\n    return {\n      receipt: await this.multiCall(encoded),\n    };\n  }\n\n  public async removeCustomContract(\n    contractAddress: string,\n  ): Promise<TransactionResult> {\n    return await this.removeCustomContracts([contractAddress]);\n  }\n\n  public async removeCustomContracts(\n    contractAddresses: string[],\n  ): Promise<TransactionResult> {\n    const deployerAddress = await this.getSignerAddress();\n\n    const encoded: string[] = [];\n    contractAddresses.forEach((address) => {\n      encoded.push(\n        this.byocRegistry.readContract.interface.encodeFunctionData(\"remove\", [\n          deployerAddress,\n          address,\n        ]),\n      );\n    });\n\n    return {\n      receipt: await this.byocRegistry.multiCall(encoded),\n    };\n  }\n}\n","import { TWFactory, TWFactory__factory } from \"contracts\";\nimport { BigNumber, Contract, ethers, constants } from \"ethers\";\nimport { z } from \"zod\";\nimport {\n  CONTRACTS_MAP,\n  Edition,\n  EditionDrop,\n  Marketplace,\n  NFTCollection,\n  NFTDrop,\n  Pack,\n  REMOTE_CONTRACT_NAME,\n  Split,\n  Token,\n  Vote,\n} from \"../../contracts\";\nimport { SDKOptions } from \"../../schema/sdk-options\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport { NetworkOrSignerOrProvider, ValidContractClass } from \"../types\";\nimport { ContractWrapper } from \"./contract-wrapper\";\n\nimport { ChainlinkVrf } from \"../../constants/chainlink\";\nimport {\n  CONTRACT_ADDRESSES,\n  OZ_DEFENDER_FORWARDER_ADDRESS,\n  SUPPORTED_CHAIN_IDS,\n} from \"../../constants\";\nimport { TokenDrop } from \"../../contracts/token-drop\";\nimport { ProxyDeployedEvent } from \"contracts/TWFactory\";\n\n/**\n * @internal\n */\nexport class ContractFactory extends ContractWrapper<TWFactory> {\n  private storage: IStorage;\n\n  constructor(\n    factoryAddr: string,\n    network: NetworkOrSignerOrProvider,\n    storage: IStorage,\n    options?: SDKOptions,\n  ) {\n    super(network, factoryAddr, TWFactory__factory.abi, options);\n    this.storage = storage;\n  }\n\n  public async deploy<TContract extends ValidContractClass>(\n    contractType: TContract[\"contractType\"],\n    contractMetadata: z.input<TContract[\"schema\"][\"deploy\"]>,\n  ): Promise<string> {\n    const contract = CONTRACTS_MAP[contractType];\n    const metadata = contract.schema.deploy.parse(contractMetadata);\n\n    // TODO: is there any special pre-processing we need to do before uploading?\n    const contractURI = await this.storage.uploadMetadata(\n      metadata,\n      this.readContract.address,\n      await this.getSigner()?.getAddress(),\n    );\n\n    const encodedFunc = Contract.getInterface(\n      contract.contractAbi,\n    ).encodeFunctionData(\n      \"initialize\",\n      await this.getDeployArguments(contractType, metadata, contractURI),\n    );\n\n    const contractName = REMOTE_CONTRACT_NAME[contractType];\n    const encodedType = ethers.utils.formatBytes32String(contractName);\n    let receipt;\n    try {\n      receipt = await this.sendTransaction(\"deployProxy\", [\n        encodedType,\n        encodedFunc,\n      ]);\n    } catch (e) {\n      // deploy might fail due to salt already used, fallback to deterministic deploy\n      const blockNumber = await this.getProvider().getBlockNumber();\n      receipt = await this.sendTransaction(\"deployProxyDeterministic\", [\n        encodedType,\n        encodedFunc,\n        ethers.utils.formatBytes32String(blockNumber.toString()),\n      ]);\n    }\n\n    const events = this.parseLogs<ProxyDeployedEvent>(\n      \"ProxyDeployed\",\n      receipt.logs,\n    );\n    if (events.length < 1) {\n      throw new Error(\"No ProxyDeployed event found\");\n    }\n\n    return events[0].args.proxy;\n  }\n\n  private async getDeployArguments<TContract extends ValidContractClass>(\n    contractType: TContract[\"contractType\"],\n    metadata: z.input<TContract[\"schema\"][\"deploy\"]>,\n    contractURI: string,\n  ): Promise<any[]> {\n    let trustedForwarders = await this.getDefaultTrustedForwarders();\n    // override default forwarders if custom ones are passed in\n    if (metadata.trusted_forwarders && metadata.trusted_forwarders.length > 0) {\n      trustedForwarders = metadata.trusted_forwarders;\n    }\n    switch (contractType) {\n      case NFTDrop.contractType:\n      case NFTCollection.contractType:\n        const erc721metadata = NFTDrop.schema.deploy.parse(metadata);\n        return [\n          await this.getSignerAddress(),\n          erc721metadata.name,\n          erc721metadata.symbol,\n          contractURI,\n          trustedForwarders,\n          erc721metadata.primary_sale_recipient,\n          erc721metadata.fee_recipient,\n          erc721metadata.seller_fee_basis_points,\n          erc721metadata.platform_fee_basis_points,\n          erc721metadata.platform_fee_recipient,\n        ];\n      case EditionDrop.contractType:\n      case Edition.contractType:\n        const erc1155metadata = EditionDrop.schema.deploy.parse(metadata);\n        return [\n          await this.getSignerAddress(),\n          erc1155metadata.name,\n          erc1155metadata.symbol,\n          contractURI,\n          trustedForwarders,\n          erc1155metadata.primary_sale_recipient,\n          erc1155metadata.fee_recipient,\n          erc1155metadata.seller_fee_basis_points,\n          erc1155metadata.platform_fee_basis_points,\n          erc1155metadata.platform_fee_recipient,\n        ];\n      case TokenDrop.contractType:\n      case Token.contractType:\n        const erc20metadata = Token.schema.deploy.parse(metadata);\n        return [\n          await this.getSignerAddress(),\n          erc20metadata.name,\n          erc20metadata.symbol,\n          contractURI,\n          trustedForwarders,\n          erc20metadata.primary_sale_recipient,\n          erc20metadata.platform_fee_recipient,\n          erc20metadata.platform_fee_basis_points,\n        ];\n      case Vote.contractType:\n        const voteMetadata = Vote.schema.deploy.parse(metadata);\n        return [\n          voteMetadata.name,\n          contractURI,\n          trustedForwarders,\n          voteMetadata.voting_token_address,\n          voteMetadata.voting_delay_in_blocks,\n          voteMetadata.voting_period_in_blocks,\n          BigNumber.from(voteMetadata.proposal_token_threshold),\n          voteMetadata.voting_quorum_fraction,\n        ];\n      case Split.contractType:\n        const splitsMetadata = Split.schema.deploy.parse(metadata);\n        return [\n          await this.getSignerAddress(),\n          contractURI,\n          trustedForwarders,\n          splitsMetadata.recipients.map((s) => s.address),\n          splitsMetadata.recipients.map((s) => BigNumber.from(s.sharesBps)),\n        ];\n      case Marketplace.contractType:\n        const marketplaceMetadata = Marketplace.schema.deploy.parse(metadata);\n        return [\n          await this.getSignerAddress(),\n          contractURI,\n          trustedForwarders,\n          marketplaceMetadata.platform_fee_recipient,\n          marketplaceMetadata.platform_fee_basis_points,\n        ];\n      case Pack.contractType:\n        const packsMetadata = Pack.schema.deploy.parse(metadata);\n        const vrf = ChainlinkVrf[await this.getChainID()];\n        return [\n          await this.getSignerAddress(),\n          packsMetadata.name,\n          packsMetadata.symbol,\n          contractURI,\n          trustedForwarders,\n          packsMetadata.fee_recipient,\n          packsMetadata.seller_fee_basis_points,\n          vrf.fees,\n          vrf.keyHash,\n        ];\n      default:\n        return [];\n    }\n  }\n\n  private async getDefaultTrustedForwarders(): Promise<string[]> {\n    const chainId = await this.getChainID();\n    const chainEnum = SUPPORTED_CHAIN_IDS.find((c) => c === chainId);\n    const biconomyForwarder = chainEnum\n      ? CONTRACT_ADDRESSES[chainEnum].biconomyForwarder\n      : constants.AddressZero;\n    return biconomyForwarder !== constants.AddressZero\n      ? [OZ_DEFENDER_FORWARDER_ADDRESS, biconomyForwarder]\n      : [OZ_DEFENDER_FORWARDER_ADDRESS];\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { BaseContract, CallOverrides } from \"ethers\";\n\n/**\n * Allows overriding transaction behavior for this contract\n * @internal\n */\nexport class ContractInterceptor<TContract extends BaseContract> {\n  private contractWrapper;\n\n  constructor(contractWrapper: ContractWrapper<TContract>) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   */\n  public overrideNextTransaction(hook: () => CallOverrides) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { BaseContract, providers } from \"ethers\";\nimport { EventType } from \"../../constants\";\nimport { ListenerFn } from \"eventemitter3\";\n\n/**\n * Listen to Contract events in real time\n * @public\n */\nexport class ContractEvents<TContract extends BaseContract> {\n  private contractWrapper;\n\n  constructor(contractWrapper: ContractWrapper<TContract>) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Subscribe to transactions in this contract.\n   * @remarks Will emit an \"event\" object containing the transaction status ('submitted' and 'completed') and hash\n   * @example\n   * ```javascript\n   * contract.events.addTransactionListener((event) => {\n   *   console.log(event);\n   * }\n   * ```\n   * @param listener - the receiver that will be called on every transaction\n   * @public\n   */\n  public addTransactionListener(listener: ListenerFn) {\n    this.contractWrapper.addListener(EventType.Transaction, listener);\n  }\n\n  /**\n   * Remove a transaction listener\n   * @param listener - the receiver to remove\n   * @public\n   */\n  public removeTransactionListener(listener: ListenerFn) {\n    this.contractWrapper.off(EventType.Transaction, listener);\n  }\n\n  /**\n   * Subscribe to contract events\n   * @remarks You can add a listener for any contract event to run a function when\n   * the event is emitted. For example, if you wanted to listen for a \"TokensMinted\" event,\n   * you could do the following:\n   * @example\n   * ```javascript\n   * contract.events.addEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the receiver that will be called on every new event\n   */\n  public addEventListener(\n    eventName: keyof TContract[\"filters\"] | (string & {}),\n    listener: (event: Record<string, any>) => void,\n  ) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(\n      eventName as string,\n    );\n    this.contractWrapper.readContract.on(event.name, (...args) => {\n      // convert event info into nice object with named properties\n      const results: Record<string, any> = {};\n      event.inputs.forEach((param, index) => {\n        if (Array.isArray(args[index])) {\n          const obj: Record<string, any> = {};\n          const components = param.components;\n          if (components) {\n            const arr = args[index];\n            for (let i = 0; i < components.length; i++) {\n              const name = components[i].name;\n              obj[name] = arr[i];\n            }\n            results[param.name] = obj;\n          }\n        } else {\n          results[param.name] = args[index];\n        }\n      });\n      listener(results);\n    });\n  }\n\n  /**\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the listener to unregister\n   */\n  public removeEventListener(\n    eventName: keyof TContract[\"filters\"] | (string & {}),\n    listener: providers.Listener,\n  ) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(\n      eventName as string,\n    );\n    this.contractWrapper.readContract.off(event.name as string, listener);\n  }\n\n  /**\n   * Remove all listeners on this contract\n   */\n  public removeAllListeners() {\n    this.contractWrapper.readContract.removeAllListeners();\n  }\n}\n","import { IPlatformFee } from \"contracts\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { TransactionResult } from \"../types\";\nimport { CommonPlatformFeeSchema } from \"../../schema\";\nimport { z } from \"zod\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { FEATURE_PLATFORM_FEE } from \"../../constants/thirdweb-features\";\n\n/**\n * Handle platform fees and recipients\n * @remarks Configure platform fees for a contract, which can be applied on certain paid transactions\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const feeInfo = await contract.platformFee.get();\n * await contract.platformFee.set({\n *   platform_fee_basis_points: 100, // 1% fee\n *   platform_fee_recipient: \"0x...\" // the fee recipient\n * })\n * ```\n * @public\n */\nexport class ContractPlatformFee<TContract extends IPlatformFee>\n  implements DetectableFeature\n{\n  featureName = FEATURE_PLATFORM_FEE.name;\n  private contractWrapper;\n\n  constructor(contractWrapper: ContractWrapper<TContract>) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the platform fee recipient and basis points\n   * @returns the wallet address.\n   */\n  public async get() {\n    const [platformFeeRecipient, platformFeeBps] =\n      await this.contractWrapper.readContract.getPlatformFeeInfo();\n    return CommonPlatformFeeSchema.parse({\n      platform_fee_recipient: platformFeeRecipient,\n      platform_fee_basis_points: platformFeeBps,\n    });\n  }\n\n  /**\n   * Set the platform fee recipient and basis points\n   * @param platformFeeInfo - the platform fee information\n   */\n  public async set(\n    platformFeeInfo: z.input<typeof CommonPlatformFeeSchema>,\n  ): Promise<TransactionResult> {\n    const parsed = CommonPlatformFeeSchema.parse(platformFeeInfo);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"setPlatformFeeInfo\",\n        [parsed.platform_fee_recipient, parsed.platform_fee_basis_points],\n      ),\n    };\n  }\n}\n","import type {\n  IStorage,\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n  TransactionResultWithId,\n} from \"../core\";\nimport {\n  Erc721BatchMintable,\n  Erc721Enumerable,\n  Erc721Mintable,\n  Erc721Supply,\n} from \"../core/classes\";\nimport { TokenErc721ContractSchema } from \"../schema/contracts/token-erc721\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { TokenERC721 } from \"contracts\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractRoles } from \"../core/classes/contract-roles\";\nimport { ContractRoyalty } from \"../core/classes/contract-royalty\";\nimport { Erc721 } from \"../core/classes/erc-721\";\nimport { ContractPrimarySale } from \"../core/classes/contract-sales\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { Erc721SignatureMinting } from \"../core/classes/erc-721-signature-minting\";\nimport { ContractInterceptor } from \"../core/classes/contract-interceptor\";\nimport { ContractEvents } from \"../core/classes/contract-events\";\nimport { ContractPlatformFee } from \"../core/classes/contract-platform-fee\";\nimport { getRoleHash } from \"../common\";\nimport { BigNumber, BigNumberish, constants } from \"ethers\";\nimport { NFTMetadataOrUri, NFTMetadataOwner } from \"../schema\";\nimport { QueryAllParams } from \"../types\";\nimport { GasCostEstimator } from \"../core/classes/gas-cost-estimator\";\nimport { ContractAnalytics } from \"../core/classes/contract-analytics\";\n\n/**\n * Create a collection of one-of-one NFTs.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"rinkeby\");\n * const contract = sdk.getNFTCollection(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class NFTCollection extends Erc721<TokenERC721> {\n  static contractType = \"nft-collection\" as const;\n  static contractRoles = [\"admin\", \"minter\", \"transfer\"] as const;\n  static contractAbi = require(\"../../abis/TokenERC721.json\");\n  /**\n   * @internal\n   */\n  static schema = TokenErc721ContractSchema;\n\n  public metadata: ContractMetadata<TokenERC721, typeof NFTCollection.schema>;\n  public roles: ContractRoles<\n    TokenERC721,\n    typeof NFTCollection.contractRoles[number]\n  >;\n  public encoder: ContractEncoder<TokenERC721>;\n  public estimator: GasCostEstimator<TokenERC721>;\n  public events: ContractEvents<TokenERC721>;\n  public primarySale: ContractPrimarySale<TokenERC721>;\n  public platformFee: ContractPlatformFee<TokenERC721>;\n  /**\n   * @internal\n   */\n  public analytics: ContractAnalytics<TokenERC721>;\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalty.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalty.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n  public royalty: ContractRoyalty<TokenERC721, typeof NFTCollection.schema>;\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n  public signature: Erc721SignatureMinting;\n  /**\n   * @internal\n   */\n  public interceptor: ContractInterceptor<TokenERC721>;\n\n  private _mint = this.mint as Erc721Mintable;\n  private _batchMint = this._mint.batch as Erc721BatchMintable;\n  private _query = this.query as Erc721Supply;\n  private _owned = this._query.owned as Erc721Enumerable;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<TokenERC721>(\n      network,\n      address,\n      NFTCollection.contractAbi,\n      options,\n    ),\n  ) {\n    super(contractWrapper, storage, options);\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      NFTCollection.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(\n      this.contractWrapper,\n      NFTCollection.contractRoles,\n    );\n    this.royalty = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.primarySale = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.signature = new Erc721SignatureMinting(\n      this.contractWrapper,\n      this.roles,\n      this.storage,\n    );\n    this.analytics = new ContractAnalytics(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFee = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get All Minted NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  public async getAll(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    return this._query.all(queryParams);\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  public async getOwned(walletAddress?: string): Promise<NFTMetadataOwner[]> {\n    return this._owned.all(walletAddress);\n  }\n\n  /**\n   * Get all token ids of NFTs owned by a specific wallet.\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   */\n  public async getOwnedTokenIds(walletAddress?: string): Promise<BigNumber[]> {\n    return this._owned.tokenIds(walletAddress);\n  }\n\n  /**\n   * Get the total count NFTs minted in this contract\n   */\n  public async totalSupply() {\n    return this._query.totalCirculatingSupply();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  public async isTransferRestricted(): Promise<boolean> {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(\n      getRoleHash(\"transfer\"),\n      constants.AddressZero,\n    );\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint a unique NFT\n   *\n   * @remarks Mint a unique NFT to a specified wallet.\n   *\n   * @example\n   * ```javascript*\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.mintToSelf(metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  public async mintToSelf(\n    metadata: NFTMetadataOrUri,\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>> {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    return this._mint.to(signerAddress, metadata);\n  }\n\n  /**\n   * Mint a unique NFT\n   *\n   * @remarks Mint a unique NFT to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.mintTo(walletAddress, metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  public async mintTo(\n    walletAddress: string,\n    metadata: NFTMetadataOrUri,\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>> {\n    return this._mint.to(walletAddress, metadata);\n  }\n  /**\n   * Mint Many unique NFTs\n   *\n   * @remarks Mint many unique NFTs at once to the connected wallet\n   *\n   * @example\n   * ```javascript*\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.mintBatch(metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  public async mintBatch(\n    metadata: NFTMetadataOrUri[],\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>[]> {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    return this._batchMint.to(signerAddress, metadata);\n  }\n  /**\n   * Mint Many unique NFTs\n   *\n   * @remarks Mint many unique NFTs at once to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.mintBatchTo(walletAddress, metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  public async mintBatchTo(\n    walletAddress: string,\n    metadata: NFTMetadataOrUri[],\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>[]> {\n    return this._batchMint.to(walletAddress, metadata);\n  }\n\n  /**\n   * Burn a single NFT\n   * @param tokenId - the token Id to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burn(tokenId);\n   * ```\n   */\n  public async burn(tokenId: BigNumberish): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"burn\", [tokenId]),\n    };\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { BaseContract, ethers } from \"ethers\";\n\n/**\n * Estimates the gas cost of Contract calls\n * @public\n */\nexport class GasCostEstimator<TContract extends BaseContract> {\n  private contractWrapper;\n\n  constructor(contractWrapper: ContractWrapper<TContract>) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Estimates the cost of gas in native token of the current chain\n   * @returns the estimated price in native currency (ETH, MATIC, etc) of calling this function\n   */\n  public async gasCostOf(\n    fn: keyof TContract[\"functions\"] | (string & {}),\n    args: Parameters<TContract[\"functions\"][typeof fn]> | any[],\n  ): Promise<string> {\n    const price = await this.contractWrapper.getPreferredGasPrice();\n    const gasUnits = await this.contractWrapper.estimateGas(fn, args);\n    return ethers.utils.formatEther(gasUnits.mul(price));\n  }\n\n  /**\n   * Returns the current gas price in gwei\n   */\n  public async currentGasPriceInGwei(): Promise<string> {\n    const price = await this.contractWrapper.getProvider().getGasPrice();\n    return ethers.utils.formatUnits(price, \"gwei\");\n  }\n}\n","import { BaseContract, ethers, Event } from \"ethers\";\nimport { ChainId } from \"../../constants\";\nimport { ContractWrapper } from \"./contract-wrapper\";\n\nexport class ContractAnalytics<TContract extends BaseContract> {\n  private contractWrapper: ContractWrapper<TContract>;\n\n  constructor(contractWrapper: ContractWrapper<TContract>) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  public async query(\n    eventName: keyof TContract[\"filters\"] | string,\n  ): Promise<Event[]> {\n    const event = this.contractWrapper.readContract.interface.getEvent(\n      eventName as string,\n    );\n    const filter = this.contractWrapper.readContract.filters[event.name];\n\n    const fromBlock = 0;\n    const toBlock =\n      await this.contractWrapper.readContract.provider.getBlockNumber();\n\n    const network =\n      await this.contractWrapper.readContract.provider.getNetwork();\n    const alchemyContractWrapper = new ContractWrapper(\n      network.chainId === ChainId.Localhost ||\n      network.chainId === ChainId.Hardhat\n        ? this.contractWrapper.readContract.provider\n        : new ethers.providers.AlchemyProvider(network.name),\n      this.contractWrapper.readContract.address,\n      this.contractWrapper.abi,\n      {},\n    );\n\n    let events: Event[] = [];\n    events = await alchemyContractWrapper.readContract.queryFilter(\n      filter(),\n      fromBlock,\n      toBlock,\n    );\n\n    return events;\n  }\n}\n","import { Erc1155 } from \"../core/classes/erc-1155\";\nimport { DropERC1155 } from \"contracts\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractRoles } from \"../core/classes/contract-roles\";\nimport { ContractRoyalty } from \"../core/classes/contract-royalty\";\nimport { ContractPrimarySale } from \"../core/classes/contract-sales\";\nimport {\n  Erc1155Enumerable,\n  IStorage,\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n  TransactionResultWithId,\n} from \"../core\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport {\n  CommonNFTInput,\n  NFTMetadata,\n  NFTMetadataInput,\n} from \"../schema/tokens/common\";\nimport { BigNumber, BigNumberish, BytesLike, constants, utils } from \"ethers\";\nimport { prepareClaim } from \"../common/claim-conditions\";\nimport { DropErc1155ClaimConditions } from \"../core/classes/drop-erc1155-claim-conditions\";\nimport { DropErc1155ContractSchema } from \"../schema/contracts/drop-erc1155\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { GasCostEstimator } from \"../core/classes/gas-cost-estimator\";\nimport { ClaimVerification, QueryAllParams } from \"../types\";\nimport { DropErc1155History } from \"../core/classes/drop-erc1155-history\";\nimport { ContractEvents } from \"../core/classes/contract-events\";\nimport { ContractPlatformFee } from \"../core/classes/contract-platform-fee\";\nimport { ContractInterceptor } from \"../core/classes/contract-interceptor\";\nimport { TokensLazyMintedEvent } from \"contracts/DropERC1155\";\nimport { getRoleHash } from \"../common\";\n\nimport { EditionMetadata, EditionMetadataOwner } from \"../schema\";\nimport { ContractAnalytics } from \"../core/classes/contract-analytics\";\n\n/**\n * Setup a collection of NFTs with a customizable number of each NFT that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"rinkeby\");\n * const contract = sdk.getEditionDrop(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class EditionDrop extends Erc1155<DropERC1155> {\n  static contractType = \"edition-drop\" as const;\n  static contractRoles = [\"admin\", \"minter\", \"transfer\"] as const;\n  static contractAbi = require(\"../../abis/DropERC1155.json\");\n  /**\n   * @internal\n   */\n  static schema = DropErc1155ContractSchema;\n\n  private _query = this.query as Erc1155Enumerable;\n\n  public primarySale: ContractPrimarySale<DropERC1155>;\n  public platformFee: ContractPlatformFee<DropERC1155>;\n  public encoder: ContractEncoder<DropERC1155>;\n  public estimator: GasCostEstimator<DropERC1155>;\n  public events: ContractEvents<DropERC1155>;\n  public metadata: ContractMetadata<DropERC1155, typeof EditionDrop.schema>;\n  /**\n   * @internal\n   */\n  public analytics: ContractAnalytics<DropERC1155>;\n  public roles: ContractRoles<\n    DropERC1155,\n    typeof EditionDrop.contractRoles[number]\n  >;\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalty.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalty.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n  public royalty: ContractRoyalty<DropERC1155, typeof EditionDrop.schema>;\n  /**\n   * Configure claim conditions for each NFT\n   * @remarks Define who can claim each NFT in the edition, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * const tokenId = 0; // the id of the NFT to set claim conditions on\n   * await contract.claimConditions.set(tokenId, claimConditions);\n   * ```\n   */\n  public claimConditions: DropErc1155ClaimConditions;\n  public history: DropErc1155History;\n  /**\n   * @internal\n   */\n  public interceptor: ContractInterceptor<DropERC1155>;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<DropERC1155>(\n      network,\n      address,\n      EditionDrop.contractAbi,\n      options,\n    ),\n  ) {\n    super(contractWrapper, storage, options);\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      EditionDrop.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(\n      this.contractWrapper,\n      EditionDrop.contractRoles,\n    );\n    this.royalty = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.primarySale = new ContractPrimarySale(this.contractWrapper);\n    this.claimConditions = new DropErc1155ClaimConditions(\n      this.contractWrapper,\n      this.metadata,\n      this.storage,\n    );\n    this.analytics = new ContractAnalytics(this.contractWrapper);\n    this.history = new DropErc1155History(this.analytics);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.platformFee = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  // TODO getAllClaimerAddresses() - should be done via an indexer\n\n  /**\n   * Get All Minted NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  public async getAll(\n    queryParams?: QueryAllParams,\n  ): Promise<EditionMetadata[]> {\n    return this._query.all(queryParams);\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  public async getOwned(\n    walletAddress?: string,\n  ): Promise<EditionMetadataOwner[]> {\n    return this._query.owned(walletAddress);\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  public async getTotalCount(): Promise<BigNumber> {\n    return this._query.getTotalCount();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  public async isTransferRestricted(): Promise<boolean> {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(\n      getRoleHash(\"transfer\"),\n      constants.AddressZero,\n    );\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   */\n  public async createBatch(\n    metadatas: NFTMetadataInput[],\n  ): Promise<TransactionResultWithId<NFTMetadata>[]> {\n    const startFileNumber =\n      await this.contractWrapper.readContract.nextTokenIdToMint();\n    const batch = await this.storage.uploadMetadataBatch(\n      metadatas.map((m) => CommonNFTInput.parse(m)),\n      startFileNumber.toNumber(),\n      this.contractWrapper.readContract.address,\n      await this.contractWrapper.getSigner()?.getAddress(),\n    );\n    const receipt = await this.contractWrapper.sendTransaction(\"lazyMint\", [\n      batch.metadataUris.length,\n      `${batch.baseUri.endsWith(\"/\") ? batch.baseUri : `${batch.baseUri}/`}`,\n    ]);\n    const event = this.contractWrapper.parseLogs<TokensLazyMintedEvent>(\n      \"TokensLazyMinted\",\n      receipt?.logs,\n    );\n    const startingIndex = event[0].args.startTokenId;\n    const endingIndex = event[0].args.endTokenId;\n    const results = [];\n    for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n        data: () => this.getTokenMetadata(id),\n      });\n    }\n    return results;\n  }\n\n  /**\n   * Claim NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, tokenId, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const claimedTokenId = tx.id; // the id of the NFT claimed\n   * const claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param proofs - Array of proofs\n   *\n   * @returns - Receipt for the transaction\n   */\n  public async claimTo(\n    destinationAddress: string,\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [utils.hexZeroPad([0], 32)],\n  ): Promise<TransactionResult> {\n    const claimVerification = await this.prepareClaim(\n      tokenId,\n      quantity,\n      proofs,\n    );\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"claim\",\n        [\n          destinationAddress,\n          tokenId,\n          quantity,\n          claimVerification.currencyAddress,\n          claimVerification.price,\n          claimVerification.proofs,\n          claimVerification.maxQuantityPerTransaction,\n        ],\n        claimVerification.overrides,\n      ),\n    };\n  }\n\n  /**\n   * Claim a token to the connected wallet\n   *\n   * @remarks See {@link EditionDrop.claimTo}\n   *\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param proofs - Array of proofs\n   *\n   * @returns - Receipt for the transaction\n   */\n  public async claim(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [utils.hexZeroPad([0], 32)],\n  ): Promise<TransactionResult> {\n    const address = await this.contractWrapper.getSignerAddress();\n    return this.claimTo(address, tokenId, quantity, proofs);\n  }\n\n  /**\n   * Burn a specified amount of a NFT\n   *\n   * @param tokenId - the token Id to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burn(tokenId, amount);\n   * ```\n   */\n  public async burn(\n    tokenId: BigNumberish,\n    amount: BigNumberish,\n  ): Promise<TransactionResult> {\n    const account = await this.contractWrapper.getSignerAddress();\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"burn\", [\n        account,\n        tokenId,\n        amount,\n      ]),\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Returns proofs and the overrides required for the transaction.\n   *\n   * @returns - `overrides` and `proofs` as an object.\n   */\n  private async prepareClaim(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [utils.hexZeroPad([0], 32)],\n  ): Promise<ClaimVerification> {\n    return prepareClaim(\n      quantity,\n      await this.claimConditions.getActive(tokenId),\n      (await this.metadata.get()).merkle,\n      0,\n      this.contractWrapper,\n      this.storage,\n      proofs,\n    );\n  }\n}\n","import { Erc1155 } from \"../core/classes/erc-1155\";\nimport { TokenERC1155 } from \"contracts\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractRoles } from \"../core/classes/contract-roles\";\nimport { ContractRoyalty } from \"../core/classes/contract-royalty\";\nimport { ContractPrimarySale } from \"../core/classes/contract-sales\";\nimport {\n  Erc1155Enumerable,\n  IStorage,\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n  TransactionResultWithId,\n} from \"../core\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { TokenErc1155ContractSchema } from \"../schema/contracts/token-erc1155\";\nimport {\n  EditionMetadata,\n  EditionMetadataOrUri,\n  EditionMetadataOwner,\n} from \"../schema/tokens/edition\";\nimport {\n  ContractEncoder,\n  ContractEvents,\n  ContractInterceptor,\n  ContractPlatformFee,\n} from \"../core/classes\";\nimport { BigNumber, BigNumberish, constants } from \"ethers\";\nimport { Erc1155SignatureMinting } from \"../core/classes/erc-1155-signature-minting\";\nimport { GasCostEstimator } from \"../core/classes/gas-cost-estimator\";\nimport { getRoleHash } from \"../common\";\nimport { QueryAllParams } from \"../types\";\nimport { Erc1155Mintable } from \"../core/classes/erc-1155-mintable\";\nimport { Erc1155BatchMintable } from \"../core/classes/erc-1155-batch-mintable\";\nimport { ContractAnalytics } from \"../core/classes/contract-analytics\";\n\n/**\n * Create a collection of NFTs that lets you mint multiple copies of each NFT.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"rinkeby\");\n * const contract = sdk.getEdition(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class Edition extends Erc1155<TokenERC1155> {\n  static contractType = \"edition\" as const;\n  static contractRoles = [\"admin\", \"minter\", \"transfer\"] as const;\n  static contractAbi = require(\"../../abis/TokenERC1155.json\");\n\n  private _query = this.query as Erc1155Enumerable;\n  private _mint = this.mint as Erc1155Mintable;\n  private _batchMint = this._mint.batch as Erc1155BatchMintable;\n  /**\n   * @internal\n   */\n  static schema = TokenErc1155ContractSchema;\n\n  public metadata: ContractMetadata<TokenERC1155, typeof Edition.schema>;\n  public roles: ContractRoles<\n    TokenERC1155,\n    typeof Edition.contractRoles[number]\n  >;\n  public primarySale: ContractPrimarySale<TokenERC1155>;\n  public platformFee: ContractPlatformFee<TokenERC1155>;\n  public encoder: ContractEncoder<TokenERC1155>;\n  public estimator: GasCostEstimator<TokenERC1155>;\n  public events: ContractEvents<TokenERC1155>;\n  /**\n   * @internal\n   */\n  public analytics: ContractAnalytics<TokenERC1155>;\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalty.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalty.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n  public royalty: ContractRoyalty<TokenERC1155, typeof Edition.schema>;\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n  public signature: Erc1155SignatureMinting;\n  /**\n   * @internal\n   */\n  public interceptor: ContractInterceptor<TokenERC1155>;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<TokenERC1155>(\n      network,\n      address,\n      Edition.contractAbi,\n      options,\n    ),\n  ) {\n    super(contractWrapper, storage, options);\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      Edition.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(this.contractWrapper, Edition.contractRoles);\n    this.royalty = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.primarySale = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFee = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.analytics = new ContractAnalytics(this.contractWrapper);\n    this.signature = new Erc1155SignatureMinting(\n      this.contractWrapper,\n      this.roles,\n      this.storage,\n    );\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get All Minted NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  public async getAll(\n    queryParams?: QueryAllParams,\n  ): Promise<EditionMetadata[]> {\n    return this._query.all(queryParams);\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  public async getOwned(\n    walletAddress?: string,\n  ): Promise<EditionMetadataOwner[]> {\n    return this._query.owned(walletAddress);\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  public async getTotalCount(): Promise<BigNumber> {\n    return this._query.getTotalCount();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  public async isTransferRestricted(): Promise<boolean> {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(\n      getRoleHash(\"transfer\"),\n      constants.AddressZero,\n    );\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint NFT for the connected wallet\n   *\n   * @remarks See {@link Edition.mintTo}\n   */\n  public async mintToSelf(\n    metadataWithSupply: EditionMetadataOrUri,\n  ): Promise<TransactionResultWithId<EditionMetadata>> {\n    return this._mint.to(\n      await this.contractWrapper.getSignerAddress(),\n      metadataWithSupply,\n    );\n  }\n\n  /**\n   * Mint an NFT with a limited supply\n   *\n   * @remarks Mint an NFT with a limited supply to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * const metadataWithSupply = {\n   *   metadata,\n   *   supply: 1000, // The number of this NFT you want to mint\n   * }\n   *\n   * const tx = await contract.mintTo(toAddress, metadataWithSupply);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  public async mintTo(\n    to: string,\n    metadataWithSupply: EditionMetadataOrUri,\n  ): Promise<TransactionResultWithId<EditionMetadata>> {\n    return this._mint.to(to, metadataWithSupply);\n  }\n\n  /**\n   * Increase the supply of an existing NFT and mint it to the connected wallet\n   *\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   */\n  public async mintAdditionalSupply(\n    tokenId: BigNumberish,\n    additionalSupply: BigNumberish,\n  ): Promise<TransactionResultWithId<EditionMetadata>> {\n    return this._mint.additionalSupplyTo(\n      await this.contractWrapper.getSignerAddress(),\n      tokenId,\n      additionalSupply,\n    );\n  }\n\n  /**\n   * Increase the supply of an existing NFT and mint it to a given wallet address\n   *\n   * @param to - the address to mint to\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   */\n  public async mintAdditionalSupplyTo(\n    to: string,\n    tokenId: BigNumberish,\n    additionalSupply: BigNumberish,\n  ): Promise<TransactionResultWithId<EditionMetadata>> {\n    return this._mint.additionalSupplyTo(to, tokenId, additionalSupply);\n  }\n\n  /**\n   * Mint Many NFTs for the connected wallet\n   *\n   * @remarks See {@link Edition.mintBatchTo}\n   */\n  public async mintBatch(\n    metadatas: EditionMetadataOrUri[],\n  ): Promise<TransactionResultWithId<EditionMetadata>[]> {\n    return this._batchMint.to(\n      await this.contractWrapper.getSignerAddress(),\n      metadatas,\n    );\n  }\n\n  /**\n   * Mint Many NFTs with limited supplies\n   *\n   * @remarks Mint many different NFTs with limited supplies to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata and supplies of your NFTs\n   * const metadataWithSupply = [{\n   *   supply: 50, // The number of this NFT you want to mint\n   *   metadata: {\n   *     name: \"Cool NFT #1\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }, {\n   *   supply: 100,\n   *   metadata: {\n   *     name: \"Cool NFT #2\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }];\n   *\n   * const tx = await contract.mintBatchTo(toAddress, metadataWithSupply);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  public async mintBatchTo(\n    to: string,\n    metadataWithSupply: EditionMetadataOrUri[],\n  ): Promise<TransactionResultWithId<EditionMetadata>[]> {\n    return this._batchMint.to(to, metadataWithSupply);\n  }\n\n  /**\n   * Burn a specified amount of a NFT\n   *\n   * @param tokenId - the token Id to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burn(tokenId, amount);\n   * ```\n   */\n  public async burn(\n    tokenId: BigNumberish,\n    amount: BigNumberish,\n  ): Promise<TransactionResult> {\n    const account = await this.contractWrapper.getSignerAddress();\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"burn\", [\n        account,\n        tokenId,\n        amount,\n      ]),\n    };\n  }\n}\n","import { TokenErc20ContractSchema } from \"../schema/contracts/token-erc20\";\nimport { TokenERC20 } from \"contracts\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractRoles } from \"../core/classes/contract-roles\";\nimport {\n  IStorage,\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n} from \"../core\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { TokenMintInput } from \"../schema/tokens/token\";\nimport {\n  GasCostEstimator,\n  ContractInterceptor,\n  ContractEncoder,\n  ContractEvents,\n  ContractPlatformFee,\n  Erc20,\n} from \"../core/classes\";\nimport { Amount, CurrencyValue } from \"../types\";\nimport { TokenERC20History } from \"../core/classes/erc-20-history\";\nimport { Erc20SignatureMinting } from \"../core/classes/erc-20-signature-minting\";\nimport { getRoleHash } from \"../common\";\nimport { Erc20Mintable } from \"../core/classes/erc-20-mintable\";\nimport { Erc20BatchMintable } from \"../core/classes/erc-20-batch-mintable\";\nimport { constants } from \"ethers\";\nimport { ContractAnalytics } from \"../core/classes/contract-analytics\";\n\n/**\n * Create a standard crypto token or cryptocurrency.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"rinkeby\");\n * const contract = sdk.getToken(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class Token extends Erc20<TokenERC20> {\n  static contractType = \"token\" as const;\n  static contractRoles = [\"admin\", \"minter\", \"transfer\"] as const;\n  static contractAbi = require(\"../../abis/TokenERC20.json\");\n  /**\n   * @internal\n   */\n  static schema = TokenErc20ContractSchema;\n\n  private _mint = this.mint as Erc20Mintable;\n  private _batchMint = this._mint.batch as Erc20BatchMintable;\n\n  public metadata: ContractMetadata<TokenERC20, typeof Token.schema>;\n  public roles: ContractRoles<TokenERC20, typeof Token.contractRoles[number]>;\n  public encoder: ContractEncoder<TokenERC20>;\n  public estimator: GasCostEstimator<TokenERC20>;\n  public history: TokenERC20History;\n  public events: ContractEvents<TokenERC20>;\n  public platformFee: ContractPlatformFee<TokenERC20>;\n  /**\n   * @internal\n   */\n  public analytics: ContractAnalytics<TokenERC20>;\n  /**\n   * Signature Minting\n   * @remarks Generate tokens that can be minted only with your own signature, attaching your own set of mint conditions.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the tokens\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * ```\n   */\n  public signature: Erc20SignatureMinting;\n  /**\n   * @internal\n   */\n  public interceptor: ContractInterceptor<TokenERC20>;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<TokenERC20>(\n      network,\n      address,\n      Token.contractAbi,\n      options,\n    ),\n  ) {\n    super(contractWrapper, storage, options);\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      Token.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(this.contractWrapper, Token.contractRoles);\n    this.analytics = new ContractAnalytics(this.contractWrapper);\n    this.history = new TokenERC20History(this.contractWrapper, this.analytics);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFee = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.signature = new Erc20SignatureMinting(\n      this.contractWrapper,\n      this.roles,\n    );\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get your wallet voting power for the current checkpoints\n   *\n   * @returns the amount of voting power in tokens\n   */\n  public async getVoteBalance(): Promise<CurrencyValue> {\n    return await this.getVoteBalanceOf(\n      await this.contractWrapper.getSignerAddress(),\n    );\n  }\n\n  public async getVoteBalanceOf(account: string): Promise<CurrencyValue> {\n    return await this.getValue(\n      await this.contractWrapper.readContract.getVotes(account),\n    );\n  }\n\n  /**\n   * Get your voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  public async getDelegation(): Promise<string> {\n    return await this.getDelegationOf(\n      await this.contractWrapper.getSignerAddress(),\n    );\n  }\n\n  /**\n   * Get a specific address voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  public async getDelegationOf(account: string): Promise<string> {\n    return await this.contractWrapper.readContract.delegates(account);\n  }\n\n  /**\n   * Get whether users can transfer tokens from this contract\n   */\n  public async isTransferRestricted(): Promise<boolean> {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(\n      getRoleHash(\"transfer\"),\n      constants.AddressZero,\n    );\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint Tokens for the connected wallet\n   *\n   * @remarks See {@link Token.mintTo}\n   */\n  public async mintToSelf(amount: Amount): Promise<TransactionResult> {\n    return this._mint.to(await this.contractWrapper.getSignerAddress(), amount);\n  }\n\n  /**\n   * Mint Tokens\n   *\n   * @remarks Mint tokens to a specified address.\n   *\n   * @example\n   * ```javascript\n   * const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\n   * const amount = \"1.5\"; // The amount of this token you want to mint\n   *\n   * await contract.mintTo(toAddress, amount);\n   * ```\n   */\n  public async mintTo(to: string, amount: Amount): Promise<TransactionResult> {\n    return this._mint.to(to, amount);\n  }\n\n  /**\n   * Mint Tokens To Many Wallets\n   *\n   * @remarks Mint tokens to many wallets in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 0.2, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 1.4,\n   *  }\n   * ]\n   *\n   * await contract.mintBatchTo(data);\n   * ```\n   */\n  public async mintBatchTo(args: TokenMintInput[]): Promise<TransactionResult> {\n    return this._batchMint.to(args);\n  }\n\n  /**\n   * Lets you delegate your voting power to the delegateeAddress\n   *\n   * @param delegateeAddress - delegatee wallet address\n   * @alpha\n   */\n  public async delegateTo(\n    delegateeAddress: string,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"delegate\", [\n        delegateeAddress,\n      ]),\n    };\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burn(amount);\n   * ```\n   */\n  public async burn(amount: Amount): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"burn\", [\n        await this.normalizeAmount(amount),\n      ]),\n    };\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnFrom(holderAddress, amount);\n   * ```\n   */\n  public async burnFrom(\n    holder: string,\n    amount: Amount,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"burnFrom\", [\n        holder,\n        await this.normalizeAmount(amount),\n      ]),\n    };\n  }\n}\n","import { DropERC20 } from \"contracts\";\nimport {\n  IStorage,\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n} from \"../core\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { BigNumberish, BytesLike, constants, utils } from \"ethers\";\nimport {\n  GasCostEstimator,\n  ContractEncoder,\n  ContractInterceptor,\n  ContractPlatformFee,\n  ContractPrimarySale,\n  ContractMetadata,\n  ContractRoles,\n  DropClaimConditions,\n  Erc20,\n} from \"../core/classes\";\nimport { Amount, ClaimVerification, CurrencyValue } from \"../types\";\nimport { DropErc20ContractSchema } from \"../schema/contracts/drop-erc20\";\n\nimport { prepareClaim } from \"../common/claim-conditions\";\nimport { getRoleHash } from \"../common\";\nimport { ContractAnalytics } from \"../core/classes/contract-analytics\";\n\n/**\n * Create a Drop contract for a standard crypto token or cryptocurrency.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"rinkeby\");\n * const contract = sdk.getTokenDrop(\"{{contract_address}}\");\n * ```\n *\n */\nexport class TokenDrop extends Erc20<DropERC20> {\n  static contractType = \"token-drop\" as const;\n  static contractRoles = [\"admin\", \"transfer\"] as const;\n  static contractAbi = require(\"../../abis/DropERC20.json\");\n  /**\n   * @internal\n   */\n  static schema = DropErc20ContractSchema;\n\n  public metadata: ContractMetadata<DropERC20, typeof TokenDrop.schema>;\n  public roles: ContractRoles<\n    DropERC20,\n    typeof TokenDrop.contractRoles[number]\n  >;\n  public encoder: ContractEncoder<DropERC20>;\n  public estimator: GasCostEstimator<DropERC20>;\n  public sales: ContractPrimarySale<DropERC20>;\n  public platformFee: ContractPlatformFee<DropERC20>;\n  /**\n   * @internal\n   */\n  public analytics: ContractAnalytics<DropERC20>;\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim Tokens, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 3117.42, // limit how many tokens are released in this presale\n   *     price: 0.001, // presale price per token\n   *     snapshot: ['0x...', '0x...'], // limit claiming to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.008, // public sale price per token\n   *   }\n   * ]);\n   * await contract.claimConditions.set(claimConditions);\n   * ```\n   */\n  public claimConditions: DropClaimConditions<DropERC20>;\n  /**\n   * @internal\n   */\n  public interceptor: ContractInterceptor<DropERC20>;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<DropERC20>(\n      network,\n      address,\n      TokenDrop.contractAbi,\n      options,\n    ),\n  ) {\n    super(contractWrapper, storage, options);\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      TokenDrop.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(\n      this.contractWrapper,\n      TokenDrop.contractRoles,\n    );\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.platformFee = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.analytics = new ContractAnalytics(this.contractWrapper);\n    this.claimConditions = new DropClaimConditions<DropERC20>(\n      this.contractWrapper,\n      this.metadata,\n      this.storage,\n    );\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get your wallet voting power for the current checkpoints\n   *\n   * @returns the amount of voting power in tokens\n   */\n  public async getVoteBalance(): Promise<CurrencyValue> {\n    return await this.getVoteBalanceOf(\n      await this.contractWrapper.getSignerAddress(),\n    );\n  }\n\n  public async getVoteBalanceOf(account: string): Promise<CurrencyValue> {\n    return await this.getValue(\n      await this.contractWrapper.readContract.getVotes(account),\n    );\n  }\n\n  /**\n   * Get your voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  public async getDelegation(): Promise<string> {\n    return await this.getDelegationOf(\n      await this.contractWrapper.getSignerAddress(),\n    );\n  }\n\n  /**\n   * Get a specific address voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  public async getDelegationOf(account: string): Promise<string> {\n    return await this.contractWrapper.readContract.delegates(account);\n  }\n\n  /**\n   * Get whether users can transfer tokens from this contract\n   */\n  public async isTransferRestricted(): Promise<boolean> {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(\n      getRoleHash(\"transfer\"),\n      constants.AddressZero,\n    );\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Claim a certain amount of tokens\n   * @remarks See {@link TokenDrop.claimTo}\n   * @param amount - the amount of tokens to mint\n   * @param proofs - Optional claim proofs\n   */\n  public async claim(\n    amount: Amount,\n    proofs: BytesLike[] = [utils.hexZeroPad([0], 32)],\n  ): Promise<TransactionResult> {\n    return this.claimTo(\n      await this.contractWrapper.getSignerAddress(),\n      amount,\n      proofs,\n    );\n  }\n\n  /**\n   * Claim a certain amount of tokens to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim Tokens.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 42.69; // how many tokens you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param amount - Quantity of the tokens you want to claim\n   * @param proofs - Optional Array of proofs\n   *\n   * @returns - The transaction receipt\n   */\n  public async claimTo(\n    destinationAddress: string,\n    amount: Amount,\n    proofs: BytesLike[] = [utils.hexZeroPad([0], 32)],\n  ): Promise<TransactionResult> {\n    const quantity = await this.normalizeAmount(amount);\n    const claimVerification = await this.prepareClaim(quantity, proofs);\n    const receipt = await this.contractWrapper.sendTransaction(\n      \"claim\",\n      [\n        destinationAddress,\n        quantity,\n        claimVerification.currencyAddress,\n        claimVerification.price,\n        claimVerification.proofs,\n        claimVerification.maxQuantityPerTransaction,\n      ],\n      claimVerification.overrides,\n    );\n    return { receipt };\n  }\n\n  /**\n   * Lets you delegate your voting power to the delegateeAddress\n   *\n   * @param delegateeAddress - delegatee wallet address\n   * @alpha\n   */\n  public async delegateTo(\n    delegateeAddress: string,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"delegate\", [\n        delegateeAddress,\n      ]),\n    };\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burn(amount);\n   * ```\n   */\n  public async burn(amount: Amount): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"burn\", [\n        await this.normalizeAmount(amount),\n      ]),\n    };\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnFrom(holderAddress, amount);\n   * ```\n   */\n  public async burnFrom(\n    holder: string,\n    amount: Amount,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"burnFrom\", [\n        holder,\n        await this.normalizeAmount(amount),\n      ]),\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Returns proofs and the overrides required for the transaction.\n   *\n   * @returns - `overrides` and `proofs` as an object.\n   */\n  private async prepareClaim(\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [utils.hexZeroPad([0], 32)],\n  ): Promise<ClaimVerification> {\n    return prepareClaim(\n      quantity,\n      await this.claimConditions.getActive(),\n      (await this.metadata.get()).merkle,\n      await this.contractWrapper.readContract.decimals(),\n      this.contractWrapper,\n      this.storage,\n      proofs,\n    );\n  }\n}\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonPrimarySaleSchema,\n  CommonSymbolSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\nimport { MerkleSchema } from \"./common/snapshots\";\n\nexport const DropErc20ContractInput =\n  CommonContractSchema.merge(MerkleSchema).merge(CommonSymbolSchema);\n\nexport const DropErc20ContractOutput =\n  CommonContractOutputSchema.merge(MerkleSchema).merge(CommonSymbolSchema);\n\nexport const DropErc20ContractDeploy = DropErc20ContractInput.merge(\n  CommonPlatformFeeSchema,\n)\n  .merge(CommonPrimarySaleSchema)\n  .merge(CommonTrustedForwarderSchema);\n\nexport const DropErc20ContractSchema = {\n  deploy: DropErc20ContractDeploy,\n  output: DropErc20ContractOutput,\n  input: DropErc20ContractInput,\n};\n","import { IERC20, VoteERC20 } from \"contracts\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport {\n  ContractInterceptor,\n  IStorage,\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n  TransactionResultWithId,\n} from \"../core\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { VoteContractSchema } from \"../schema/contracts/vote\";\nimport {\n  Proposal,\n  ProposalExecutable,\n  ProposalVote,\n  VoteSettings,\n} from \"../types/vote\";\nimport { fetchCurrencyMetadata, fetchCurrencyValue } from \"../common/currency\";\nimport { BigNumber, BigNumberish, Contract, ethers } from \"ethers\";\nimport { VoteType } from \"../enums\";\nimport deepEqual from \"deep-equal\";\nimport { CurrencyValue } from \"../types/currency\";\nimport { UpdateableNetwork } from \"../core/interfaces/contract\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { GasCostEstimator } from \"../core/classes\";\nimport { ContractEvents } from \"../core/classes/contract-events\";\nimport { ProposalCreatedEvent } from \"contracts/VoteERC20\";\nimport ERC20Abi from \"../../abis/IERC20.json\";\nimport { ContractAnalytics } from \"../core/classes/contract-analytics\";\n\n/**\n * Create a decentralized organization for token holders to vote on proposals.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"rinkeby\");\n * const contract = sdk.getVote(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class Vote implements UpdateableNetwork {\n  static contractType = \"vote\" as const;\n  static contractAbi = require(\"../../abis/VoteERC20.json\");\n  /**\n   * @internal\n   */\n  static schema = VoteContractSchema;\n\n  private contractWrapper: ContractWrapper<VoteERC20>;\n  private storage: IStorage;\n\n  public metadata: ContractMetadata<VoteERC20, typeof Vote.schema>;\n  public encoder: ContractEncoder<VoteERC20>;\n  public estimator: GasCostEstimator<VoteERC20>;\n  public events: ContractEvents<VoteERC20>;\n  /**\n   * @internal\n   */\n  public analytics: ContractAnalytics<VoteERC20>;\n  /**\n   * @internal\n   */\n  public interceptor: ContractInterceptor<VoteERC20>;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<VoteERC20>(\n      network,\n      address,\n      Vote.contractAbi,\n      options,\n    ),\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      Vote.schema,\n      this.storage,\n    );\n    this.analytics = new ContractAnalytics(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n\n  onNetworkUpdated(network: NetworkOrSignerOrProvider) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a proposal by id.\n   *\n   * @param proposalId - The proposal id to get.\n   * @returns - The proposal.\n   */\n  public async get(proposalId: BigNumberish): Promise<Proposal> {\n    const all = await this.getAll();\n    const proposals = all.filter((p) =>\n      deepEqual(BigNumber.from(p.proposalId), BigNumber.from(proposalId)),\n    );\n    if (proposals.length === 0) {\n      throw new Error(\"proposal not found\");\n    }\n    return proposals[0];\n  }\n\n  /**\n   * Get All Proposals\n   *\n   * @remarks Get all the proposals in this contract.\n   *\n   * @example\n   * ```javascript\n   * const proposals = await contract.getAll();\n   * console.log(proposals);\n   * ```\n   *\n   * @returns - All the proposals in the contract.\n   */\n  public async getAll(): Promise<Proposal[]> {\n    return Promise.all(\n      (await this.contractWrapper.readContract.getAllProposals()).map(\n        async (data) => ({\n          proposalId: data.proposalId,\n          proposer: data.proposer,\n          description: data.description,\n          startBlock: data.startBlock,\n          endBlock: data.endBlock,\n          state: await this.contractWrapper.readContract.state(data.proposalId),\n          votes: await this.getProposalVotes(data.proposalId),\n          executions: data[3].map((c, i) => ({\n            toAddress: data.targets[i],\n            nativeTokenValue: c,\n            transactionData: data.calldatas[i],\n          })),\n        }),\n      ),\n    );\n  }\n\n  /**\n   * Get the votes for a specific proposal\n   * @param proposalId - the proposalId\n   */\n  public async getProposalVotes(\n    proposalId: BigNumber,\n  ): Promise<ProposalVote[]> {\n    const votes = await this.contractWrapper.readContract.proposalVotes(\n      proposalId,\n    );\n    return [\n      {\n        type: VoteType.Against,\n        label: \"Against\",\n        count: votes.againstVotes,\n      },\n      {\n        type: VoteType.For,\n        label: \"For\",\n        count: votes.forVotes,\n      },\n      {\n        type: VoteType.Abstain,\n        label: \"Abstain\",\n        count: votes.abstainVotes,\n      },\n    ];\n  }\n\n  /**\n   * Check If Wallet Voted\n   *\n   * @remarks Check if a specified wallet has voted a specific proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * // The address of the wallet you want to check to see if they voted\n   * const address = \"{{wallet_address}}\";\n   *\n   * await contract.hasVoted(proposalId, address);\n   * ```\n   *\n   * @param proposalId - The unique identifier of a proposal .\n   * @param account - (optional) wallet account address. Defaults to connected signer.\n   * @returns - True if the account has already voted on the proposal.\n   */\n  public async hasVoted(\n    proposalId: string,\n    account?: string,\n  ): Promise<boolean> {\n    if (!account) {\n      account = await this.contractWrapper.getSignerAddress();\n    }\n    return this.contractWrapper.readContract.hasVoted(proposalId, account);\n  }\n\n  /**\n   * Can Execute\n   *\n   * @remarks Check if a proposal can be executed (if the proposal has succeeded).\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * const canExecute = await contract.canExecute(proposalId);\n   * console.log(canExecute);\n   * ```\n   *\n   * @param proposalId - The proposal ID to check.\n   * @returns - True if the proposal can be executed, false otherwise.\n   */\n  public async canExecute(proposalId: string): Promise<boolean> {\n    await this.ensureExists(proposalId);\n\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map((p) => p.toAddress);\n    const values = proposal.executions.map((p) => p.nativeTokenValue);\n    const datas = proposal.executions.map((p) => p.transactionData);\n    const descriptionHash = ethers.utils.id(proposal.description);\n    try {\n      await this.contractWrapper\n        .callStatic()\n        .execute(tos, values, datas, descriptionHash);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Check the balance of the project wallet in the native token of the chain\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  public async balance(): Promise<CurrencyValue> {\n    const balance = await this.contractWrapper.readContract.provider.getBalance(\n      this.contractWrapper.readContract.address,\n    );\n    return {\n      name: \"\",\n      symbol: \"\",\n      decimals: 18,\n      value: balance,\n      displayValue: ethers.utils.formatUnits(balance, 18),\n    };\n  }\n\n  /**\n   * Check the balance of the project wallet in a particular\n   * ERC20 token contract\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  public async balanceOfToken(tokenAddress: string): Promise<CurrencyValue> {\n    const erc20 = new Contract(\n      tokenAddress,\n      ERC20Abi,\n      this.contractWrapper.getProvider(),\n    ) as IERC20;\n    return await fetchCurrencyValue(\n      this.contractWrapper.getProvider(),\n      tokenAddress,\n      await erc20.balanceOf(this.contractWrapper.readContract.address),\n    );\n  }\n\n  /**\n   * Find a proposal by its id.\n   *\n   * @internal\n   * @param proposalId - Proposal to check for\n   */\n  private async ensureExists(proposalId: string): Promise<void> {\n    try {\n      await this.contractWrapper.readContract.state(proposalId);\n    } catch (e) {\n      throw Error(`Proposal ${proposalId} not found`);\n    }\n  }\n\n  /**\n   * Get the Vote contract configuration\n   */\n  public async settings(): Promise<VoteSettings> {\n    const [\n      votingDelay,\n      votingPeriod,\n      votingTokenAddress,\n      votingQuorumFraction,\n      proposalTokenThreshold,\n    ] = await Promise.all([\n      this.contractWrapper.readContract.votingDelay(),\n      this.contractWrapper.readContract.votingPeriod(),\n      this.contractWrapper.readContract.token(),\n      this.contractWrapper.readContract.quorumNumerator(),\n      this.contractWrapper.readContract.proposalThreshold(),\n    ]);\n    const votingTokenMetadata = await fetchCurrencyMetadata(\n      this.contractWrapper.getProvider(),\n      votingTokenAddress,\n    );\n    return {\n      votingDelay: votingDelay.toString(),\n      votingPeriod: votingPeriod.toString(),\n      votingTokenAddress,\n      votingTokenMetadata,\n      votingQuorumFraction: votingQuorumFraction.toString(),\n      proposalTokenThreshold: proposalTokenThreshold.toString(),\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Proposal\n   *\n   * @remarks Create a new proposal for token holders to vote on.\n   *\n   * @example\n   * ```javascript\n   * // The description of the proposal you want to pass\n   * const description = \"This is a great proposal - vote for it!\"\n   * // You can (optionally) pass in contract calls that will get executed when the proposal is executed.\n   * const executions = [\n   *   {\n   *     // The contract you want to make a call to\n   *     toAddress: \"0x...\",\n   *     // The amount of the native currency to send in this transaction\n   *     nativeTokenValue: 0,\n   *     // Transaction data that will be executed when the proposal is executed\n   *     // This is an example transfer transaction with a token contract (which you would need to setup in code)\n   *     transactionData: tokenContract.encoder.encode(\n   *       \"transfer\", [\n   *         fromAddress,\n   *         amount,\n   *       ]\n   *     ),\n   *   }\n   * ]\n   *\n   * const proposal = await contract.propose(description, executions);\n   * ```\n   *\n   * @param description - The description of the proposal.\n   * @param executions - A set of executable transactions that will be run if the proposal is passed and executed.\n   * @returns - The id of the created proposal and the transaction receipt.\n   */\n  public async propose(\n    description: string,\n    executions?: ProposalExecutable[],\n  ): Promise<TransactionResultWithId> {\n    if (!executions) {\n      executions = [\n        {\n          toAddress: this.contractWrapper.readContract.address,\n          nativeTokenValue: 0,\n          transactionData: \"0x\",\n        },\n      ];\n    }\n    const tos = executions.map((p) => p.toAddress);\n    const values = executions.map((p) => p.nativeTokenValue);\n    const datas = executions.map((p) => p.transactionData);\n    const receipt = await this.contractWrapper.sendTransaction(\"propose\", [\n      tos,\n      values,\n      datas,\n      description,\n    ]);\n    const event = this.contractWrapper.parseLogs<ProposalCreatedEvent>(\n      \"ProposalCreated\",\n      receipt?.logs,\n    );\n    return {\n      id: event[0].args.proposalId,\n      receipt,\n    };\n  }\n\n  /**\n   * Vote\n   *\n   * @remarks Vote on an active proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to vote on\n   * const proposalId = \"0\";\n   * // The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\n   * const voteType = VoteType.For;\n   * // The (optional) reason for the vote\n   * const reason = \"I like this proposal!\";\n   *\n   * await contract.vote(proposalId, voteType, reason);\n   * ```\n   * @param proposalId - The proposal to cast a vote on.\n   * @param voteType - The position the voter is taking on their vote.\n   * @param reason - (optional) The reason for the vote.\n   */\n  public async vote(\n    proposalId: string,\n    voteType: VoteType,\n    reason = \"\",\n  ): Promise<TransactionResult> {\n    await this.ensureExists(proposalId);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"castVoteWithReason\",\n        [proposalId, voteType, reason],\n      ),\n    };\n  }\n\n  /**\n   * Execute Proposal\n   *\n   * @remarks Execute the related transactions for a proposal if the proposal succeeded.\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID ofthe proposal you want to execute\n   * const proposalId = \"0\"\n   * await contract.execute(proposalId);\n   * ```\n   *\n   * @param proposalId - The proposal id to execute.\n   */\n  public async execute(proposalId: string): Promise<TransactionResult> {\n    await this.ensureExists(proposalId);\n\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map((p) => p.toAddress);\n    const values = proposal.executions.map((p) => p.nativeTokenValue);\n    const datas = proposal.executions.map((p) => p.transactionData);\n    const descriptionHash = ethers.utils.id(proposal.description);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"execute\", [\n        tos,\n        values,\n        datas,\n        descriptionHash,\n      ]),\n    };\n  }\n}\n","import { UpdateableNetwork } from \"../core/interfaces/contract\";\nimport { IERC20, Split as SplitContract } from \"contracts\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport {\n  ContractInterceptor,\n  IStorage,\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n} from \"../core\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { CurrencyValue } from \"../types/currency\";\nimport { fetchCurrencyValue } from \"../common/currency\";\nimport { BigNumber, Contract } from \"ethers\";\nimport { SplitRecipient } from \"../types/SplitRecipient\";\nimport { SplitsContractSchema } from \"../schema/contracts/splits\";\nimport { GasCostEstimator } from \"../core/classes\";\nimport { ContractEvents } from \"../core/classes/contract-events\";\nimport ERC20Abi from \"../../abis/IERC20.json\";\nimport { ContractAnalytics } from \"../core/classes/contract-analytics\";\n\n/**\n * Create custom royalty splits to distribute funds.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"rinkeby\");\n * const contract = sdk.getSplit(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class Split implements UpdateableNetwork {\n  static contractType = \"split\" as const;\n  static contractAbi = require(\"../../abis/Split.json\");\n  /**\n   * @internal\n   */\n  static schema = SplitsContractSchema;\n\n  private contractWrapper: ContractWrapper<SplitContract>;\n  private storage: IStorage;\n\n  public metadata: ContractMetadata<SplitContract, typeof Split.schema>;\n  public encoder: ContractEncoder<SplitContract>;\n  public estimator: GasCostEstimator<SplitContract>;\n  public events: ContractEvents<SplitContract>;\n  /**\n   * @internal\n   */\n  public interceptor: ContractInterceptor<SplitContract>;\n  /**\n   * @internal\n   */\n  public analytics: ContractAnalytics<SplitContract>;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<SplitContract>(\n      network,\n      address,\n      Split.contractAbi,\n      options,\n    ),\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      Split.schema,\n      this.storage,\n    );\n    this.analytics = new ContractAnalytics(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n\n  onNetworkUpdated(network: NetworkOrSignerOrProvider) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get Recipients of this splits contract\n   *\n   * @remarks Get the data about the shares of every split recipient on the contract\n   *\n   * @example\n   * ```javascript\n   * const recipients = await contract.getAllRecipients();\n   * console.log(recipients);\n   * ```\n   */\n  public async getAllRecipients(): Promise<SplitRecipient[]> {\n    const recipients: SplitRecipient[] = [];\n    let index = BigNumber.from(0);\n    const totalRecipients =\n      await this.contractWrapper.readContract.payeeCount();\n    while (index.lt(totalRecipients)) {\n      try {\n        const recipientAddress = await this.contractWrapper.readContract.payee(\n          index,\n        );\n        recipients.push(\n          await this.getRecipientSplitPercentage(recipientAddress),\n        );\n        index = index.add(1);\n      } catch (err: any) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\n          \"method\" in err &&\n          (err[\"method\"] as string).toLowerCase().includes(\"payee(uint256)\")\n        ) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n    return recipients;\n  }\n\n  /**\n   * Returns all the recipients and their balances in the native currency.\n   *\n   * @returns A map of recipient addresses to their balances in the native currency.\n   */\n  public async balanceOfAllRecipients() {\n    const recipients = await this.getAllRecipients();\n    const balances: { [key: string]: BigNumber } = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOf(recipient.address);\n    }\n    return balances;\n  }\n\n  /**\n   * Returns all the recipients and their balances in a non-native currency.\n   *\n   * @param tokenAddress - The address of the currency to check the balances in.\n   * @returns A map of recipient addresses to their balances in the specified currency.\n   */\n  public async balanceOfTokenAllRecipients(tokenAddress: string) {\n    const recipients = await this.getAllRecipients();\n    const balances: { [key: string]: CurrencyValue } = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOfToken(\n        recipient.address,\n        tokenAddress,\n      );\n    }\n    return balances;\n  }\n\n  /**\n   * Get Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the native currency held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * const funds = await contract.balanceOf(address);\n   * console.log(funds);\n   * ```\n   */\n  public async balanceOf(address: string): Promise<BigNumber> {\n    const walletBalance =\n      await this.contractWrapper.readContract.provider.getBalance(\n        this.getAddress(),\n      );\n    const totalReleased = await this.contractWrapper.readContract[\n      \"totalReleased()\"\n    ]();\n    const totalReceived = walletBalance.add(totalReleased);\n\n    return this._pendingPayment(\n      address,\n      totalReceived,\n      await this.contractWrapper.readContract[\"released(address)\"](address),\n    );\n  }\n\n  /**\n   * Get non-native Token Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * // The address of the currency to check the contracts funds of\n   * const tokenAddress = \"0x...\"\n   * const funds = await contract.balanceOfToken(address, tokenAddress);\n   * console.log(funds);\n   * ```\n   */\n  public async balanceOfToken(\n    walletAddress: string,\n    tokenAddress: string,\n  ): Promise<CurrencyValue> {\n    const erc20 = new Contract(\n      tokenAddress,\n      ERC20Abi,\n      this.contractWrapper.getProvider(),\n    ) as IERC20;\n    const walletBalance = await erc20.balanceOf(this.getAddress());\n    const totalReleased = await this.contractWrapper.readContract[\n      \"totalReleased(address)\"\n    ](tokenAddress);\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(\n      walletAddress,\n      totalReceived,\n      await this.contractWrapper.readContract[\"released(address,address)\"](\n        tokenAddress,\n        walletAddress,\n      ),\n    );\n    return await fetchCurrencyValue(\n      this.contractWrapper.getProvider(),\n      tokenAddress,\n      value,\n    );\n  }\n\n  /**\n   * Get the % of funds owed to a given address\n   * @param address - the address to check percentage of\n   */\n  public async getRecipientSplitPercentage(\n    address: string,\n  ): Promise<SplitRecipient> {\n    const [totalShares, walletsShares] = await Promise.all([\n      this.contractWrapper.readContract.totalShares(),\n      this.contractWrapper.readContract.shares(address),\n    ]);\n    // We convert to basis points to avoid floating point loss of precision\n    return {\n      address,\n      splitPercentage:\n        walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() /\n        1e5,\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Withdraw Funds\n   * @remarks Triggers a transfer to account of the amount of native currency they are owed.\n   *\n   * @example\n   * ```javascript\n   * // the wallet address that wants to withdraw their funds\n   * const walletAddress = \"{{wallet_address}}\"\n   * await contract.withdraw(walletAddress);\n   * ```\n   *\n   * @param walletAddress - The address to distributes the amount to\n   */\n  public async withdraw(walletAddress: string): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"release(address)\", [\n        walletAddress,\n      ]),\n    };\n  }\n\n  /**\n   * Triggers a transfer to account of the amount of a given currency they are owed.\n   *\n   * @param walletAddress - The address to distributes the amount to\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  public async withdrawToken(\n    walletAddress: string,\n    tokenAddress: string,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"release(address,address)\",\n        [tokenAddress, walletAddress],\n      ),\n    };\n  }\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * await contract.distribute();\n   * ```\n   */\n  public async distribute(): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"distribute()\", []),\n    };\n  }\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * // The address of the currency to distribute funds\n   * const tokenAddress = \"0x...\"\n   * await contract.distributeToken(tokenAddress);\n   * ```\n   *\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  public async distributeToken(\n    tokenAddress: string,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"distribute(address)\",\n        [tokenAddress],\n      ),\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  private async _pendingPayment(\n    address: string,\n    totalReceived: BigNumber,\n    alreadyReleased: BigNumber,\n  ): Promise<BigNumber> {\n    const addressReceived = totalReceived.mul(\n      await this.contractWrapper.readContract.shares(address),\n    );\n    const totalRoyaltyAvailable = addressReceived.div(\n      await this.contractWrapper.readContract.totalShares(),\n    );\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n}\n","import { Marketplace as MarketplaceContract } from \"contracts\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractRoles } from \"../core/classes/contract-roles\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport {\n  IStorage,\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n} from \"../core\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { UpdateableNetwork } from \"../core/interfaces/contract\";\nimport { MarketplaceContractSchema } from \"../schema/contracts/marketplace\";\nimport { AuctionListing, DirectListing } from \"../types/marketplace\";\nimport { ListingType } from \"../enums\";\nimport { BigNumber, BigNumberish, constants } from \"ethers\";\nimport invariant from \"tiny-invariant\";\nimport { ListingNotFoundError } from \"../common\";\nimport { MarketplaceFilter } from \"../types/marketplace/MarketPlaceFilter\";\nimport { getRoleHash } from \"../common/role\";\nimport { MarketplaceDirect } from \"../core/classes/marketplace-direct\";\nimport { MarketplaceAuction } from \"../core/classes/marketplace-auction\";\nimport { DEFAULT_QUERY_ALL_COUNT } from \"../types/QueryParams\";\nimport {\n  GasCostEstimator,\n  ContractInterceptor,\n  ContractEvents,\n  ContractPlatformFee,\n} from \"../core/classes\";\nimport { ContractAnalytics } from \"../core/classes/contract-analytics\";\n\n/**\n * Create your own whitelabel marketplace that enables users to buy and sell any digital assets.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"rinkeby\");\n * const contract = sdk.getMarketplace(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class Marketplace implements UpdateableNetwork {\n  static contractType = \"marketplace\" as const;\n  static contractRoles = [\"admin\", \"lister\", \"asset\"] as const;\n  static contractAbi = require(\"../../abis/Marketplace.json\");\n  /**\n   * @internal\n   */\n  static schema = MarketplaceContractSchema;\n\n  private contractWrapper: ContractWrapper<MarketplaceContract>;\n  private storage: IStorage;\n\n  public encoder: ContractEncoder<MarketplaceContract>;\n  public events: ContractEvents<MarketplaceContract>;\n  public estimator: GasCostEstimator<MarketplaceContract>;\n  public platformFee: ContractPlatformFee<MarketplaceContract>;\n  /**\n   * @internal\n   */\n  public analytics: ContractAnalytics<MarketplaceContract>;\n  public metadata: ContractMetadata<\n    MarketplaceContract,\n    typeof Marketplace.schema\n  >;\n  public roles: ContractRoles<\n    MarketplaceContract,\n    typeof Marketplace.contractRoles[number]\n  >;\n  /**\n   * @internal\n   */\n  public interceptor: ContractInterceptor<MarketplaceContract>;\n  /**\n   * Direct listings\n   * @remarks Create and manage direct listings in your marketplace.\n   * @example\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the NFT contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *  // when should the listing open up for offers\n   *   startTimestamp: new Date(),\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much the asset will be sold for\n   *   buyoutPricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.direct.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const listingId = tx.id; // the id of the newly created listing\n   *\n   * // And on the buyers side:\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   * await contract.direct.buyoutListing(listingId, quantityDesired);\n   * ```\n   */\n  public direct: MarketplaceDirect;\n  /**\n   * Auctions\n   * @remarks Create and manage auctions in your marketplace.\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *  // when should the listing open up for offers\n   *   startTimestamp: new Date(),\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutPricePerToken: \"10\",\n   *   // the minimum bid that will be accepted for the token\n   *   reservePricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.auction.createListing(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const listingId = tx.id; // the id of the newly created listing\n   *\n   * // And on the buyers side:\n   * // The price you are willing to bid for a single token of the listing\n   * const pricePerToken = 2.6;\n   * await contract.auction.makeBid(listingId, pricePerToken);\n   * ```\n   */\n  public auction: MarketplaceAuction;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<MarketplaceContract>(\n      network,\n      address,\n      Marketplace.contractAbi,\n      options,\n    ),\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      Marketplace.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(\n      this.contractWrapper,\n      Marketplace.contractRoles,\n    );\n    this.analytics = new ContractAnalytics(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.direct = new MarketplaceDirect(this.contractWrapper, this.storage);\n    this.auction = new MarketplaceAuction(this.contractWrapper, this.storage);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFee = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n\n  onNetworkUpdated(network: NetworkOrSignerOrProvider) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Convenience function to get either a direct or auction listing\n   *\n   * @param listingId - the listing id\n   * @returns either a direct or auction listing\n   */\n  public async getListing(\n    listingId: BigNumberish,\n  ): Promise<AuctionListing | DirectListing> {\n    const listing = await this.contractWrapper.readContract.listings(listingId);\n    if (listing.assetContract === constants.AddressZero) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n    switch (listing.listingType) {\n      case ListingType.Auction: {\n        return await this.auction.mapListing(listing);\n      }\n      case ListingType.Direct: {\n        return await this.direct.mapListing(listing);\n      }\n      default: {\n        throw new Error(`Unknown listing type: ${listing.listingType}`);\n      }\n    }\n  }\n\n  /**\n   * Get all active listings\n   *\n   * @remarks Fetch all the active listings from this marketplace contract. An active listing means it can be bought or bid on.\n   * @example\n   * ```javascript\n   * const listings = await contract.getActiveListings();\n   * const priceOfFirstActiveListing = listings[0].price;\n   * ```\n   * @param filter - optional filter parameters\n   */\n  public async getActiveListings(\n    filter?: MarketplaceFilter,\n  ): Promise<(AuctionListing | DirectListing)[]> {\n    const rawListings = await this.getAllListingsNoFilter();\n    const filtered = this.applyFilter(rawListings, filter);\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    return filtered.filter((l) => {\n      return (\n        (l.type === ListingType.Auction &&\n          BigNumber.from(l.endTimeInEpochSeconds).gt(now) &&\n          BigNumber.from(l.startTimeInEpochSeconds).lte(now)) ||\n        (l.type === ListingType.Direct && l.quantity > 0)\n      );\n    });\n  }\n\n  /**\n   * Get all the listings\n   *\n   * @remarks Fetch all the listings from this marketplace contract, including sold ones.\n   * @example\n   * ```javascript\n   * const listings = await contract.getAllListings();\n   * const priceOfFirstListing = listings[0].price;\n   * ```\n   *\n   * @param filter - optional filter parameters\n   */\n  public async getAllListings(\n    filter?: MarketplaceFilter,\n  ): Promise<(AuctionListing | DirectListing)[]> {\n    const rawListings = await this.getAllListingsNoFilter();\n    return this.applyFilter(rawListings, filter);\n  }\n\n  /**\n   * @internal\n   */\n  public getAll = this.getAllListings;\n\n  /**\n   * Get the total number of Listings\n   * @returns the total number listings on the marketplace\n   * @public\n   */\n  public async getTotalCount(): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.totalListings();\n  }\n\n  /**\n   * Get whether listing is restricted only to addresses with the Lister role\n   */\n  public async isRestrictedToListerRoleOnly(): Promise<boolean> {\n    const anyoneCanList = await this.contractWrapper.readContract.hasRole(\n      getRoleHash(\"lister\"),\n      constants.AddressZero,\n    );\n    return !anyoneCanList;\n  }\n\n  /**\n   * Get the buffer in basis points between offers\n   */\n  public async getBidBufferBps(): Promise<BigNumber> {\n    return this.contractWrapper.readContract.bidBufferBps();\n  }\n\n  /**\n   * get the buffer time in seconds between offers\n   */\n  public async getTimeBufferInSeconds(): Promise<BigNumber> {\n    return this.contractWrapper.readContract.timeBuffer();\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Purchase NFTs\n   * @remarks Buy a Direct or Auction listing on your marketplace.\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.buyoutListing(listingId, quantityDesired);\n   * ```\n   * @param listingId - the listing ID of the listing you want to buy\n   * @param quantityDesired - the quantity that you want to buy (for ERC1155 tokens)\n   * @param receiver - optional receiver of the bought listing if different from the connected wallet (for direct listings only)\n   */\n  public async buyoutListing(\n    listingId: BigNumberish,\n    quantityDesired?: BigNumberish,\n    receiver?: string,\n  ): Promise<TransactionResult> {\n    const listing = await this.contractWrapper.readContract.listings(listingId);\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n    switch (listing.listingType) {\n      case ListingType.Direct: {\n        invariant(\n          quantityDesired !== undefined,\n          \"quantityDesired is required when buying out a direct listing\",\n        );\n        return await this.direct.buyoutListing(\n          listingId,\n          quantityDesired,\n          receiver,\n        );\n      }\n      case ListingType.Auction: {\n        return await this.auction.buyoutListing(listingId);\n      }\n      default:\n        throw Error(`Unknown listing type: ${listing.listingType}`);\n    }\n  }\n\n  /**\n   * Set the Auction bid buffer\n   * @remarks A percentage (e.g. 5%) in basis points (5% = 500, 100% = 10000). A new bid is considered to be a winning bid only if its bid amount is at least the bid buffer (e.g. 5%) greater than the previous winning bid. This prevents buyers from making very slightly higher bids to win the auctioned items.\n   * @example\n   * ```javascript\n   * // the bid buffer in basis points\n   * const bufferBps = 500;\n   * await contract.setBidBufferBps(bufferBps);\n   * ```\n   * @param bufferBps - the bps value\n   */\n  public async setBidBufferBps(bufferBps: BigNumberish): Promise<void> {\n    await this.roles.verify(\n      [\"admin\"],\n      await this.contractWrapper.getSignerAddress(),\n    );\n\n    const timeBuffer = await this.getTimeBufferInSeconds();\n    await this.contractWrapper.sendTransaction(\"setAuctionBuffers\", [\n      timeBuffer,\n      BigNumber.from(bufferBps),\n    ]);\n  }\n\n  /**\n   * Set the Auction Time buffer:\n   * @remarks Measured in seconds (e.g. 15 minutes or 900 seconds). If a winning bid is made within the buffer of the auction closing (e.g. 15 minutes within the auction closing), the auction's closing time is increased by the buffer to prevent buyers from making last minute winning bids, and to give time to other buyers to make a higher bid if they wish to.\n   * @example\n   * ```javascript\n   * // the time buffer in seconds\n   * const bufferInSeconds = 60;\n   * await contract.setTimeBufferInSeconds(bufferInSeconds);\n   * ```\n   * @param bufferInSeconds - the seconds value\n   */\n  public async setTimeBufferInSeconds(\n    bufferInSeconds: BigNumberish,\n  ): Promise<void> {\n    await this.roles.verify(\n      [\"admin\"],\n      await this.contractWrapper.getSignerAddress(),\n    );\n\n    const bidBuffer = await this.getBidBufferBps();\n    await this.contractWrapper.sendTransaction(\"setAuctionBuffers\", [\n      BigNumber.from(bufferInSeconds),\n      bidBuffer,\n    ]);\n  }\n\n  /**\n   * Restrict listing NFTs only from the specified NFT contract address.\n   * It is possible to allow listing from multiple contract addresses.\n   * @param contractAddress - the NFT contract address\n   */\n  public async allowListingFromSpecificAssetOnly(contractAddress: string) {\n    const encoded = [];\n    const members = await this.roles.get(\"asset\");\n    if (members.includes(constants.AddressZero)) {\n      encoded.push(\n        this.encoder.encode(\"revokeRole\", [\n          getRoleHash(\"asset\"),\n          constants.AddressZero,\n        ]),\n      );\n    }\n    encoded.push(\n      this.encoder.encode(\"grantRole\", [getRoleHash(\"asset\"), contractAddress]),\n    );\n\n    await this.contractWrapper.multiCall(encoded);\n  }\n\n  /**\n   * Allow listings from any NFT contract\n   */\n  public async allowListingFromAnyAsset() {\n    const encoded = [];\n    const members = await this.roles.get(\"asset\");\n    for (const addr in members) {\n      encoded.push(\n        this.encoder.encode(\"revokeRole\", [getRoleHash(\"asset\"), addr]),\n      );\n    }\n    encoded.push(\n      this.encoder.encode(\"grantRole\", [\n        getRoleHash(\"asset\"),\n        constants.AddressZero,\n      ]),\n    );\n    await this.contractWrapper.multiCall(encoded);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  private async getAllListingsNoFilter(): Promise<\n    (AuctionListing | DirectListing)[]\n  > {\n    const listings = await Promise.all(\n      Array.from(\n        Array(\n          (await this.contractWrapper.readContract.totalListings()).toNumber(),\n        ).keys(),\n      ).map(async (i) => {\n        let listing;\n\n        try {\n          listing = await this.getListing(i);\n        } catch (err) {\n          console.log(`Error fetching listing with id: ${i}`, err);\n          return undefined;\n        }\n\n        if (listing.type === ListingType.Auction) {\n          return listing;\n        }\n\n        const valid = await this.direct.isStillValidListing(listing);\n        if (!valid) {\n          return undefined;\n        }\n\n        return listing;\n      }),\n    );\n    return listings.filter((l) => l !== undefined) as (\n      | AuctionListing\n      | DirectListing\n    )[];\n  }\n\n  private applyFilter(\n    listings: (AuctionListing | DirectListing)[],\n    filter?: MarketplaceFilter,\n  ) {\n    let rawListings = [...listings];\n    const start = BigNumber.from(filter?.start || 0).toNumber();\n    const count = BigNumber.from(\n      filter?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    if (filter) {\n      if (filter.seller) {\n        rawListings = rawListings.filter(\n          (seller) =>\n            seller.sellerAddress.toString().toLowerCase() ===\n            filter?.seller?.toString().toLowerCase(),\n        );\n      }\n      if (filter.tokenContract) {\n        rawListings = rawListings.filter(\n          (tokenContract) =>\n            tokenContract.assetContractAddress.toString().toLowerCase() ===\n            filter?.tokenContract?.toString().toLowerCase(),\n        );\n      }\n\n      if (filter.tokenId !== undefined) {\n        rawListings = rawListings.filter(\n          (tokenContract) =>\n            tokenContract.tokenId.toString() === filter?.tokenId?.toString(),\n        );\n      }\n      rawListings = rawListings.filter((_, index) => index >= start);\n      rawListings = rawListings.slice(0, count);\n    }\n    return rawListings;\n  }\n\n  // TODO: Complete method implementation with subgraph\n  // /**\n  //  * @beta - This method is not yet complete.\n  //  *\n  //  * @param listingId\n  //  * @returns\n  //  */\n  // public async getActiveOffers(listingId: BigNumberish): Promise<Offer[]> {\n  //   const listing = await this.validateDirectListing(BigNumber.from(listingId));\n\n  //   const offers = await this.readOnlyContract.offers(listing.id, \"\");\n\n  //   return await Promise.all(\n  //     offers.map(async (offer: any) => {\n  //       return await this.mapOffer(BigNumber.from(listingId), offer);\n  //     }),\n  //   );\n  // }\n}\n","import { UpdateableNetwork } from \"../core/interfaces/contract\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport {\n  ContractInterceptor,\n  IStorage,\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n  TransactionResultWithId,\n} from \"../core\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { IERC1155, IERC20, Pack as PackContract } from \"contracts\";\nimport { PacksContractSchema } from \"../schema/contracts/packs\";\nimport { ContractRoles } from \"../core/classes/contract-roles\";\nimport { NFTMetadata } from \"../schema/tokens/common\";\nimport { BigNumber, BigNumberish, BytesLike, Contract, ethers } from \"ethers\";\nimport { fetchTokenMetadataForContract } from \"../common/nft\";\nimport {\n  IPackBatchArgs,\n  IPackCreateArgs,\n  PackMetadata,\n  PackMetadataWithBalance,\n  PackNFTMetadata,\n} from \"../types/packs\";\nimport { NotFoundError } from \"../common\";\nimport { CurrencyValue } from \"../types/currency\";\nimport { fetchCurrencyValue } from \"../common/currency\";\nimport { ChainlinkVrf } from \"../constants/chainlink\";\nimport { ContractRoyalty } from \"../core/classes/contract-royalty\";\nimport { GasCostEstimator } from \"../core/classes\";\nimport { ContractEvents } from \"../core/classes/contract-events\";\nimport { PackAddedEvent, PackOpenRequestedEvent } from \"contracts/Pack\";\nimport ERC1155Abi from \"../../abis/IERC1155.json\";\nimport ERC20Abi from \"../../abis/IERC20.json\";\nimport { ContractAnalytics } from \"../core/classes/contract-analytics\";\n\n/**\n * Create lootboxes of NFTs with rarity based open mechanics.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"rinkeby\");\n * const contract = sdk.getPack(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class Pack implements UpdateableNetwork {\n  static contractType = \"pack\" as const;\n  static contractRoles = [\"admin\", \"minter\", \"pauser\", \"transfer\"] as const;\n  static contractAbi = require(\"../../abis/Pack.json\");\n  /**\n   * @internal\n   */\n  static schema = PacksContractSchema;\n\n  private contractWrapper: ContractWrapper<PackContract>;\n  private storage: IStorage;\n\n  public metadata: ContractMetadata<PackContract, typeof Pack.schema>;\n  public roles: ContractRoles<PackContract, typeof Pack.contractRoles[number]>;\n  public encoder: ContractEncoder<PackContract>;\n  public events: ContractEvents<PackContract>;\n  public estimator: GasCostEstimator<PackContract>;\n  /**\n   * @internal\n   */\n  public analytics: ContractAnalytics<PackContract>;\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per pack\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalty.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular pack\n   * contract.royalty.setTokenRoyaltyInfo(packId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n  public royalty: ContractRoyalty<PackContract, typeof Pack.schema>;\n  /**\n   * @internal\n   */\n  public interceptor: ContractInterceptor<PackContract>;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<PackContract>(\n      network,\n      address,\n      Pack.contractAbi,\n      options,\n    ),\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      Pack.schema,\n      this.storage,\n    );\n    this.analytics = new ContractAnalytics(this.contractWrapper);\n    this.roles = new ContractRoles(this.contractWrapper, Pack.contractRoles);\n    this.royalty = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n\n  onNetworkUpdated(network: NetworkOrSignerOrProvider) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a pack by id\n   * @param packId - the id of the pack to fetch\n   * @returns the pack metadata\n   */\n  public async get(packId: BigNumberish): Promise<PackMetadata> {\n    const [meta, state, supply] = await Promise.all([\n      fetchTokenMetadataForContract(\n        this.getAddress(),\n        this.contractWrapper.getProvider(),\n        packId,\n        this.storage,\n      ),\n      this.contractWrapper.readContract.packs(packId),\n      this.contractWrapper.readContract\n        .totalSupply(packId)\n        .catch(() => BigNumber.from(\"0\")),\n    ]);\n    return {\n      id: BigNumber.from(packId).toString(),\n      metadata: meta,\n      creator: state.creator,\n      currentSupply: supply,\n      openStart: state.openStart.gt(0)\n        ? new Date(state.openStart.toNumber() * 1000)\n        : null,\n    };\n  }\n\n  /**\n   * Get Pack Data\n   *\n   * @remarks Get data associated with every pack in this contract.\n   *\n   * @example\n   * ```javascript\n   * const packs = await contract.getAll();\n   * console.log(packs);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  public async getAll(): Promise<PackMetadata[]> {\n    const maxId = (\n      await this.contractWrapper.readContract.nextTokenId()\n    ).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  /**\n   * Get Pack Reward Data\n   *\n   * @remarks Get data associated with the rewards inside a specified pack\n   *\n   * @example\n   * ```javascript\n   * // The pack ID of the pack whos rewards you want to get\n   * const packId = 0;\n   *\n   * const nfts = await contract.getNFTs(packId);\n   * console.log(nfts);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  public async getNFTs(packId: string): Promise<PackNFTMetadata[]> {\n    const packReward =\n      await this.contractWrapper.readContract.getPackWithRewards(packId);\n    if (!packReward.source) {\n      throw new NotFoundError();\n    }\n    const rewards = await Promise.all(\n      packReward.tokenIds.map((tokenId) =>\n        fetchTokenMetadataForContract(\n          packReward.source,\n          this.contractWrapper.getProvider(),\n          tokenId.toString(),\n          this.storage,\n        ),\n      ),\n    );\n    return rewards.map((reward, i) => ({\n      supply: packReward.amountsPacked[i],\n      metadata: reward,\n    }));\n  }\n\n  /**\n   * Get Pack Balance\n   *\n   * @remarks Get a wallets pack balance (number of a specific packs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check pack balance\n   * const address = \"{{wallet_address}}\";\n   * // The token ID of the pack you want to check the wallets balance of\n   * const tokenId = \"0\"\n   *\n   * const balance = await contract.balanceOf(address, tokenId);\n   * console.log(balance);\n   * ```\n   */\n  public async balanceOf(address: string, tokenId: string): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.balanceOf(address, tokenId);\n  }\n\n  public async balance(tokenId: string): Promise<BigNumber> {\n    return await this.balanceOf(\n      await this.contractWrapper.getSignerAddress(),\n      tokenId,\n    );\n  }\n\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.contractWrapper.readContract.isApprovedForAll(\n      address,\n      operator,\n    );\n  }\n\n  public async getLinkBalance(): Promise<CurrencyValue> {\n    const chainId = await this.contractWrapper.getChainID();\n    const chainlink = ChainlinkVrf[chainId];\n    const erc20 = new Contract(\n      chainlink.linkTokenAddress,\n      ERC20Abi,\n      this.contractWrapper.getProvider(),\n    ) as IERC20;\n    return await fetchCurrencyValue(\n      this.contractWrapper.getProvider(),\n      chainlink.linkTokenAddress,\n      await erc20.balanceOf(this.getAddress()),\n    );\n  }\n\n  /**\n   * `getOwned` is a convenience method for getting all owned tokens\n   * for a particular wallet.\n   *\n   * @param _address - The address to check for token ownership\n   * @returns An array of PackMetadataWithBalance objects that are owned by the address\n   */\n  public async getOwned(_address?: string): Promise<PackMetadataWithBalance[]> {\n    const address = _address\n      ? _address\n      : await this.contractWrapper.getSignerAddress();\n    const maxId = await this.contractWrapper.readContract.nextTokenId();\n    const balances = await this.contractWrapper.readContract.balanceOfBatch(\n      Array(maxId.toNumber()).fill(address),\n      Array.from(Array(maxId.toNumber()).keys()),\n    );\n\n    const ownedBalances = balances\n      .map((b, i) => {\n        return {\n          tokenId: i,\n          balance: b,\n        };\n      })\n      .filter((b) => b.balance.gt(0));\n    return await Promise.all(\n      ownedBalances.map(async ({ tokenId, balance }) => {\n        const token = await this.get(tokenId.toString());\n        return { ...token, ownedByAddress: balance };\n      }),\n    );\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Open Pack\n   *\n   * @remarks Open a pack to burn it and obtain the reward asset inside.\n   *\n   * @example\n   * ```javascript\n   * // The pack ID of the asset you want to buy\n   * const packId = \"0\";\n   * const tx = await contract.open(packId);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const packId = tx.id; // the id of the pack that was opened\n   * const rewards = tx.data(); // the contents of the opened pack\n   * ```\n   */\n  public async open(\n    packId: string,\n  ): Promise<TransactionResultWithId<NFTMetadata>[]> {\n    const receipt = await this.contractWrapper.sendTransaction(\"openPack\", [\n      packId,\n    ]);\n    const logs = this.contractWrapper.parseLogs<PackOpenRequestedEvent>(\n      \"PackOpenRequested\",\n      receipt?.logs,\n    );\n    if (logs.length === 0) {\n      throw new Error(\"Failed to open pack\");\n    }\n    const event = logs[0];\n\n    const requestId = event.args.requestId;\n    const opener = event.args.opener;\n\n    // TODO type this\n    const fulfillEvent: any = await new Promise((resolve) => {\n      this.contractWrapper.readContract.once(\n        this.contractWrapper.readContract.filters.PackOpenFulfilled(\n          null,\n          opener,\n        ),\n        (_packId, _opener, _requestId, rewardContract, rewardIds) => {\n          if (requestId === _requestId) {\n            resolve({\n              packId: _packId,\n              opener: _opener,\n              requestId,\n              rewardContract,\n              rewardIds,\n            });\n          }\n        },\n      );\n    });\n\n    const { rewardIds, rewardContract } = fulfillEvent;\n\n    return rewardIds.map((rewardId: BigNumber) => ({\n      id: packId,\n      receipt,\n      data: () =>\n        fetchTokenMetadataForContract(\n          rewardContract,\n          this.contractWrapper.getProvider(),\n          rewardId.toString(),\n          this.storage,\n        ),\n    }));\n  }\n\n  /**\n   * Create Pack\n   *\n   * @remarks Create a new pack with its own rewards.\n   *\n   * @example\n   * ```javascript\n   * // Data to create the pack\n   * const pack = {\n   *   // The address of the contract that holds the rewards you want to include\n   *   assetContract: \"0x...\",\n   *   // The metadata of the pack\n   *   metadata: {\n   *     name: \"Cool Pack\",\n   *     description: \"This is a cool pack\",\n   *     // This can be an image url or image file\n   *     image: readFileSync(\"path/to/image.png\"),\n   *   },\n   *   // The NFTs you want to include in the pack\n   *   assets: [\n   *     {\n   *       tokenId: 0, // The token ID of the asset you want to add\n   *       amount: 1, // The amount of the asset you want to add\n   *     }, {\n   *       tokenId: 1,\n   *       amount: 1,\n   *     }\n   *   ],\n   * };\n   *\n   * await contract.create(pack);\n   * ```\n   *\n   * @param args - Args for the pack creation\n   * @returns - The newly created pack metadata\n   */\n  public async create(\n    args: IPackCreateArgs,\n  ): Promise<TransactionResultWithId<PackMetadata>> {\n    const asset = new Contract(\n      args.assetContract,\n      ERC1155Abi,\n      this.contractWrapper.getSigner() || this.contractWrapper.getProvider(),\n    ) as IERC1155;\n\n    const from = await this.contractWrapper.getSignerAddress();\n    const ids = args.assets.map((a) => a.tokenId);\n    const amounts = args.assets.map((a) => a.amount);\n    const uri = await this.storage.uploadMetadata(args.metadata);\n\n    const packParams = ethers.utils.defaultAbiCoder.encode(\n      [\"string\", \"uint256\", \"uint256\"],\n      [uri, args.secondsUntilOpenStart || 0, args.rewardsPerOpen || 1],\n    );\n\n    // TODO: make it gasless\n    const tx = await asset.safeBatchTransferFrom(\n      from,\n      this.getAddress(),\n      ids,\n      amounts,\n      packParams,\n      await this.contractWrapper.getCallOverrides(),\n    );\n\n    const receipt = await tx.wait();\n    const log = this.contractWrapper.parseLogs<PackAddedEvent>(\n      \"PackAdded\",\n      receipt.logs,\n    );\n    if (log.length === 0) {\n      throw new Error(\"PackCreated event not found\");\n    }\n    const packId = log[0].args.packId;\n    return { id: packId, receipt, data: () => this.get(packId.toString()) };\n  }\n\n  /**\n   * Transfer Pack\n   *\n   * @remarks Transfer a pack from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the pack to\n   * const toAddress = \"0x...\";\n   *\n   * // The token ID of the pack you want to send\n   * const tokenId = \"0\";\n   *\n   * // The number of packs you want to send\n   * const amount = 1;\n   *\n   * await contract.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    tokenId: string,\n    amount: BigNumber,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"safeTransferFrom\", [\n        await this.contractWrapper.getSignerAddress(),\n        to,\n        tokenId,\n        amount,\n        [0],\n      ]),\n    };\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    args: IPackBatchArgs,\n    data: BytesLike = [0],\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"safeTransferFrom\", [\n        from,\n        to,\n        args.tokenId,\n        args.amount,\n        data,\n      ]),\n    };\n  }\n\n  public async transferBatchFrom(\n    from: string,\n    to: string,\n    args: IPackBatchArgs[],\n    data: BytesLike = [0],\n  ): Promise<TransactionResult> {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"safeBatchTransferFrom\",\n        [from, to, ids, amounts, data],\n      ),\n    };\n  }\n\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"setApprovalForAll\", [\n        operator,\n        approved,\n      ]),\n    };\n  }\n\n  public async depositLink(amount: BigNumberish): Promise<TransactionResult> {\n    const chainId = await this.contractWrapper.getChainID();\n    const chainlink = ChainlinkVrf[chainId];\n    const erc20 = new Contract(\n      chainlink.linkTokenAddress,\n      ERC20Abi,\n      this.contractWrapper.getProvider(),\n    ) as IERC20;\n    // TODO: make it gasless\n    const tx = await erc20.transfer(\n      this.getAddress(),\n      amount,\n      await this.contractWrapper.getCallOverrides(),\n    );\n    return { receipt: await tx.wait() };\n  }\n\n  // TODO new withdraw LINK function in contract\n  // public async withdrawLink(to: string, amount: BigNumberish) {\n  //   const chainId = await this.contractWrapper.getChainID();\n  //   const chainlink = ChainlinkVrf[chainId];\n  //   await this.contractWrapper.sendTransaction(\"transferERC20\", [\n  //     chainlink.linkTokenAddress,\n  //     to,\n  //     amount,\n  //   ]);\n  // }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n}\n","import { ContractRoles } from \"../core/classes/contract-roles\";\nimport { DropERC721 } from \"contracts\";\nimport {\n  BigNumber,\n  BigNumberish,\n  BytesLike,\n  ethers,\n  utils,\n  constants,\n} from \"ethers\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractRoyalty } from \"../core/classes/contract-royalty\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { IStorage } from \"../core/interfaces/IStorage\";\nimport {\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n  TransactionResultWithId,\n} from \"../core/types\";\nimport { DropErc721ContractSchema } from \"../schema/contracts/drop-erc721\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport {\n  CommonNFTInput,\n  NFTMetadata,\n  NFTMetadataInput,\n  NFTMetadataOwner,\n} from \"../schema/tokens/common\";\nimport { DEFAULT_QUERY_ALL_COUNT, QueryAllParams } from \"../types/QueryParams\";\nimport { DropClaimConditions } from \"../core/classes/drop-claim-conditions\";\nimport { Erc721 } from \"../core/classes/erc-721\";\nimport { ContractPrimarySale } from \"../core/classes/contract-sales\";\nimport { prepareClaim } from \"../common/claim-conditions\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { DelayedReveal } from \"../core/classes/delayed-reveal\";\nimport {\n  Erc721Enumerable,\n  Erc721Supply,\n  GasCostEstimator,\n} from \"../core/classes\";\nimport { ClaimVerification } from \"../types\";\nimport { ContractEvents } from \"../core/classes/contract-events\";\nimport { ContractPlatformFee } from \"../core/classes/contract-platform-fee\";\nimport { ContractInterceptor } from \"../core/classes/contract-interceptor\";\nimport { getRoleHash } from \"../common\";\nimport {\n  TokensClaimedEvent,\n  TokensLazyMintedEvent,\n} from \"contracts/DropERC721\";\nimport { ContractAnalytics } from \"../core/classes/contract-analytics\";\n\n/**\n * Setup a collection of one-of-one NFTs that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"rinkeby\");\n * const contract = sdk.getNFTDrop(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class NFTDrop extends Erc721<DropERC721> {\n  static contractType = \"nft-drop\" as const;\n  static contractRoles = [\"admin\", \"minter\", \"transfer\"] as const;\n  static contractAbi = require(\"../../abis/DropERC721.json\");\n  /**\n   * @internal\n   */\n  static schema = DropErc721ContractSchema;\n\n  public encoder: ContractEncoder<DropERC721>;\n  public estimator: GasCostEstimator<DropERC721>;\n  public metadata: ContractMetadata<DropERC721, typeof NFTDrop.schema>;\n  public primarySale: ContractPrimarySale<DropERC721>;\n  public platformFee: ContractPlatformFee<DropERC721>;\n  public events: ContractEvents<DropERC721>;\n  public roles: ContractRoles<DropERC721, typeof NFTDrop.contractRoles[number]>;\n  /**\n   * @internal\n   */\n  public analytics: ContractAnalytics<DropERC721>;\n  /**\n   * @internal\n   */\n  public interceptor: ContractInterceptor<DropERC721>;\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalty.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalty.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n  public royalty: ContractRoyalty<DropERC721, typeof NFTDrop.schema>;\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.claimConditions.set(claimConditions);\n   * ```\n   */\n  public claimConditions: DropClaimConditions<DropERC721>;\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n  public revealer: DelayedReveal<DropERC721>;\n\n  private _query = this.query as Erc721Supply;\n  private _owned = this._query.owned as Erc721Enumerable;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<DropERC721>(\n      network,\n      address,\n      NFTDrop.contractAbi,\n      options,\n    ),\n  ) {\n    super(contractWrapper, storage, options);\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      NFTDrop.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(this.contractWrapper, NFTDrop.contractRoles);\n    this.royalty = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.primarySale = new ContractPrimarySale(this.contractWrapper);\n    this.claimConditions = new DropClaimConditions(\n      this.contractWrapper,\n      this.metadata,\n      this.storage,\n    );\n    this.analytics = new ContractAnalytics(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFee = new ContractPlatformFee(this.contractWrapper);\n    this.revealer = new DelayedReveal<DropERC721>(\n      this.contractWrapper,\n      this.storage,\n    );\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get All Minted NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  public async getAll(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    return this._query.all(queryParams);\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  public async getOwned(walletAddress?: string): Promise<NFTMetadataOwner[]> {\n    return this._owned.all(walletAddress);\n  }\n\n  /**\n   * Get all token ids of NFTs owned by a specific wallet.\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   */\n  public async getOwnedTokenIds(walletAddress?: string): Promise<BigNumber[]> {\n    return this._owned.tokenIds(walletAddress);\n  }\n\n  /**\n   * Get the total count NFTs in this drop contract, both claimed and unclaimed\n   */\n  public async totalSupply() {\n    const claimed = await this.totalClaimedSupply();\n    const unclaimed = await this.totalUnclaimedSupply();\n    return claimed.add(unclaimed);\n  }\n\n  /**\n   * Get All Claimed NFTs\n   *\n   * @remarks Fetch all the NFTs (and their owners) that have been claimed in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTs = await contract.getAllClaimed();\n   * const firstOwner = claimedNFTs[0].owner;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata and their ownersfor all NFTs queried.\n   */\n  public async getAllClaimed(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = Math.min(\n      (await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(),\n      start + count,\n    );\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  /**\n   * Get All Unclaimed NFTs\n   *\n   * @remarks Fetch all the NFTs that have been not been claimed yet in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTs = await contract.getAllUnclaimed();\n   * const firstUnclaimedNFT = unclaimedNFTs[0].name;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  public async getAllUnclaimed(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadata[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const firstTokenId = BigNumber.from(\n      Math.max(\n        (\n          await this.contractWrapper.readContract.nextTokenIdToClaim()\n        ).toNumber(),\n        start,\n      ),\n    );\n    const maxId = BigNumber.from(\n      Math.min(\n        (\n          await this.contractWrapper.readContract.nextTokenIdToMint()\n        ).toNumber(),\n        firstTokenId.toNumber() + count,\n      ),\n    );\n\n    return await Promise.all(\n      Array.from(Array(maxId.sub(firstTokenId).toNumber()).keys()).map((i) =>\n        this.getTokenMetadata(firstTokenId.add(i).toString()),\n      ),\n    );\n  }\n\n  /**\n   * Get the claimed supply\n   *\n   * @remarks Get the number of claimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTCount = await contract.totalClaimedSupply();\n   * console.log(`NFTs claimed so far: ${claimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  public async totalClaimedSupply(): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.nextTokenIdToClaim();\n  }\n\n  /**\n   * Get the unclaimed supply\n   *\n   * @remarks Get the number of unclaimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  public async totalUnclaimedSupply(): Promise<BigNumber> {\n    return (await this.contractWrapper.readContract.nextTokenIdToMint()).sub(\n      await this.totalClaimedSupply(),\n    );\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  public async isTransferRestricted(): Promise<boolean> {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(\n      getRoleHash(\"transfer\"),\n      constants.AddressZero,\n    );\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of unique NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   */\n  public async createBatch(\n    metadatas: NFTMetadataInput[],\n  ): Promise<TransactionResultWithId<NFTMetadata>[]> {\n    const startFileNumber =\n      await this.contractWrapper.readContract.nextTokenIdToMint();\n    const batch = await this.storage.uploadMetadataBatch(\n      metadatas.map((m) => CommonNFTInput.parse(m)),\n      startFileNumber.toNumber(),\n      this.contractWrapper.readContract.address,\n      await this.contractWrapper.getSigner()?.getAddress(),\n    );\n    const baseUri = batch.baseUri;\n    const receipt = await this.contractWrapper.sendTransaction(\"lazyMint\", [\n      batch.metadataUris.length,\n      baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`,\n      ethers.utils.toUtf8Bytes(\"\"),\n    ]);\n    const event = this.contractWrapper.parseLogs<TokensLazyMintedEvent>(\n      \"TokensLazyMinted\",\n      receipt?.logs,\n    );\n    const startingIndex = event[0].args.startTokenId;\n    const endingIndex = event[0].args.endTokenId;\n    const results = [];\n    for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n        data: () => this.getTokenMetadata(id),\n      });\n    }\n    return results;\n  }\n\n  /**\n   * Claim unique NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const claimedTokenId = tx.id; // the id of the NFT claimed\n   * const claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param proofs - Array of proofs\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  public async claimTo(\n    destinationAddress: string,\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [utils.hexZeroPad([0], 32)],\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>[]> {\n    const claimVerification = await this.prepareClaim(quantity, proofs);\n    const receipt = await this.contractWrapper.sendTransaction(\n      \"claim\",\n      [\n        destinationAddress,\n        quantity,\n        claimVerification.currencyAddress,\n        claimVerification.price,\n        claimVerification.proofs,\n        claimVerification.maxQuantityPerTransaction,\n      ],\n      claimVerification.overrides,\n    );\n    const event = this.contractWrapper.parseLogs<TokensClaimedEvent>(\n      \"TokensClaimed\",\n      receipt?.logs,\n    );\n    const startingIndex: BigNumber = event[0].args.startTokenId;\n    const endingIndex = startingIndex.add(quantity);\n    const results = [];\n    for (let id = startingIndex; id.lt(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n        data: () => this.get(id),\n      });\n    }\n    return results;\n  }\n\n  /**\n   * Claim NFTs to the connected wallet.\n   *\n   * @remarks See {@link NFTDrop.claimTo}\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  public async claim(\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [utils.hexZeroPad([0], 32)],\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>[]> {\n    return this.claimTo(\n      await this.contractWrapper.getSignerAddress(),\n      quantity,\n      proofs,\n    );\n  }\n\n  /**\n   * Burn a single NFT\n   *\n   * @param tokenId - the token Id to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burn(tokenId);\n   * ```\n   *\n   */\n  public async burn(tokenId: BigNumberish): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"burn\", [tokenId]),\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Returns proofs and the overrides required for the transaction.\n   *\n   * @returns - `overrides` and `proofs` as an object.\n   */\n  private async prepareClaim(\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [utils.hexZeroPad([0], 32)],\n  ): Promise<ClaimVerification> {\n    return prepareClaim(\n      quantity,\n      await this.claimConditions.getActive(),\n      (await this.metadata.get()).merkle,\n      0,\n      this.contractWrapper,\n      this.storage,\n      proofs,\n    );\n  }\n}\n","import { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { DropERC721 } from \"contracts\";\nimport {\n  CommonNFTInput,\n  NFTMetadata,\n  NFTMetadataInput,\n} from \"../../schema/tokens/common\";\nimport { IStorage, TransactionResult, TransactionResultWithId } from \"../index\";\nimport { fetchTokenMetadata } from \"../../common/nft\";\nimport { BatchToReveal } from \"../../types/delayed-reveal\";\nimport { TokensLazyMintedEvent } from \"contracts/DropERC721\";\n\n/**\n * Handles delayed reveal logic\n * @public\n */\nexport class DelayedReveal<T extends DropERC721> {\n  private contractWrapper: ContractWrapper<T>;\n  private storage: IStorage;\n\n  constructor(contractWrapper: ContractWrapper<T>, storage: IStorage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until your reveal them!\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, until the reveal happens!\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time!\n   * const batchId = 0; // the batch to reveal\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   * @param placeholder - the placeholder NFT to show before the reveal\n   * @param metadatas - the final NFTs that will be hidden\n   * @param password - the password that will be used to reveal these NFTs\n   */\n  public async createDelayedRevealBatch(\n    placeholder: NFTMetadataInput,\n    metadatas: NFTMetadataInput[],\n    password: string,\n  ): Promise<TransactionResultWithId[]> {\n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n\n    const { baseUri: placeholderUri } = await this.storage.uploadMetadataBatch(\n      [CommonNFTInput.parse(placeholder)],\n      0,\n      this.contractWrapper.readContract.address,\n      await this.contractWrapper.getSigner()?.getAddress(),\n    );\n\n    const startFileNumber =\n      await this.contractWrapper.readContract.nextTokenIdToMint();\n\n    const batch = await this.storage.uploadMetadataBatch(\n      metadatas.map((m) => CommonNFTInput.parse(m)),\n      startFileNumber.toNumber(),\n      this.contractWrapper.readContract.address,\n      await this.contractWrapper.getSigner()?.getAddress(),\n    );\n\n    const baseUri = batch.baseUri;\n    const baseUriId = await this.contractWrapper.readContract.getBaseURICount();\n    const encryptedBaseUri =\n      await this.contractWrapper.readContract.encryptDecrypt(\n        ethers.utils.toUtf8Bytes(\n          baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`,\n        ),\n        await this.hashDelayRevealPasword(baseUriId, password),\n      );\n\n    const receipt = await this.contractWrapper.sendTransaction(\"lazyMint\", [\n      batch.metadataUris.length,\n      placeholderUri.endsWith(\"/\") ? placeholderUri : `${placeholderUri}/`,\n      encryptedBaseUri,\n    ]);\n\n    const events = this.contractWrapper.parseLogs<TokensLazyMintedEvent>(\n      \"TokensLazyMinted\",\n      receipt?.logs,\n    );\n    const startingIndex = events[0].args.startTokenId;\n    const endingIndex = events[0].args.endTokenId;\n    const results = [];\n    for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n      });\n    }\n    return results;\n  }\n\n  /**\n   * Reveal a batch of hidden NFTs\n   * @param batchId - the id of the batch to reveal\n   * @param password - the password\n   */\n  public async reveal(\n    batchId: BigNumberish,\n    password: string,\n  ): Promise<TransactionResult> {\n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n    const key = await this.hashDelayRevealPasword(batchId, password);\n    // performing the reveal locally to make sure it'd succeed before sending the transaction\n    try {\n      const decryptedUri = await this.contractWrapper\n        .callStatic()\n        .reveal(batchId, key);\n      // basic sanity check for making sure decryptedUri is valid\n      // this is optional because invalid decryption key would result in non-utf8 bytes and\n      // ethers would throw when trying to decode it\n      if (!decryptedUri.includes(\"://\") || !decryptedUri.endsWith(\"/\")) {\n        throw new Error(\"invalid password\");\n      }\n    } catch (e) {\n      throw new Error(\"invalid password\");\n    }\n\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"reveal\", [\n        batchId,\n        key,\n      ]),\n    };\n  }\n\n  /**\n   * Gets the list of unrevealed NFT batches.\n   */\n  public async getBatchesToReveal(): Promise<BatchToReveal[]> {\n    const count = await this.contractWrapper.readContract.getBaseURICount();\n    if (count.isZero()) {\n      return [];\n    }\n\n    const countRangeArray = Array.from(Array(count.toNumber()).keys());\n\n    // map over to get the base uri indices, which should be the end token id of every batch\n    const uriIndices = await Promise.all(\n      countRangeArray.map((i) =>\n        this.contractWrapper.readContract.baseURIIndices(i),\n      ),\n    );\n\n    // first batch always start from 0. don't need to fetch the last batch so pop it from the range array\n    const uriIndicesWithZeroStart = uriIndices.slice(0, uriIndices.length - 1);\n\n    // returns the token uri for each batches. first batch always starts from token id 0.\n    const tokenUris = await Promise.all(\n      Array.from([0, ...uriIndicesWithZeroStart]).map((i) =>\n        this.contractWrapper.readContract.tokenURI(i),\n      ),\n    );\n\n    const tokenMetadatas = await Promise.all(\n      Array.from([0, ...uriIndicesWithZeroStart]).map((i) =>\n        this.getNftMetadata(i.toString()),\n      ),\n    );\n\n    // index is the uri indicies, which is end token id. different from uris\n    const encryptedBaseUris = await Promise.all(\n      Array.from([...uriIndices]).map((i) =>\n        this.contractWrapper.readContract.encryptedBaseURI(i),\n      ),\n    );\n\n    return tokenUris\n      .map((uri, index) => ({\n        batchId: BigNumber.from(index),\n        batchUri: uri,\n        placeholderMetadata: tokenMetadatas[index],\n      }))\n      .filter(\n        (_, index) => ethers.utils.hexDataLength(encryptedBaseUris[index]) > 0,\n      );\n  }\n\n  /**\n   * Algorithm to hash delay reveal password, so we don't broadcast the input password on-chain.\n   *\n   * @internal\n   */\n  private async hashDelayRevealPasword(\n    batchTokenIndex: BigNumberish,\n    password: string,\n  ) {\n    const chainId = await this.contractWrapper.getChainID();\n    const contractAddress = this.contractWrapper.readContract.address;\n    return ethers.utils.solidityKeccak256(\n      [\"string\", \"uint256\", \"uint256\", \"address\"],\n      [password, chainId, batchTokenIndex, contractAddress],\n    );\n  }\n\n  private async getNftMetadata(tokenId: BigNumberish): Promise<NFTMetadata> {\n    const tokenUri = await this.contractWrapper.readContract.tokenURI(tokenId);\n    return fetchTokenMetadata(tokenId, tokenUri, this.storage);\n  }\n}\n","import { ThirdwebContract } from \"contracts\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport {\n  extractFunctionsFromAbi,\n  fetchContractMetadataFromAddress,\n} from \"../../common\";\nimport { IStorage } from \"../interfaces\";\nimport {\n  AbiFunction,\n  AbiSchema,\n  PublishedMetadata,\n} from \"../../schema/contracts/custom\";\n\n/**\n * Handles publish metadata for a contract\n * @internal\n */\nexport class ContractPublishedMetadata<TContract extends ThirdwebContract> {\n  private contractWrapper;\n  private storage: IStorage;\n\n  private _cachedMetadata: PublishedMetadata | undefined;\n\n  constructor(contractWrapper: ContractWrapper<TContract>, storage: IStorage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Get the published metadata for this contract\n   * @public\n   */\n  public async get(): Promise<PublishedMetadata> {\n    if (this._cachedMetadata) {\n      return this._cachedMetadata;\n    }\n    this._cachedMetadata = await fetchContractMetadataFromAddress(\n      this.contractWrapper.readContract.address,\n      this.contractWrapper.getProvider(),\n      this.storage,\n    );\n    return this._cachedMetadata;\n  }\n\n  /**\n   * @public\n   */\n  public extractFunctions(): AbiFunction[] {\n    // to construct a contract we already **have** to have the abi on the contract wrapper, so there is no reason to look fetch it again (means this function can become synchronous as well!)\n    return extractFunctionsFromAbi(AbiSchema.parse(this.contractWrapper.abi));\n  }\n}\n","import { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport {\n  ContractEvents,\n  ContractInterceptor,\n  ContractPrimarySale,\n  ContractRoles,\n  ContractRoyalty,\n  Erc1155,\n  Erc20,\n  Erc721,\n  GasCostEstimator,\n  IStorage,\n  NetworkOrSignerOrProvider,\n} from \"../core\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport {\n  IPermissionsEnumerable,\n  IPlatformFee,\n  IPrimarySale,\n  IRoyalty,\n  ThirdwebContract,\n} from \"contracts\";\nimport { CustomContractSchema } from \"../schema/contracts/custom\";\nimport { UpdateableNetwork } from \"../core/interfaces/contract\";\nimport { ContractInterface } from \"ethers\";\nimport { ALL_ROLES, detectContractFeature } from \"../common\";\nimport { ContractPlatformFee } from \"../core/classes/contract-platform-fee\";\nimport { ContractPublishedMetadata } from \"../core/classes/contract-published-metadata\";\nimport { BaseERC1155, BaseERC20, BaseERC721 } from \"../types/eips\";\nimport { ContractAnalytics } from \"../core/classes/contract-analytics\";\n\n/**\n * Custom contract dynamic class with feature detection\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(provider);\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n *\n * // call any function in your contract\n * await contract.functions.myCustomFunction(params);\n *\n * // if your contract follows the ERC721 standard, contract.nft will be present\n * const allNFTs = await contract.nft.query.all()\n *\n * // if your contract extends IMintableERC721, contract.nft.mint will be present\n * const tx = await contract.nft.mint.to(\"0x...\", {\n *     name: \"Cool NFT\",\n *     image: readFileSync(\"some_image.png\"),\n *   });\n * ```\n *\n * @beta\n */\nexport class SmartContract<\n  TContract extends ThirdwebContract = ThirdwebContract,\n> implements UpdateableNetwork\n{\n  static contractType = \"custom\" as const;\n  /**\n   * @internal\n   */\n  static schema = CustomContractSchema;\n\n  private contractWrapper;\n  private storage;\n  private options;\n\n  // raw contract\n  /**\n   * Call any function in this contract using the function signature\n   * ex: contract.functions.mint(address, quantity)\n   */\n  public readonly functions: any;\n\n  // utilities\n  public events: ContractEvents<TContract>;\n  public interceptor: ContractInterceptor<TContract>;\n  public estimator: GasCostEstimator<TContract>;\n  public publishedMetadata: ContractPublishedMetadata<TContract>;\n  /**\n   * @internal\n   */\n  public analytics: ContractAnalytics<TContract>;\n\n  // features\n  public metadata: ContractMetadata<ThirdwebContract, any> | undefined;\n  public royalties:\n    | ContractRoyalty<IRoyalty & ThirdwebContract, any>\n    | undefined;\n  public roles: ContractRoles<IPermissionsEnumerable, any> | undefined;\n  public sales: ContractPrimarySale<IPrimarySale> | undefined;\n  public platformFees: ContractPlatformFee<IPlatformFee> | undefined;\n  /**\n   * Auto-detects ERC20 standard functions.\n   */\n  public token: Erc20 | undefined;\n  /**\n   * Auto-detects ERC721 standard functions.\n   */\n  public nft: Erc721 | undefined;\n  /**\n   * Auto-detects ERC1155 standard functions.\n   */\n  public edition: Erc1155 | undefined;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    abi: ContractInterface,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<TContract>(\n      network,\n      address,\n      abi,\n      options,\n    ),\n  ) {\n    this.options = options;\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n    this.functions = contractWrapper.writeContract;\n\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.publishedMetadata = new ContractPublishedMetadata(\n      this.contractWrapper,\n      this.storage,\n    );\n\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      SmartContract.schema,\n      this.storage,\n    );\n\n    this.analytics = new ContractAnalytics(this.contractWrapper);\n\n    // feature detection\n    this.royalties = this.detectRoyalties();\n    this.roles = this.detectRoles();\n    this.sales = this.detectPrimarySales();\n    this.platformFees = this.detectPlatformFees();\n\n    this.token = this.detectErc20();\n    this.nft = this.detectErc721();\n    this.edition = this.detectErc1155();\n\n    // TODO detect sigmint\n    // this.sigmint = this.detectSigmint();\n  }\n\n  onNetworkUpdated(network: NetworkOrSignerOrProvider): void {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ********************\n   * FEATURE DETECTION\n   * ********************/\n\n  private detectRoyalties() {\n    // TODO (byoc) change to ThirdwebContract\n    if (\n      detectContractFeature<IRoyalty & ThirdwebContract>(\n        this.contractWrapper,\n        \"Royalty\",\n      )\n    ) {\n      // ContractMetadata is stateless, it's fine to create a new one here\n      // This also makes it not order dependent in the feature detection process\n      const metadata = new ContractMetadata(\n        this.contractWrapper,\n        SmartContract.schema,\n        this.storage,\n      );\n      return new ContractRoyalty(this.contractWrapper, metadata);\n    }\n    return undefined;\n  }\n\n  private detectRoles() {\n    if (\n      detectContractFeature<IPermissionsEnumerable>(\n        this.contractWrapper,\n        \"Permissions\",\n      )\n    ) {\n      return new ContractRoles(this.contractWrapper, ALL_ROLES);\n    }\n    return undefined;\n  }\n\n  private detectPrimarySales() {\n    if (\n      detectContractFeature<IPrimarySale>(this.contractWrapper, \"PrimarySale\")\n    ) {\n      return new ContractPrimarySale(this.contractWrapper);\n    }\n    return undefined;\n  }\n\n  private detectPlatformFees() {\n    if (\n      detectContractFeature<IPlatformFee>(this.contractWrapper, \"PlatformFee\")\n    ) {\n      return new ContractPlatformFee(this.contractWrapper);\n    }\n    return undefined;\n  }\n\n  private detectErc20() {\n    if (detectContractFeature<BaseERC20>(this.contractWrapper, \"ERC20\")) {\n      return new Erc20(this.contractWrapper, this.storage, this.options);\n    }\n    return undefined;\n  }\n\n  private detectErc721() {\n    if (detectContractFeature<BaseERC721>(this.contractWrapper, \"ERC721\")) {\n      return new Erc721(this.contractWrapper, this.storage, this.options);\n    }\n    return undefined;\n  }\n\n  private detectErc1155() {\n    if (detectContractFeature<BaseERC1155>(this.contractWrapper, \"ERC1155\")) {\n      return new Erc1155(this.contractWrapper, this.storage, this.options);\n    }\n    return undefined;\n  }\n}\n","import { NFTCollection } from \"./nft-collection\";\nimport { EditionDrop } from \"./edition-drop\";\nimport { Edition } from \"./edition\";\nimport { Token } from \"./token\";\nimport { Vote } from \"./vote\";\nimport { Split } from \"./split\";\nimport { Marketplace } from \"./marketplace\";\nimport { Pack } from \"./pack\";\nimport { NFTDrop } from \"./nft-drop\";\nimport { TokenDrop } from \"./token-drop\";\nimport { SmartContract } from \"./smart-contract\";\n\n/**\n * @internal\n */\nexport const KNOWN_CONTRACTS_MAP = {\n  [NFTDrop.contractType]: NFTDrop,\n  [NFTCollection.contractType]: NFTCollection,\n  [EditionDrop.contractType]: EditionDrop,\n  [Edition.contractType]: Edition,\n  [TokenDrop.contractType]: TokenDrop,\n  [Token.contractType]: Token,\n  [Vote.contractType]: Vote,\n  [Split.contractType]: Split,\n  [Marketplace.contractType]: Marketplace,\n  [Pack.contractType]: Pack,\n} as const;\n\n/**\n * @internal\n */\nexport const CONTRACTS_MAP = {\n  ...KNOWN_CONTRACTS_MAP,\n  [SmartContract.contractType]: SmartContract,\n} as const;\n\n/**\n * @internal\n */\nexport const REMOTE_CONTRACT_NAME = {\n  [NFTDrop.contractType]: \"DropERC721\",\n  [NFTCollection.contractType]: \"TokenERC721\",\n  [EditionDrop.contractType]: \"DropERC1155\",\n  [Edition.contractType]: \"TokenERC1155\",\n  [TokenDrop.contractType]: \"DropERC20\",\n  [Token.contractType]: \"TokenERC20\",\n  [Vote.contractType]: \"VoteERC20\",\n  [Split.contractType]: \"Split\",\n  [Marketplace.contractType]: \"Marketplace\",\n  [Pack.contractType]: \"Pack\",\n  [SmartContract.contractType]: \"Custom\",\n} as const;\n\n/**\n * @internal\n */\nexport const REMOTE_CONTRACT_TO_CONTRACT_TYPE = {\n  DropERC721: NFTDrop.contractType,\n  TokenERC721: NFTCollection.contractType,\n  DropERC1155: EditionDrop.contractType,\n  TokenERC1155: Edition.contractType,\n  DropERC20: TokenDrop.contractType,\n  TokenERC20: Token.contractType,\n  VoteERC20: Vote.contractType,\n  Split: Split.contractType,\n  Marketplace: Marketplace.contractType,\n  Pack: Pack.contractType,\n} as const;\n","import { NetworkOrSignerOrProvider, ValidContractClass } from \"../types\";\nimport { z } from \"zod\";\nimport { ContractRegistry } from \"./registry\";\nimport { getContractAddressByChainId } from \"../../constants/addresses\";\nimport { ContractFactory } from \"./factory\";\nimport { SDKOptions } from \"../../schema/sdk-options\";\nimport { IStorage } from \"../interfaces\";\nimport { RPCConnectionHandler } from \"./rpc-connection-handler\";\nimport {\n  Edition,\n  EditionDrop,\n  Marketplace,\n  NFTCollection,\n  NFTDrop,\n  Pack,\n  Split,\n  Token,\n  Vote,\n} from \"../../contracts\";\nimport {\n  MarketplaceContractDeployMetadata,\n  NFTContractDeployMetadata,\n  SplitContractDeployMetadata,\n  TokenContractDeployMetadata,\n  VoteContractDeployMetadata,\n} from \"../../types/deploy/deploy-metadata\";\nimport { TokenDrop } from \"../../contracts/token-drop\";\n\n/**\n * Handles deploying new contracts\n * @public\n */\nexport class ContractDeployer extends RPCConnectionHandler {\n  /**\n   * @internal\n   * should never be accessed directly, use {@link ContractDeployer.getFactory} instead\n   */\n  private _factory: Promise<ContractFactory> | undefined;\n  /**\n   * @internal\n   * should never be accessed directly, use {@link ContractDeployer.getRegistry} instead\n   */\n  private _registry: Promise<ContractRegistry> | undefined;\n  private storage: IStorage;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    options: SDKOptions,\n    storage: IStorage,\n  ) {\n    super(network, options);\n    this.storage = storage;\n  }\n\n  /**\n   * Deploys a new NFTCollection contract\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployNFTCollection(\n    metadata: NFTContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployBuiltInContract(\n      NFTCollection.contractType,\n      metadata,\n    );\n  }\n\n  /**\n   * Deploys a new NFTDrop contract\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployNFTDrop(\n    metadata: NFTContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployBuiltInContract(NFTDrop.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Edition contract\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployEdition(\n    metadata: NFTContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployBuiltInContract(Edition.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new EditionDrop contract\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployEditionDrop(\n    metadata: NFTContractDeployMetadata,\n  ): Promise<string> {\n    const parsed = EditionDrop.schema.deploy.parse(metadata);\n    return await this.deployBuiltInContract(EditionDrop.contractType, parsed);\n  }\n\n  /**\n   * Deploys a new Token contract\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployToken(\n    metadata: TokenContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployBuiltInContract(Token.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Token Drop contract\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployTokenDrop(\n    metadata: TokenContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployBuiltInContract(TokenDrop.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Marketplace contract\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployMarketplace(\n    metadata: MarketplaceContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployBuiltInContract(Marketplace.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Pack contract\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployPack(\n    metadata: NFTContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployBuiltInContract(Pack.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Split contract\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deploySplit(\n    metadata: SplitContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployBuiltInContract(Split.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Vote contract\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployVote(\n    metadata: VoteContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployBuiltInContract(Vote.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new contract\n   *\n   * @internal\n   * @param contractType - the type of contract to deploy\n   * @param contractMetadata - the metadata to deploy the contract with\n   * @returns a promise of the address of the newly deployed contract\n   */\n  public async deployBuiltInContract<TContract extends ValidContractClass>(\n    contractType: TContract[\"contractType\"],\n    contractMetadata: z.input<TContract[\"schema\"][\"deploy\"]>,\n  ): Promise<string> {\n    const factory = await this.getFactory();\n    return await factory.deploy(contractType, contractMetadata);\n  }\n\n  /**\n   * @internal\n   */\n  public async getRegistry(): Promise<ContractRegistry> {\n    // if we already have a registry just return it back\n    if (this._registry) {\n      return this._registry;\n    }\n\n    // otherwise get the registry address for the active chain and get a new one\n\n    // have to do it like this otherwise we run it over and over and over\n    // \"this._registry\" has to be assigned to the promise upfront.\n    return (this._registry = this.getProvider()\n      .getNetwork()\n      .then(async ({ chainId }) => {\n        const registryAddress = getContractAddressByChainId(\n          chainId,\n          \"twRegistry\",\n        );\n        const contractPublisherAddress = getContractAddressByChainId(\n          chainId,\n          \"twBYOCRegistry\",\n        );\n        return new ContractRegistry(\n          registryAddress,\n          contractPublisherAddress,\n          this.getSignerOrProvider(),\n          this.options,\n        );\n      }));\n  }\n\n  private async getFactory(): Promise<ContractFactory> {\n    // if we already have a factory just return it back\n    if (this._factory) {\n      return this._factory;\n    }\n\n    // otherwise get the factory address for the active chain and get a new one\n\n    // have to do it like this otherwise we run it over and over and over\n    // \"this._factory\" has to be assigned to the promise upfront.\n    return (this._factory = this.getProvider()\n      .getNetwork()\n      .then(async ({ chainId }) => {\n        const factoryAddress = getContractAddressByChainId(\n          chainId,\n          \"twFactory\",\n        );\n        return new ContractFactory(\n          factoryAddress,\n          this.getSignerOrProvider(),\n          this.storage,\n          this.options,\n        );\n      }));\n  }\n\n  public override updateSignerOrProvider(network: NetworkOrSignerOrProvider) {\n    super.updateSignerOrProvider(network);\n    this.updateContractSignerOrProvider();\n  }\n\n  private updateContractSignerOrProvider() {\n    // has to be promises now\n    this._factory?.then((factory) => {\n      factory.updateSignerOrProvider(this.getSignerOrProvider());\n    });\n    // has to be promises now\n    this._registry?.then((registry) => {\n      registry.updateSignerOrProvider(this.getSignerOrProvider());\n    });\n  }\n}\n","import { RPCConnectionHandler } from \"../classes/rpc-connection-handler\";\nimport { NetworkOrSignerOrProvider, TransactionResult } from \"../types\";\nimport { SDKOptions } from \"../../schema\";\nimport invariant from \"tiny-invariant\";\nimport { Amount, CurrencyValue } from \"../../types\";\nimport {\n  fetchCurrencyValue,\n  isNativeToken,\n  normalizePriceValue,\n} from \"../../common/currency\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../constants\";\nimport ERC20Abi from \"../../../abis/IERC20.json\";\nimport { ContractWrapper } from \"../classes/contract-wrapper\";\nimport { IERC20 } from \"contracts\";\nimport { BigNumber, providers } from \"ethers\";\n\n/**\n * Connect and Interact with a user wallet\n * @example\n * ```javascript\n * const balance = await sdk.wallet.balance();\n * ```\n * @public\n */\nexport class UserWallet {\n  private connection: RPCConnectionHandler;\n  private options: SDKOptions;\n\n  constructor(network: NetworkOrSignerOrProvider, options: SDKOptions) {\n    this.connection = new RPCConnectionHandler(network, options);\n    this.options = options;\n  }\n\n  // TODO connect()\n  // TODO disconnect()\n  // TODO switchChain()\n  // TODO event listener\n  // TODO tokens()\n  // TODO NFTs()\n\n  // TODO this will become the source of truth of the signer and have every contract read from it\n  onNetworkUpdated(network: NetworkOrSignerOrProvider): void {\n    this.connection.updateSignerOrProvider(network);\n  }\n\n  /**\n   * Transfer native or ERC20 tokens from this wallet to another wallet\n   * @example\n   * ```javascript\n   *  // transfer 0.8 ETH\n   * await sdk.wallet.transfer(\"0x...\", 0.8);\n   *  // transfer 0.8 tokens of `tokenContractAddress`\n   * await sdk.wallet.transfer(\"0x...\", 0.8, tokenContractAddress);\n   * ```\n   * @param to - the account to send funds to\n   * @param amount - the amount in tokens\n   * @param currencyAddress - Optional - ERC20 contract address of the token to transfer\n   */\n  async transfer(\n    to: string,\n    amount: Amount,\n    currencyAddress = NATIVE_TOKEN_ADDRESS,\n  ): Promise<TransactionResult> {\n    const signer = await this.connectedWallet();\n    const amountInWei = await normalizePriceValue(\n      this.connection.getProvider(),\n      amount,\n      currencyAddress,\n    );\n    if (isNativeToken(currencyAddress)) {\n      // native token transfer\n      const from = await signer.getAddress();\n      const tx = await signer.sendTransaction({\n        from,\n        to,\n        value: amountInWei,\n      });\n      return {\n        receipt: await tx.wait(),\n      };\n    } else {\n      // ERC20 token transfer\n      return {\n        receipt: await this.createErc20(currencyAddress).sendTransaction(\n          \"transfer\",\n          [to, amountInWei],\n        ),\n      };\n    }\n  }\n\n  /**\n   * Fetch the native or ERC20 token balance of this wallet\n   * @example\n   * ```javascript\n   * // native currency balance\n   * const balance = await sdk.wallet.balance();\n   * // ERC20 token balance\n   * const erc20balance = await sdk.wallet.balance(tokenContractAddress);\n   *\n   * ```\n   */\n  async balance(\n    currencyAddress = NATIVE_TOKEN_ADDRESS,\n  ): Promise<CurrencyValue> {\n    const signer = this.connection.getSigner();\n    invariant(signer, \"Wallet not connected\");\n    let balance: BigNumber;\n    if (isNativeToken(currencyAddress)) {\n      balance = await signer.getBalance();\n    } else {\n      balance = await this.createErc20(currencyAddress).readContract.balanceOf(\n        await this.address(),\n      );\n    }\n    return await fetchCurrencyValue(\n      this.connection.getProvider(),\n      currencyAddress,\n      balance,\n    );\n  }\n\n  /**\n   * Get the currently connected address\n   * @example\n   * ```javascript\n   * const address = await sdk.wallet.address();\n   * ```\n   */\n  async address(): Promise<string> {\n    return await this.connectedWallet().getAddress();\n  }\n\n  /**\n   * Sign any message with the connected wallet private key\n   * @param message - the message to sign\n   */\n  async sign(message: string): Promise<string> {\n    const signer = this.connectedWallet();\n    return await signer.signMessage(message);\n  }\n\n  /**\n   * Send a raw transaction to the blockchain from the connected wallet\n   * @param transactionRequest\n   */\n  async sendRawTransaction(\n    transactionRequest: providers.TransactionRequest,\n  ): Promise<TransactionResult> {\n    const signer = this.connectedWallet();\n    const tx = await signer.sendTransaction(transactionRequest);\n    return {\n      receipt: await tx.wait(),\n    };\n  }\n\n  /** ***********************\n   * PRIVATE FUNCTIONS\n   * ***********************/\n\n  private connectedWallet() {\n    const signer = this.connection.getSigner();\n    invariant(signer, \"Wallet not connected\");\n    return signer;\n  }\n\n  private createErc20(currencyAddress: string) {\n    return new ContractWrapper<IERC20>(\n      this.connection.getSignerOrProvider(),\n      currencyAddress,\n      ERC20Abi,\n      this.options,\n    );\n  }\n}\n","import { ContractInterface, ethers, Signer } from \"ethers\";\nimport { IStorage } from \"./interfaces/IStorage\";\nimport {\n  Edition,\n  EditionDrop,\n  KNOWN_CONTRACTS_MAP,\n  Marketplace,\n  NFTCollection,\n  NFTDrop,\n  Pack,\n  REMOTE_CONTRACT_TO_CONTRACT_TYPE,\n  Split,\n  Token,\n  Vote,\n} from \"../contracts\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { IpfsStorage } from \"./classes/ipfs-storage\";\nimport { RPCConnectionHandler } from \"./classes/rpc-connection-handler\";\nimport type {\n  ContractForContractType,\n  ContractType,\n  NetworkOrSignerOrProvider,\n  SignerOrProvider,\n  ValidContractInstance,\n} from \"./types\";\nimport { IThirdwebContract__factory } from \"contracts\";\nimport { ContractDeployer } from \"./classes/contract-deployer\";\nimport { SmartContract } from \"../contracts/smart-contract\";\nimport invariant from \"tiny-invariant\";\nimport { TokenDrop } from \"../contracts/token-drop\";\nimport { ContractPublisher } from \"./classes/contract-publisher\";\nimport { ContractMetadata } from \"./classes\";\nimport {\n  ChainOrRpc,\n  getContractAddressByChainId,\n  getProviderForNetwork,\n  getReadOnlyProvider,\n} from \"../constants\";\nimport { UserWallet } from \"./wallet/UserWallet\";\n\n/**\n * The main entry point for the thirdweb SDK\n * @public\n */\nexport class ThirdwebSDK extends RPCConnectionHandler {\n  /**\n   * Get an instance of the thirdweb SDK based on an existing ethers signer\n   *\n   * @example\n   * ```javascript\n   * // get a signer from somewhere (createRandom is being used purely for example purposes)\n   * const signer = ethers.Wallet.createRandom();\n   *\n   * // get an instance of the SDK with the signer already setup\n   * const sdk = ThirdwebSDK.fromSigner(signer, \"mainnet\");\n   * ```\n   *\n   * @param signer - a ethers Signer to be used for transactions\n   * @param network - the network (chain) to connect to (e.g. \"mainnet\", \"rinkeby\", \"polygon\", \"mumbai\"...) or a fully formed RPC url\n   * @param options - the SDK options to use\n   * @returns an instance of the SDK\n   *\n   * @beta\n   */\n  static fromSigner(\n    signer: Signer,\n    network?: ChainOrRpc,\n    options: SDKOptions = {},\n  ): ThirdwebSDK {\n    const sdk = new ThirdwebSDK(network || signer, options);\n    sdk.updateSignerOrProvider(signer);\n    return sdk;\n  }\n\n  /**\n   * Get an instance of the thirdweb SDK based on a private key.\n   *\n   * @remarks\n   * This should only be used for backend services or scripts, with the private key stored in a secure way.\n   * **NEVER** expose your private key to the public in any way.\n   *\n   * @example\n   * ```javascript\n   * const sdk = ThirdwebSDK.fromPrivateKey(\"SecretPrivateKey\", \"mainnet\");\n   * ```\n   *\n   * @param privateKey - the private key - **DO NOT EXPOSE THIS TO THE PUBLIC**\n   * @param network - the network (chain) to connect to (e.g. \"mainnet\", \"rinkeby\", \"polygon\", \"mumbai\"...) or a fully formed RPC url\n   * @param options - the SDK options to use\n   * @returns an instance of the SDK\n   *\n   * @beta\n   */\n  static fromPrivateKey(\n    privateKey: string,\n    network: ChainOrRpc,\n    options: SDKOptions = {},\n  ): ThirdwebSDK {\n    const rpc = getProviderForNetwork(network);\n    const provider = Signer.isSigner(rpc)\n      ? rpc.provider\n      : typeof rpc === \"string\"\n      ? getReadOnlyProvider(rpc)\n      : rpc;\n    const signer = new ethers.Wallet(privateKey, provider);\n    return ThirdwebSDK.fromSigner(signer, network, options);\n  }\n\n  /**\n   * @internal\n   * the cache of contracts that we have already seen\n   */\n  private contractCache = new Map<\n    string,\n    ValidContractInstance | SmartContract\n  >();\n  /**\n   * @internal\n   * should never be accessed directly, use {@link ThirdwebSDK.getPublisher} instead\n   */\n  private _publisher: Promise<ContractPublisher> | undefined;\n  /**\n   * Upload and download files\n   */\n  public storage: IStorage;\n  /**\n   * New contract deployer\n   */\n  public deployer: ContractDeployer;\n  /**\n   * Interact with the connected wallet\n   */\n  public wallet: UserWallet;\n\n  constructor(\n    network: ChainOrRpc | SignerOrProvider,\n    options: SDKOptions = {},\n    storage: IStorage = new IpfsStorage(),\n  ) {\n    const rpc = getProviderForNetwork(network);\n    super(rpc, options);\n    this.storage = storage;\n    this.deployer = new ContractDeployer(rpc, options, storage);\n    this.wallet = new UserWallet(rpc, options);\n  }\n\n  /**\n   * Get an instance of a Drop contract\n   * @param contractAddress - the address of the deployed contract\n   * @returns the contract\n   */\n  public getNFTDrop(contractAddress: string): NFTDrop {\n    return this.getBuiltInContract(\n      contractAddress,\n      NFTDrop.contractType,\n    ) as NFTDrop;\n  }\n\n  /**\n   * Get an instance of a NFT Collection contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getNFTCollection(address: string): NFTCollection {\n    return this.getBuiltInContract(\n      address,\n      NFTCollection.contractType,\n    ) as NFTCollection;\n  }\n\n  /**\n   * Get an instance of a Edition Drop contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getEditionDrop(address: string): EditionDrop {\n    return this.getBuiltInContract(\n      address,\n      EditionDrop.contractType,\n    ) as EditionDrop;\n  }\n\n  /**\n   * Get an instance of an Edition contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getEdition(address: string): Edition {\n    return this.getBuiltInContract(address, Edition.contractType) as Edition;\n  }\n\n  /**\n   * Get an instance of a Token Drop contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getTokenDrop(address: string): TokenDrop {\n    return this.getBuiltInContract(\n      address,\n      TokenDrop.contractType,\n    ) as TokenDrop;\n  }\n\n  /**\n   * Get an instance of a Token contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getToken(address: string): Token {\n    return this.getBuiltInContract(address, Token.contractType) as Token;\n  }\n\n  /**\n   * Get an instance of a Vote contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getVote(address: string): Vote {\n    return this.getBuiltInContract(address, Vote.contractType) as Vote;\n  }\n\n  /**\n   * Get an instance of a Splits contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getSplit(address: string): Split {\n    return this.getBuiltInContract(address, Split.contractType) as Split;\n  }\n\n  /**\n   * Get an instance of a Marketplace contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getMarketplace(address: string): Marketplace {\n    return this.getBuiltInContract(\n      address,\n      Marketplace.contractType,\n    ) as Marketplace;\n  }\n\n  /**\n   * Get an instance of a Pack contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getPack(address: string): Pack {\n    return this.getBuiltInContract(address, Pack.contractType) as Pack;\n  }\n\n  /**\n   *\n   * @internal\n   * @param address - the address of the contract to instantiate\n   * @param contractType - optional, the type of contract to instantiate\n   * @returns a promise that resolves with the contract instance\n   */\n  public getBuiltInContract<TContractType extends ContractType = ContractType>(\n    address: string,\n    contractType: TContractType,\n  ): ContractForContractType<TContractType> {\n    // if we have a contract in the cache we will return it\n    // we will do this **without** checking any contract type things for simplicity, this may have to change in the future?\n    if (this.contractCache.has(address)) {\n      return this.contractCache.get(\n        address,\n      ) as ContractForContractType<TContractType>;\n    }\n\n    if (contractType === \"custom\") {\n      throw new Error(\n        \"To get an instance of a custom contract, use getContract(address)\",\n      );\n    }\n\n    const newContract = new KNOWN_CONTRACTS_MAP[\n      contractType as keyof typeof KNOWN_CONTRACTS_MAP\n    ](this.getSignerOrProvider(), address, this.storage, this.options);\n\n    this.contractCache.set(address, newContract);\n\n    // return the new contract\n    return newContract as ContractForContractType<TContractType>;\n  }\n\n  /**\n   * @param contractAddress - the address of the contract to attempt to resolve the contract type for\n   * @returns the {@link ContractType} for the given contract address\n   * @throws if the contract type cannot be determined (is not a valid thirdweb contract)\n   */\n  public async resolveContractType(\n    contractAddress: string,\n  ): Promise<ContractType> {\n    const contract = IThirdwebContract__factory.connect(\n      contractAddress,\n      this.getSignerOrProvider(),\n    );\n    const remoteContractType = ethers.utils\n      .toUtf8String(await contract.contractType())\n      // eslint-disable-next-line no-control-regex\n      .replace(/\\x00/g, \"\");\n    invariant(\n      remoteContractType in REMOTE_CONTRACT_TO_CONTRACT_TYPE,\n      `${remoteContractType} is not a valid contract type, falling back to custom contract`,\n    );\n    return REMOTE_CONTRACT_TO_CONTRACT_TYPE[\n      remoteContractType as keyof typeof REMOTE_CONTRACT_TO_CONTRACT_TYPE\n    ];\n  }\n\n  /**\n   * Return all the contracts deployed by the specified address\n   * @param walletAddress - the deployed address\n   */\n  public async getContractList(walletAddress: string) {\n    const addresses = await (\n      await this.deployer.getRegistry()\n    ).getContractAddresses(walletAddress);\n\n    const addressesWithContractTypes = await Promise.all(\n      addresses.map(async (address) => {\n        let contractType: ContractType = \"custom\";\n        try {\n          contractType = await this.resolveContractType(address);\n        } catch (e) {\n          // this going to happen frequently and be OK, we'll just catch it and ignore it\n        }\n        let metadata: ContractMetadata<any, any> | undefined;\n        if (contractType === \"custom\") {\n          try {\n            metadata = (await this.getContract(address)).metadata;\n          } catch (e) {\n            console.log(\n              `Couldn't get contract metadata for custom contract: ${address}`,\n            );\n          }\n        } else {\n          metadata = this.getBuiltInContract(address, contractType).metadata;\n        }\n        return {\n          address,\n          contractType,\n          metadata,\n        };\n      }),\n    );\n\n    return addressesWithContractTypes\n      .filter((e) => e.metadata)\n      .map(({ address, contractType, metadata }) => {\n        invariant(metadata, \"All ThirdwebContracts require metadata\");\n        return {\n          address,\n          contractType,\n          metadata: () => metadata.get(),\n        };\n      });\n  }\n\n  /**\n   * Update the active signer or provider for all contracts\n   * @param network - the new signer or provider\n   */\n  public override updateSignerOrProvider(network: NetworkOrSignerOrProvider) {\n    super.updateSignerOrProvider(network);\n    this.updateContractSignerOrProvider();\n  }\n\n  private updateContractSignerOrProvider() {\n    this.wallet.onNetworkUpdated(this.getSignerOrProvider());\n    this.deployer.updateSignerOrProvider(this.getSignerOrProvider());\n    this._publisher?.then((publisher) => {\n      publisher.updateSignerOrProvider(this.getSignerOrProvider());\n    });\n    for (const [, contract] of this.contractCache) {\n      contract.onNetworkUpdated(this.getSignerOrProvider());\n    }\n  }\n\n  /**\n   * Get an instance of a Custom ThirdwebContract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   * @beta\n   */\n  public async getContract(address: string) {\n    if (this.contractCache.has(address)) {\n      return this.contractCache.get(address) as SmartContract;\n    }\n    try {\n      const publisher = await this.getPublisher();\n      const metadata = await publisher.fetchContractMetadataFromAddress(\n        address,\n      );\n      return this.getContractFromAbi(address, metadata.abi);\n    } catch (e) {\n      throw new Error(`Error fetching ABI for this contract\\n\\n${e}`);\n    }\n  }\n\n  /**\n   * Get an instance of a Custom contract from a json ABI\n   * @param address - the address of the deployed contract\n   * @param abi - the JSON abi\n   * @returns the contract\n   * @beta\n   */\n  public getContractFromAbi(address: string, abi: ContractInterface) {\n    if (this.contractCache.has(address)) {\n      return this.contractCache.get(address) as SmartContract;\n    }\n    const contract = new SmartContract(\n      this.getSignerOrProvider(),\n      address,\n      abi,\n      this.storage,\n      this.options,\n    );\n    this.contractCache.set(address, contract);\n    return contract;\n  }\n\n  /**\n   * @internal\n   */\n  public async getPublisher(): Promise<ContractPublisher> {\n    // if we already have a registry just return it back\n    if (this._publisher) {\n      return this._publisher;\n    }\n\n    // otherwise get the factory address for the active chain and get a new one\n\n    // have to do it like this otherwise we run it over and over and over\n    // \"this._publisher\" has to be assigned to the promise upfront.\n    return (this._publisher = this.getProvider()\n      .getNetwork()\n      .then(async ({ chainId }) => {\n        const factoryAddress = getContractAddressByChainId(\n          chainId,\n          \"contractDeployer\",\n        );\n        return new ContractPublisher(\n          factoryAddress,\n          this.getSignerOrProvider(),\n          this.options,\n          this.storage,\n        );\n      }));\n  }\n}\n","import { NetworkOrSignerOrProvider, TransactionResult } from \"../types\";\nimport { SDKOptions } from \"../../schema/sdk-options\";\nimport { IStorage } from \"../interfaces\";\nimport { RPCConnectionHandler } from \"./rpc-connection-handler\";\nimport {\n  BigNumber,\n  BytesLike,\n  constants,\n  ContractInterface,\n  ethers,\n  utils,\n} from \"ethers\";\nimport invariant from \"tiny-invariant\";\nimport {\n  extractConstructorParams,\n  extractConstructorParamsFromAbi,\n  extractFunctions,\n  fetchContractMetadata,\n  fetchContractMetadataFromAddress,\n} from \"../../common/feature-detection\";\nimport {\n  AbiFunction,\n  ContractParam,\n  CustomContractMetadata,\n  CustomContractMetadataSchema,\n  PublishedContract,\n  PublishedContractSchema,\n} from \"../../schema/contracts/custom\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport {\n  ContractDeployer,\n  ContractPublisher as OnChainContractPublisher,\n  IContractPublisher,\n} from \"contracts\";\nimport { getContractPublisherAddress } from \"../../constants\";\nimport ContractDeployerAbi from \"../../../abis/ContractDeployer.json\";\nimport ContractPublisherAbi from \"../../../abis/ContractPublisher.json\";\nimport { ContractPublishedEvent } from \"contracts/ContractPublisher\";\nimport { ContractDeployedEvent } from \"contracts/ContractDeployer\";\n\n/**\n * Handles publishing contracts (EXPERIMENTAL)\n * @internal\n */\nexport class ContractPublisher extends RPCConnectionHandler {\n  private storage: IStorage;\n  private publisher: ContractWrapper<OnChainContractPublisher>;\n  private factory: ContractWrapper<ContractDeployer>;\n\n  constructor(\n    contractDeployerAddress: string,\n    network: NetworkOrSignerOrProvider,\n    options: SDKOptions,\n    storage: IStorage,\n  ) {\n    super(network, options);\n    this.storage = storage;\n    this.publisher = new ContractWrapper<OnChainContractPublisher>(\n      network,\n      getContractPublisherAddress(),\n      ContractPublisherAbi,\n      options,\n    );\n    this.factory = new ContractWrapper<ContractDeployer>(\n      network,\n      contractDeployerAddress,\n      ContractDeployerAbi,\n      options,\n    );\n  }\n\n  public override updateSignerOrProvider(\n    network: NetworkOrSignerOrProvider,\n  ): void {\n    super.updateSignerOrProvider(network);\n    this.publisher.updateSignerOrProvider(network);\n    this.factory.updateSignerOrProvider(network);\n  }\n\n  /**\n   * @internal\n   * @param metadataUri\n   */\n  public async extractConstructorParams(\n    metadataUri: string,\n  ): Promise<ContractParam[]> {\n    return extractConstructorParams(metadataUri, this.storage);\n  }\n\n  /**\n   * @internal\n   * @param metadataUri\n   */\n  public async extractFunctions(metadataUri: string): Promise<AbiFunction[]> {\n    return extractFunctions(metadataUri, this.storage);\n  }\n\n  /**\n   * @internal\n   * @param metadataUri\n   */\n  public async fetchFullContractMetadata(metadataUri: string) {\n    return fetchContractMetadata(metadataUri, this.storage);\n  }\n\n  /**\n   * @internal\n   * @param address\n   */\n  public async fetchContractMetadataFromAddress(address: string) {\n    return fetchContractMetadataFromAddress(\n      address,\n      this.getProvider(),\n      this.storage,\n    );\n  }\n\n  /**\n   * @interface\n   * @param publisherAddress\n   */\n  public async getAll(publisherAddress: string): Promise<PublishedContract[]> {\n    const data = await this.publisher.readContract.getAllPublishedContracts(\n      publisherAddress,\n    );\n    return data\n      .filter((d) => d.publishTimestamp) // TODO (byoc) remove this before going to prod\n      .map((d) => this.toPublishedContract(d));\n  }\n\n  /**\n   * @internal\n   * @param publisherAddress\n   * @param contractId\n   */\n  public async getAllVersions(\n    publisherAddress: string,\n    contractId: string,\n  ): Promise<PublishedContract[]> {\n    const contractStructs =\n      await this.publisher.readContract.getPublishedContractVersions(\n        publisherAddress,\n        contractId,\n      );\n    if (contractStructs.length === 0) {\n      throw Error(\"Not found\");\n    }\n    return contractStructs.map((d) => this.toPublishedContract(d));\n  }\n\n  public async getLatest(\n    publisherAddress: string,\n    contractId: string,\n  ): Promise<PublishedContract> {\n    const model = await this.publisher.readContract.getPublishedContract(\n      publisherAddress,\n      contractId,\n    );\n    return this.toPublishedContract(model);\n  }\n\n  public async publish(\n    metadataUri: string,\n  ): Promise<TransactionResult<PublishedContract>> {\n    return (await this.publishBatch([metadataUri]))[0];\n  }\n\n  public async publishBatch(\n    metadataUris: string[],\n  ): Promise<TransactionResult<PublishedContract>[]> {\n    const signer = this.getSigner();\n    invariant(signer, \"A signer is required\");\n    const publisher = await signer.getAddress();\n\n    const fullMetadatas = await Promise.all(\n      metadataUris.map(async (uri) => ({\n        uri,\n        fullMetadata: await this.fetchFullContractMetadata(uri),\n      })),\n    );\n\n    const encoded = fullMetadatas.map((meta) => {\n      const bytecodeHash = utils.solidityKeccak256(\n        [\"bytes\"],\n        [meta.fullMetadata.bytecode],\n      );\n      const contractId = meta.fullMetadata.name;\n      return this.publisher.readContract.interface.encodeFunctionData(\n        \"publishContract\",\n        [publisher, meta.uri, bytecodeHash, constants.AddressZero, contractId],\n      );\n    });\n    const receipt = await this.publisher.multiCall(encoded);\n    const events = this.publisher.parseLogs<ContractPublishedEvent>(\n      \"ContractPublished\",\n      receipt.logs,\n    );\n    if (events.length < 1) {\n      throw new Error(\"No ContractDeployed event found\");\n    }\n    return events.map((e) => {\n      const contract = e.args.publishedContract;\n      return {\n        receipt,\n        data: async () => this.toPublishedContract(contract),\n      };\n    });\n  }\n\n  // TODO unpublish contract\n\n  /**\n   * @internal\n   * @param publisherAddress\n   * @param contractId\n   * @param constructorParamValues\n   * @param contractMetadata\n   */\n  public async deployPublishedContract(\n    publisherAddress: string,\n    contractId: string,\n    constructorParamValues: any[],\n    contractMetadata?: CustomContractMetadata,\n  ): Promise<string> {\n    // TODO this gets the latest version, should we allow deploying a certain version?\n    const contract = await this.publisher.readContract.getPublishedContract(\n      publisherAddress,\n      contractId,\n    );\n    return this.deployContract(\n      contract.publishMetadataUri,\n      constructorParamValues,\n      contractMetadata,\n    );\n  }\n\n  /**\n   * @internal\n   * @param publishMetadataUri\n   * @param constructorParamValues\n   * @param contractMetadata\n   */\n  public async deployContract(\n    publishMetadataUri: string,\n    constructorParamValues: any[],\n    contractMetadata?: CustomContractMetadata,\n  ) {\n    const signer = this.getSigner();\n    invariant(signer, \"A signer is required\");\n    const unwrappedMetadata = CustomContractMetadataSchema.parse(\n      await this.storage.get(publishMetadataUri),\n    );\n    const metadata = await this.fetchFullContractMetadata(publishMetadataUri);\n    const publisher = await signer.getAddress();\n    const bytecode = metadata.bytecode.startsWith(\"0x\")\n      ? metadata.bytecode\n      : `0x${metadata.bytecode}`;\n    if (!ethers.utils.isHexString(bytecode)) {\n      throw new Error(`Contract bytecode is invalid.\\n\\n${bytecode}`);\n    }\n    const salt = ethers.utils.formatBytes32String(Math.random().toString()); // TODO expose as optional\n    const value = BigNumber.from(0);\n    const constructorParamTypes = extractConstructorParamsFromAbi(\n      metadata.abi,\n    ).map((p) => p.type);\n    const paramValues = this.convertParamValues(\n      constructorParamTypes,\n      constructorParamValues,\n    );\n    const constructorParamsEncoded = ethers.utils.defaultAbiCoder.encode(\n      constructorParamTypes,\n      paramValues,\n    );\n    const deployMetadata = {\n      ...unwrappedMetadata,\n      deployMetadata: contractMetadata || {},\n      deployTimestamp: new Date().toISOString(),\n    };\n    const populatedContractUri = await this.storage.uploadMetadata(\n      deployMetadata,\n    );\n    const receipt = await this.factory.sendTransaction(\"deployInstance\", [\n      publisher,\n      bytecode,\n      constructorParamsEncoded,\n      salt,\n      value,\n      populatedContractUri,\n    ]);\n    const events = this.factory.parseLogs<ContractDeployedEvent>(\n      \"ContractDeployed\",\n      receipt.logs,\n    );\n    if (events.length < 1) {\n      throw new Error(\"No ContractDeployed event found\");\n    }\n    return events[0].args.deployedContract;\n  }\n\n  private convertParamValues(\n    constructorParamTypes: string[],\n    constructorParamValues: any[],\n  ) {\n    // check that both arrays are same length\n    if (constructorParamTypes.length !== constructorParamValues.length) {\n      throw Error(\"Passed the wrong number of constructor arguments\");\n    }\n    return constructorParamTypes.map((p, index) => {\n      if (p.endsWith(\"[]\")) {\n        if (typeof constructorParamValues[index] === \"string\") {\n          return JSON.parse(constructorParamValues[index]);\n        } else {\n          return constructorParamValues[index];\n        }\n      }\n      if (p === \"bytes32\") {\n        return ethers.utils.formatBytes32String(\n          constructorParamValues[index].toString(),\n        );\n      }\n      if (p.startsWith(\"bytes\")) {\n        return ethers.utils.toUtf8Bytes(\n          constructorParamValues[index].toString(),\n        );\n      }\n      if (p.startsWith(\"uint\") || p.startsWith(\"int\")) {\n        return BigNumber.from(constructorParamValues[index].toString());\n      }\n      return constructorParamValues[index];\n    });\n  }\n\n  /**\n   * @internal\n   * @param abi\n   * @param bytecode\n   * @param constructorParams\n   */\n  public async deployContractWithAbi(\n    abi: ContractInterface,\n    bytecode: BytesLike | { object: string },\n    constructorParams: Array<any>,\n  ): Promise<string> {\n    const signer = this.getSigner();\n    invariant(signer, \"Signer is required to deploy contracts\");\n    const deployer = await new ethers.ContractFactory(abi, bytecode)\n      .connect(signer)\n      .deploy(...constructorParams);\n    const deployedContract = await deployer.deployed();\n    return deployedContract.address;\n  }\n\n  private toPublishedContract(\n    contractModel: IContractPublisher.CustomContractInstanceStruct,\n  ) {\n    return PublishedContractSchema.parse({\n      id: contractModel.contractId,\n      timestamp: contractModel.publishTimestamp,\n      metadataUri: contractModel.publishMetadataUri, // TODO download\n    });\n  }\n}\n"],"mappings":"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,OAAQ,CACN,CACE,aAAc,UACd,KAAM,oBACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,YACN,KAAM,YAGV,gBAAiB,aACjB,KAAM,eAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,iBACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,eACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,UACN,KAAM,YAGV,KAAM,sBACN,KAAM,SAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,iBACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,OACd,KAAM,aACN,KAAM,SAGV,KAAM,yBACN,KAAM,SAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,iBACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,QACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,WACN,KAAM,YAGV,KAAM,gBACN,KAAM,SAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,OACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,oBACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,eACN,KAAM,YAGV,KAAM,mBACN,KAAM,SAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,OACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,YAGV,KAAM,cACN,KAAM,SAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,OACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,YAGV,KAAM,cACN,KAAM,SAER,CACE,OAAQ,CAAA,EACR,KAAM,qBACN,QAAS,CACP,CACE,aAAc,U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","names":[]}