import { ClaimNFTParams, ClaimNFTReturnType, DropContract, RequiredParam } from "../../types";
import { NFTDrop, QueryAllParams } from "@thirdweb-dev/sdk";
/** **********************/
/**       READ HOOKS    **/
/** **********************/
/**
 * Use this to get a list of *unclaimed* NFT tokens of your ERC721 Drop contract.
 *
 * @example
 * ```javascript
 * const { data: unclaimedNfts, isLoading, error } = useUnclaimedNFTs(<YourERC721DropContractInstance>, { start: 0, count: 100 });
 * ```
 *
 * @param contract - an instace of a contract that extends the Erc721 spec (nft drop, custom contract that follows the Erc721 & drop spec)
 * @param queryParams - query params to pass to the query for the sake of pagination
 * @returns a response object that includes an array of NFTs that are unclaimed
 * @beta
 */
export declare function useUnclaimedNFTs(contract: RequiredParam<NFTDrop>, queryParams?: QueryAllParams): import("react-query").UseQueryResult<{
    [x: string]: import("@thirdweb-dev/sdk").Json;
    name?: string | undefined;
    description?: string | null | undefined;
    image?: string | null | undefined;
    external_url?: string | null | undefined;
    animation_url?: string | null | undefined;
    uri: string;
    id: import("ethers").BigNumber;
}[], unknown>;
/**
 * Use this to get a list of *claimed* (minted) NFT tokens of your ERC721 Drop contract.
 *
 * @remarks Equivalent to using {@link useNFTs}.
 *
 * @example
 * ```javascript
 * const { data: claimedNFTs, isLoading, error } = useClaimedNFTs(<YourERC721DropContractInstance>, { start: 0, count: 100 });
 * ```
 *
 * @param contract - an instace of a {@link DropContract}
 * @param queryParams - query params to pass to the query for the sake of pagination
 * @returns a response object that includes an array of NFTs that are claimed
 * @beta
 */
export declare function useClaimedNFTs(contract: RequiredParam<DropContract>, queryParams?: QueryAllParams): import("react-query").UseQueryResult<import("../../types").NFT<DropContract>[], unknown>;
/**
 *
 * @param contract - an instace of a {@link NFTDrop}
 * @returns a response object that includes the number of NFTs that are unclaimed
 */
export declare function useUnclaimedNFTSupply(contract: RequiredParam<NFTDrop>): import("react-query").UseQueryResult<import("ethers").BigNumber, unknown>;
/**
 *
 * @param contract - an instace of a {@link DropContract}
 * @returns a response object that includes the number of NFTs that are claimed
 */
export declare function useClaimedNFTSupply(contract: RequiredParam<DropContract>): import("react-query").UseQueryResult<import("ethers").BigNumber, unknown>;
/** **********************/
/**     WRITE HOOKS     **/
/** **********************/
/**
 * Use this to mint a new NFT on your {@link DropContract}
 *
 * @example
 * ```jsx
 * const Component = () => {
 *   const {
 *     mutate: claimNft,
 *     isLoading,
 *     error,
 *   } = useClaimNFT(DropContract);
 *
 *   if (error) {
 *     console.error("failed to mint nft", error);
 *   }
 *
 *   return (
 *     <button
 *       disabled={isLoading}
 *       onClick={() => claimNft({to: "0x...", quantity: 1})}
 *     >
 *       Mint!
 *     </button>
 *   );
 * };
 * ```
 *
 * @param contract - an instace of a {@link DropContract}
 * @returns a mutation object that can be used to mint a new NFT token to the connected wallet
 * @beta
 */
export declare function useClaimNFT<TContract extends DropContract>(contract: RequiredParam<TContract>): import("react-query").UseMutationResult<ClaimNFTReturnType<TContract>, unknown, ClaimNFTParams<TContract>, unknown>;
