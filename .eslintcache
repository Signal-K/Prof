[{"/Users/aashritgarg/Desktop/Web/theclub/src/index.js":"1","/Users/aashritgarg/Desktop/Web/theclub/src/App.js":"2","/Users/aashritgarg/Desktop/Web/theclub/src/components/NavBar.js":"3","/Users/aashritgarg/Desktop/Web/theclub/src/components/MainMint.js":"4"},{"size":337,"mtime":1653473152886,"results":"5","hashOfConfig":"6"},{"size":5030,"mtime":1653473138062,"results":"7","hashOfConfig":"6"},{"size":3911,"mtime":1653473152880,"results":"8","hashOfConfig":"6"},{"size":5153,"mtime":1653473152879,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hrtwtx",{"filePath":"12","messages":"13","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"/Users/aashritgarg/Desktop/Web/theclub/src/index.js",[],"/Users/aashritgarg/Desktop/Web/theclub/src/App.js",["21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43"],"import './App.css';\nimport { useState, useEffect, useMemo } from 'react';\nimport MainMint from './components/MainMint';\nimport NavBar from './components/NavBar';\n\n// Comments imports\nimport { QueryClient, QueryClientProvider, QueryCache } from \"react-query\";\nimport { ChakraProvider, Box, Heading, Button } from '@chakra-ui/react';\nimport { Toaster, toast } from \"react-hot-toast\";\nimport { WagmiProvider } from \"wagmi\";\nimport { providers } from 'ethers';\n\n// Thirdweb & contract components\nimport { useAddress, useMetamask, useEditionDrop, useToken, useVote, useNetwork } from '@thirdweb-dev/react';\nimport { ChainId } from '@thirdweb-dev/sdk';\nimport { AddressZero } from \"@ethersproject/constants\";\n//import editionDrop from \"./editionDrop\";\n\n// NFT Display\n// import CharacterGallery from ./components/CharacterGallery;\n\n// Minigame components\nimport Phaser from 'phaser';\nimport { useMoralis, useMoralisWeb3Api, useMoralisWeb3ApiCall, useNFTbalances, } from \"react-moralis\";\nimport PhaserLoad from './components/PhaserLoad';\n//import PhaserLoad from './components/PhaserLoad';\n\n// Commenting components\nconst provider = providers.getDefaultProvider(\"http://localhost:8545\");\n// Create a react-query client\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnWindowFocus: false,\n    },\n  },\n  queryCache: new QueryCache({\n    onError: () => {\n      toast.error(\n        \"Network Error: Ensure Metamask is connected to the same network that your contract is deployed to.\"\n      );\n    },\n  }),\n});\n\n\nfunction App() {\n  // Thirdweb components\n  const editionDropAddress = \"0xd4F18cF04B9C74d5B69775BBfFbf433Ff24D8dbC\";\n  //const editionDrop = useEditionDrop(\"0xd4F18cF04B9C74d5B69775BBfFbf433Ff24D8dbC\");\n  // Initialise the token contract\n  const tokenAddress = \"0xe850E4a40F8F1B666C3AC21e7f51e6279cA0af7E\";\n  //const token = useToken(\"0xe850E4a40F8F1B666C3AC21e7f51e6279cA0af7E\");\n  //const memberAddressEtherscan = \"https://rinkeby.etherscan.io/address\" + member.address;\n  const shortenAddress = (str) => {\n    return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\n  };\n  const shortenAddressMore = (str) => {\n    return str.substring(0, 4) + \"..\" + str.substring(str.length - 2);\n  }\n  // Vote token contract\n  const voteAddress = \"0xCD2Bf092ce9E051360b649D038c9ecf5b54D203e\";\n  //const vote = useVote(\"0xCD2Bf092ce9E051360b649D038c9ecf5b54D203e\");\n\n  // Moralis Components\n\n\n  // Original minting components\n  const [accounts, setAccounts] = useState([]); // Any updates on the frontend (ui) -> use useState to update the value on the frontend (e.g. when the user logins/authenticates)\n\n  const isConnected = Boolean(accounts[0]); // Address of wallet that is connected\n\n  async function connectAccount() {\n      if (window.ethereum) {\n          const accounts = await window.ethereum.request({    \n              method: \"eth_requestAccounts\", // Give all the accounts that exist in the user's metamask extension\n          });\n          console.log(accounts);\n          setAccounts(accounts);\n      }\n  }\n\n  useEffect(() => {\n    document.title = \"Star Sailors Mint\";  \n  }, []);\n\n  return (\n    <WagmiProvider autoConnect provider={provider}>\n      <div className=\"overlay\">\n      <div className=\"App\">\n        <NavBar accounts={accounts} setAccounts={setAccounts} />\n        <MainMint accounts={accounts} setAccounts={setAccounts} />\n\n        {/* Commenting tool */}\n        { isConnected ? (\n          <QueryClientProvider client={queryClient}>\n            <Box p={8} maxW=\"600px\" minW=\"320px\" m=\"0 auto\">\n              {/*\n              <Comments topic=\"my-blog-post\" /> // -> Set up headless CMS with automated Comments tag for each post\n              <Toaster position=\"bottom-right\" />\n              */}\n            </Box>\n          </QueryClientProvider>\n        ) : (\n          <Button\n            backgroundColor=\"#D6517D\"\n            borderRadius=\"5px\"\n            boxShadow=\"0px 2px 2px 1px #0F0F0F\"\n            color=\"white\"\n            cursor=\"pointer\"\n            fontFamily=\"inherit\" \n            padding=\"15px\"\n            margin=\"0 15px\"\n              onClick={connectAccount}>\n                Connect\n          </Button>\n        )}\n\n        {/* Create a new component that only shows if the user has the NFT in their wallet \n        How about disabling components on mobile devices? -> Start thinking about a mobile design \n        { isConnected ? (\n          <PhaserLoad accounts={accounts} setAccounts={setAccounts} />\n          // Allow the users to comment on the NFT collection\n          // Show the user's NFTs from the collection -> e.g. commenting on specific nfts, the multiplayer battles, etc\n          // https://skinetics.notion.site/NFT-Drop-c9cabbaf202d46e9bf79e271b9be0b55\n\n          // Notification section -> web3 notifications? One signal?\n        ) : (\n          <div>\n            \n          </div>\n        )}*/}\n      </div>\n      <div className=\"moving-background\"></div>\n    </div>\n    </WagmiProvider>\n  );\n}\n\nexport default App;\n","/Users/aashritgarg/Desktop/Web/theclub/src/components/NavBar.js",["44","45","46"],"import React from \"react\";\nimport { Box, Button, Flex, Image, Link, Spacer } from '@chakra-ui/react';\nimport Facebook from \"../assets/social-media-icons/facebook_32x32.png\";\nimport Twitter from \"../assets/social-media-icons/twitter_32x32.png\";\nimport Email from \"../assets/social-media-icons/email_32x32.png\";\nimport Github from \"../assets/social-media-icons/github.png\";\nimport Documentation from \"../assets/social-media-icons/documentation.png\";\nimport Keybase from \"../assets/social-media-icons/keybase.png\";\n\nconst NavBar = ({ accounts, setAccounts }) => {\n    const isConnected = Boolean(accounts[0]); // Address of wallet that is connected\n\n    async function connectAccount() {\n        if (window.ethereum) {\n            const accounts = await window.ethereum.request({\n                method: \"eth_requestAccounts\", // Give all the accounts that exist in the user's metamask extension\n            });\n            console.log(accounts);\n            setAccounts(accounts);\n        }\n    }\n\n    return (\n        <Flex justify=\"space-between\" align=\"center\" padding=\"30px\">\n            {/*Left side of navbar */}\n            <Flex justify=\"space-around\" width=\"40%\" padding=\"0 75px\">\n                <Link href=\"keybase://chat/signalkinetics#general/41\">\n                    <Image src={Keybase} boxSize=\"42px\" margin=\"0 15px\" />\n                </Link>\n                <Link href=\"https://docs.skinetics.tech/whitepaper\" target=\"_blank\">\n                    <Image src={Documentation} boxSize=\"42px\" margin=\"0 15px\" />\n                </Link>\n                <Link href=\"https://github.com/signal-k\" target=\"_blank\">\n                    <Image src={Github} boxSize=\"42px\" margin=\"0 15px\" />\n                </Link>\n            </Flex> {/*Github, Dribbble, Deviantart??? Opensea*/}\n            \n            {/* Right side of navbar */}\n            <Flex\n                justify=\"space-around\"\n                align=\"center\"\n                width=\"40%\"\n                padding=\"30px 30px 30px 30px\"\n            >\n                <Link style={{ textDecoration: 'none' }} color=\"#ffffff\" href=\"mailto:liam@skinetics.tech\" target=\"_blank\">\n                    <Box margin=\"0 15px\">Contact</Box>\n                </Link>\n                <Spacer />\n\n                <Link style={{ textDecoration: 'none' }} color=\"#ffffff\" href=\"https://docs.skinetics.tech/whitepaper\" target=\"_blank\">\n                    <Box margin=\"0 15px\">Whitepaper</Box>\n                </Link>\n                <Spacer />\n                 \n\n                {/* Connected */} {/* If connected, add Memberstack login for docs */}\n                {isConnected ? ( // Insert custom links for team members if logged in with the correct tokens\n                <Flex\n                    justify=\"space-around\"\n                    align=\"center\"\n                    width=\"40%\"\n                    padding=\"30px 30px 30px 30px\"\n                >\n                    <Link style={{ textDecoration: 'none' }} color=\"#ffffff\" href=\"https://dao.emulsion.space\" target=\"_blank\">\n                        <Box margin=\"0 15px\">Enter the DAO</Box>\n                    </Link>\n                    <Spacer />\n\n                    <Box margin=\"0 15px\">Connected</Box>\n                </Flex>\n                    \n                    \n                    /*<Link href=\"\">\n                    \n    </Link>*/\n                ) : (\n                    <Button\n                        backgroundColor=\"#D6517D\"\n                        borderRadius=\"5px\"\n                        boxShadow=\"0px 2px 2px 1px #0F0F0F\"\n                        color=\"white\"\n                        cursor=\"pointer\"\n                        fontFamily=\"inherit\" \n                        padding=\"15px\"\n                        margin=\"0 15px\"\n                    onClick={connectAccount}>Connect</Button>\n                )}\n            </Flex>\n        </Flex>\n    )\n}\n\nexport default NavBar;","/Users/aashritgarg/Desktop/Web/theclub/src/components/MainMint.js",["47"],"import { useState } from \"react\";\nimport { ethers, BigNumber } from 'ethers';\nimport roboPunksNFT from '../RoboPunksNFT.json'; // Grab the ABI from the contract\nimport WristbandNFT from '../WristbandNFT.json';\nimport { Box, Button, Flex, Input, Text } from \"@chakra-ui/react\";\n\nconst roboPunksNFTAddress = \"0xA0Ba4E895447770cBf0ff998d3DBa0a08496CE90\";\n//const roboPunksNFTAddress = \"0xd4F18cF04B9C74d5B69775BBfFbf433Ff24D8dbC\";\n\nconst MainMint = ({ accounts, setAccounts }) => {\n    const [mintAmount, setMintAmount] = useState(1);\n    const isConnected = Boolean(accounts[0]);\n\n    async function handleMint() {\n        if (window.ethereum) {\n            const provider = new ethers.providers.Web3Provider(window.ethereum); // Provides ethers to connect to the blockchain\n            const signer = provider.getSigner();\n            const contract = new ethers.Contract( // Use contract functions\n                roboPunksNFTAddress,\n                //WristbandNFT.abi,\n                roboPunksNFT.abi,\n                signer\n            );\n            try {\n                const response = await contract.mint(BigNumber.from(mintAmount), {\n                    value: ethers.utils.parseEther((0.02 * mintAmount).toString()),\n                });\n                console.log('response: ', response);\n            } catch (err) {\n                console.log(\"error: \", err)\n            }\n        }\n    }\n\n    const handleDecrement = () => { // This function is run when the \"minus\" button is hit on the mint component\n        if (mintAmount <= 1) return;\n        setMintAmount(mintAmount - 1); // Handle the button if the option is not set to equal to or below 1 (from above line)\n    };\n\n    const handleIncrement = () => {\n        if (mintAmount >= 3) return; // The user shouldn't be allowed to mint more than 3 tokens at a time, per wallet, according to the contract [abi]\n        setMintAmount(mintAmount + 1);\n    };\n\n    return (\n        <Flex justify=\"center\" align=\"center\" height=\"100vh\" paddingBottom=\"150px\">\n            <Box width=\"520px\">\n                <div>\n                    <Text fontSize=\"48px\" textShadow=\"0 5px #000000\">Star Sailors</Text>\n                    <Text\n                        fontSize=\"30px\"\n                        letterSpacing=\"-5.5%\"\n                        fontFamily=\"VT323\"\n                        textShadow=\"0 2px 2px #000000\"\n                    >\n                        Preorder Star Sailors characters, items and components here\n                    </Text>\n                </div>\n\n                {isConnected ? (\n                    <div>\n                        <Flex align=\"center\" justify=\"center\">\n                            <Button\n                                backgroundColor=\"#D6517D\"\n                                borderRadius=\"5px\"\n                                boxShadow=\"0px 2px 2px 1px #0F0F0F\"\n                                color=\"white\"\n                                cursor=\"pointer\"\n                                fontFamily=\"inherit\"\n                                padding=\"15px\"\n                                marginTop=\"10px\"\n                            onClick={handleDecrement}>-</Button>\n                            <Input\n                                readOnly\n                                fontFamily=\"inherit\"\n                                width=\"100px\"\n                                height=\"40px\"\n                                textAlign=\"center\"\n                                paddingLeft=\"19px\"\n                                marginTop=\"10px\"\n                            type=\"number\" value={mintAmount} />\n                            <Button\n                                backgroundColor=\"#D6517D\"\n                                borderRadius=\"5px\"\n                                boxShadow=\"0px 2px 2px 1px #0F0F0F\"\n                                color=\"white\"\n                                cursor=\"pointer\"\n                                fontFamily=\"inherit\"\n                                padding=\"15px\"\n                                marginTop=\"10px\"\n                            onClick={handleIncrement}>+</Button>\n                         </Flex>\n                        <Button\n                            backgroundColor=\"#D6517D\"\n                            borderRadius=\"5px\"\n                            boxShadow=\"0px 2px 2px 1px #0F0F0F\"\n                            color=\"white\"\n                            cursor=\"pointer\"\n                            fontFamily=\"inherit\"\n                            padding=\"15px\"\n                            marginTop=\"10px\"\n                        onClick={handleMint}>Mint now</Button>\n                    </div>\n                ) : ( // If not connected\n                    <Text\n                        marginTop=\"70px\"\n                        fontSize=\"30px\"\n                        letterSpacing=\"-5.5%\"\n                        fontFamily=\"VT323\"\n                        textShadow=\"0 3px #000000\"\n                        color=\"#d6517D\"\n                    >You must be connected to mint</Text>\n                )}\n            </Box>\n        </Flex>\n    );\n};\n\nexport default MainMint;",{"ruleId":"48","severity":1,"message":"49","line":2,"column":31,"nodeType":"50","messageId":"51","endLine":2,"endColumn":38},{"ruleId":"48","severity":1,"message":"52","line":8,"column":10,"nodeType":"50","messageId":"51","endLine":8,"endColumn":24},{"ruleId":"48","severity":1,"message":"53","line":8,"column":31,"nodeType":"50","messageId":"51","endLine":8,"endColumn":38},{"ruleId":"48","severity":1,"message":"54","line":9,"column":10,"nodeType":"50","messageId":"51","endLine":9,"endColumn":17},{"ruleId":"48","severity":1,"message":"55","line":14,"column":10,"nodeType":"50","messageId":"51","endLine":14,"endColumn":20},{"ruleId":"48","severity":1,"message":"56","line":14,"column":22,"nodeType":"50","messageId":"51","endLine":14,"endColumn":33},{"ruleId":"48","severity":1,"message":"57","line":14,"column":35,"nodeType":"50","messageId":"51","endLine":14,"endColumn":49},{"ruleId":"48","severity":1,"message":"58","line":14,"column":51,"nodeType":"50","messageId":"51","endLine":14,"endColumn":59},{"ruleId":"48","severity":1,"message":"59","line":14,"column":61,"nodeType":"50","messageId":"51","endLine":14,"endColumn":68},{"ruleId":"48","severity":1,"message":"60","line":14,"column":70,"nodeType":"50","messageId":"51","endLine":14,"endColumn":80},{"ruleId":"48","severity":1,"message":"61","line":15,"column":10,"nodeType":"50","messageId":"51","endLine":15,"endColumn":17},{"ruleId":"48","severity":1,"message":"62","line":16,"column":10,"nodeType":"50","messageId":"51","endLine":16,"endColumn":21},{"ruleId":"48","severity":1,"message":"63","line":23,"column":8,"nodeType":"50","messageId":"51","endLine":23,"endColumn":14},{"ruleId":"48","severity":1,"message":"64","line":24,"column":10,"nodeType":"50","messageId":"51","endLine":24,"endColumn":20},{"ruleId":"48","severity":1,"message":"65","line":24,"column":22,"nodeType":"50","messageId":"51","endLine":24,"endColumn":39},{"ruleId":"48","severity":1,"message":"66","line":24,"column":41,"nodeType":"50","messageId":"51","endLine":24,"endColumn":62},{"ruleId":"48","severity":1,"message":"67","line":24,"column":64,"nodeType":"50","messageId":"51","endLine":24,"endColumn":78},{"ruleId":"48","severity":1,"message":"68","line":25,"column":8,"nodeType":"50","messageId":"51","endLine":25,"endColumn":18},{"ruleId":"48","severity":1,"message":"69","line":49,"column":9,"nodeType":"50","messageId":"51","endLine":49,"endColumn":27},{"ruleId":"48","severity":1,"message":"70","line":52,"column":9,"nodeType":"50","messageId":"51","endLine":52,"endColumn":21},{"ruleId":"48","severity":1,"message":"71","line":55,"column":9,"nodeType":"50","messageId":"51","endLine":55,"endColumn":23},{"ruleId":"48","severity":1,"message":"72","line":58,"column":9,"nodeType":"50","messageId":"51","endLine":58,"endColumn":27},{"ruleId":"48","severity":1,"message":"73","line":62,"column":9,"nodeType":"50","messageId":"51","endLine":62,"endColumn":20},{"ruleId":"48","severity":1,"message":"74","line":3,"column":8,"nodeType":"50","messageId":"51","endLine":3,"endColumn":16},{"ruleId":"48","severity":1,"message":"75","line":4,"column":8,"nodeType":"50","messageId":"51","endLine":4,"endColumn":15},{"ruleId":"48","severity":1,"message":"76","line":5,"column":8,"nodeType":"50","messageId":"51","endLine":5,"endColumn":13},{"ruleId":"48","severity":1,"message":"77","line":4,"column":8,"nodeType":"50","messageId":"51","endLine":4,"endColumn":20},"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'ChakraProvider' is defined but never used.","'Heading' is defined but never used.","'Toaster' is defined but never used.","'useAddress' is defined but never used.","'useMetamask' is defined but never used.","'useEditionDrop' is defined but never used.","'useToken' is defined but never used.","'useVote' is defined but never used.","'useNetwork' is defined but never used.","'ChainId' is defined but never used.","'AddressZero' is defined but never used.","'Phaser' is defined but never used.","'useMoralis' is defined but never used.","'useMoralisWeb3Api' is defined but never used.","'useMoralisWeb3ApiCall' is defined but never used.","'useNFTbalances' is defined but never used.","'PhaserLoad' is defined but never used.","'editionDropAddress' is assigned a value but never used.","'tokenAddress' is assigned a value but never used.","'shortenAddress' is assigned a value but never used.","'shortenAddressMore' is assigned a value but never used.","'voteAddress' is assigned a value but never used.","'Facebook' is defined but never used.","'Twitter' is defined but never used.","'Email' is defined but never used.","'WristbandNFT' is defined but never used."]